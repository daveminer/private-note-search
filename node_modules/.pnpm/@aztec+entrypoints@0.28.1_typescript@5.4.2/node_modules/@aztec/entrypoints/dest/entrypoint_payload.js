import { Fr } from '@aztec/aztec.js/fields';
import { PackedArguments, emptyFunctionCall } from '@aztec/circuit-types';
import { padArrayEnd } from '@aztec/foundation/collection';
import { pedersenHash } from '@aztec/foundation/crypto';
// These must match the values defined in:
// - noir-projects/aztec-nr/aztec/src/entrypoint/app.nr
const ACCOUNT_MAX_CALLS = 4;
// - and noir-projects/aztec-nr/aztec/src/entrypoint/fee.nr
const FEE_MAX_CALLS = 2;
/**
 * Builds a payload to be sent to the account contract
 * @param calls - The function calls to run
 * @param maxCalls - The maximum number of call expected to be run. Used for padding
 * @returns A payload object and packed arguments
 */
function buildPayload(calls, maxCalls) {
    const nonce = Fr.random();
    const paddedCalls = padArrayEnd(calls, emptyFunctionCall(), maxCalls);
    const packedArguments = [];
    for (const call of paddedCalls) {
        packedArguments.push(PackedArguments.fromArgs(call.args));
    }
    const formattedCalls = paddedCalls.map((call, index) => ({
        // eslint-disable-next-line camelcase
        args_hash: packedArguments[index].hash,
        // eslint-disable-next-line camelcase
        function_selector: call.functionData.selector.toField(),
        // eslint-disable-next-line camelcase
        target_address: call.to.toField(),
        // eslint-disable-next-line camelcase
        is_public: !call.functionData.isPrivate,
    }));
    return {
        payload: {
            // eslint-disable-next-line camelcase
            function_calls: formattedCalls,
            nonce,
        },
        packedArguments,
    };
}
/** builds the payload for a Dapp entrypoint */
export function buildDappPayload(call) {
    return buildPayload([call], 1);
}
/** Assembles an entrypoint app payload from a set of private and public function calls */
export function buildAppPayload(calls) {
    return buildPayload(calls, ACCOUNT_MAX_CALLS);
}
/** Creates the payload for paying the fee for a transaction */
export async function buildFeePayload(feeOpts) {
    const calls = feeOpts ? await feeOpts.paymentMethod.getFunctionCalls(new Fr(feeOpts.maxFee)) : [];
    return buildPayload(calls, FEE_MAX_CALLS);
}
// TODO (dogfooding) change all of these names app/dapp/fee/payload and generator indices for all of them
/** Hashes a payload to a 32-byte buffer */
export function hashPayload(payload, generatorIndex) {
    return pedersenHash(flattenPayload(payload).map(fr => fr.toBuffer()), generatorIndex);
}
/** Hash the payload for a dapp */
export function hashDappPayload(payload, userAddress, generatorIndex) {
    return pedersenHash([...flattenPayload(payload).map(fr => fr.toBuffer()), userAddress.toBuffer()], generatorIndex);
}
/** Flattens an payload */
function flattenPayload(payload) {
    return [
        ...payload.function_calls.flatMap(call => [
            call.args_hash,
            call.function_selector,
            call.target_address,
            new Fr(call.is_public),
        ]),
        payload.nonce,
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50cnlwb2ludF9wYXlsb2FkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2VudHJ5cG9pbnRfcGF5bG9hZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUMsT0FBTyxFQUFnQixlQUFlLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXhELDBDQUEwQztBQUMxQyx1REFBdUQ7QUFDdkQsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDNUIsMkRBQTJEO0FBQzNELE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQztBQW1DeEI7Ozs7O0dBS0c7QUFDSCxTQUFTLFlBQVksQ0FBQyxLQUFxQixFQUFFLFFBQWdCO0lBQzNELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUUxQixNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdEUsTUFBTSxlQUFlLEdBQXNCLEVBQUUsQ0FBQztJQUM5QyxLQUFLLE1BQU0sSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQy9CLGVBQWUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsTUFBTSxjQUFjLEdBQTZCLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pGLHFDQUFxQztRQUNyQyxTQUFTLEVBQUUsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUk7UUFDdEMscUNBQXFDO1FBQ3JDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUN2RCxxQ0FBcUM7UUFDckMsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFO1FBQ2pDLHFDQUFxQztRQUNyQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVM7S0FDeEMsQ0FBQyxDQUFDLENBQUM7SUFFSixPQUFPO1FBQ0wsT0FBTyxFQUFFO1lBQ1AscUNBQXFDO1lBQ3JDLGNBQWMsRUFBRSxjQUFjO1lBQzlCLEtBQUs7U0FDTjtRQUNELGVBQWU7S0FDaEIsQ0FBQztBQUNKLENBQUM7QUFFRCwrQ0FBK0M7QUFDL0MsTUFBTSxVQUFVLGdCQUFnQixDQUFDLElBQWtCO0lBQ2pELE9BQU8sWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELDBGQUEwRjtBQUMxRixNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQXFCO0lBQ25ELE9BQU8sWUFBWSxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFFRCwrREFBK0Q7QUFDL0QsTUFBTSxDQUFDLEtBQUssVUFBVSxlQUFlLENBQUMsT0FBb0I7SUFDeEQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNsRyxPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELHlHQUF5RztBQUN6RywyQ0FBMkM7QUFDM0MsTUFBTSxVQUFVLFdBQVcsQ0FBQyxPQUEwQixFQUFFLGNBQXNCO0lBQzVFLE9BQU8sWUFBWSxDQUNqQixjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQ2hELGNBQWMsQ0FDZixDQUFDO0FBQ0osQ0FBQztBQUVELGtDQUFrQztBQUNsQyxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQTBCLEVBQUUsV0FBeUIsRUFBRSxjQUFzQjtJQUMzRyxPQUFPLFlBQVksQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ3JILENBQUM7QUFFRCwwQkFBMEI7QUFDMUIsU0FBUyxjQUFjLENBQUMsT0FBMEI7SUFDaEQsT0FBTztRQUNMLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUN4QyxJQUFJLENBQUMsU0FBUztZQUNkLElBQUksQ0FBQyxpQkFBaUI7WUFDdEIsSUFBSSxDQUFDLGNBQWM7WUFDbkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUN2QixDQUFDO1FBQ0YsT0FBTyxDQUFDLEtBQUs7S0FDZCxDQUFDO0FBQ0osQ0FBQyJ9