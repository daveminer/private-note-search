import { FunctionData } from '@aztec/circuits.js';
import { computeMessageSecretHash } from '@aztec/circuits.js/hash';
import { FunctionSelector } from '@aztec/foundation/abi';
import { Fr } from '@aztec/foundation/fields';
import { computeAuthWitMessageHash } from '../utils/authwit.js';
/**
 * Holds information about how the fee for a transaction is to be paid.
 */
export class PrivateFeePaymentMethod {
    constructor(
    /**
     * The asset used to pay the fee.
     */
    asset, 
    /**
     * Address which will hold the fee payment.
     */
    paymentContract, 
    /**
     * An auth witness provider to authorize fee payments
     */
    wallet, 
    /**
     * A secret to shield the rebate amount from the FPC.
     * Use this to claim the shielded amount to private balance
     */
    rebateSecret = Fr.random()) {
        this.asset = asset;
        this.paymentContract = paymentContract;
        this.wallet = wallet;
        this.rebateSecret = rebateSecret;
    }
    /**
     * The asset used to pay the fee.
     * @returns The asset used to pay the fee.
     */
    getAsset() {
        return this.asset;
    }
    /**
     * The address which will facilitate the fee payment.
     * @returns The contract address responsible for holding the fee payment.
     */
    getPaymentContract() {
        return this.paymentContract;
    }
    /**
     * Creates a function call to pay the fee in the given asset.
     * @param maxFee - The maximum fee to be paid in the given asset.
     * @returns The function call to pay the fee.
     */
    async getFunctionCalls(maxFee) {
        const nonce = Fr.random();
        const messageHash = computeAuthWitMessageHash(this.paymentContract, {
            args: [this.wallet.getCompleteAddress().address, this.paymentContract, maxFee, nonce],
            functionData: new FunctionData(FunctionSelector.fromSignature('unshield((Field),(Field),Field,Field)'), false, true, false),
            to: this.asset,
        });
        await this.wallet.createAuthWitness(messageHash);
        const secretHashForRebate = computeMessageSecretHash(this.rebateSecret);
        return [
            {
                to: this.getPaymentContract(),
                functionData: new FunctionData(FunctionSelector.fromSignature('fee_entrypoint_private(Field,(Field),Field,Field)'), false, true, false),
                args: [maxFee, this.asset, secretHashForRebate, nonce],
            },
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9mZWVfcGF5bWVudF9tZXRob2QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmVlL3ByaXZhdGVfZmVlX3BheW1lbnRfbWV0aG9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHOUMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHaEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBQ2xDO0lBQ0U7O09BRUc7SUFDSyxLQUFtQjtJQUMzQjs7T0FFRztJQUNLLGVBQTZCO0lBRXJDOztPQUVHO0lBQ0ssTUFBYztJQUV0Qjs7O09BR0c7SUFDSyxlQUFlLEVBQUUsQ0FBQyxNQUFNLEVBQUU7UUFmMUIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUluQixvQkFBZSxHQUFmLGVBQWUsQ0FBYztRQUs3QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTWQsaUJBQVksR0FBWixZQUFZLENBQWM7SUFDakMsQ0FBQztJQUVKOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBVTtRQUMvQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUIsTUFBTSxXQUFXLEdBQUcseUJBQXlCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNsRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQztZQUNyRixZQUFZLEVBQUUsSUFBSSxZQUFZLENBQzVCLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyx1Q0FBdUMsQ0FBQyxFQUN2RSxLQUFLLEVBQ0wsSUFBSSxFQUNKLEtBQUssQ0FDTjtZQUNELEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSztTQUNmLENBQUMsQ0FBQztRQUNILE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVqRCxNQUFNLG1CQUFtQixHQUFHLHdCQUF3QixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV4RSxPQUFPO1lBQ0w7Z0JBQ0UsRUFBRSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtnQkFDN0IsWUFBWSxFQUFFLElBQUksWUFBWSxDQUM1QixnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsbURBQW1ELENBQUMsRUFDbkYsS0FBSyxFQUNMLElBQUksRUFDSixLQUFLLENBQ047Z0JBQ0QsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsS0FBSyxDQUFDO2FBQ3ZEO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9