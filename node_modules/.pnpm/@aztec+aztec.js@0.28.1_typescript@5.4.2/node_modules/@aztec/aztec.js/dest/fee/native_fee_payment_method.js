var _a, _NativeFeePaymentMethod_GAS_TOKEN;
import { __classPrivateFieldGet } from "tslib";
import { FunctionData } from '@aztec/circuits.js';
import { FunctionSelector } from '@aztec/foundation/abi';
import { GasTokenAddress } from '@aztec/protocol-contracts/gas-token';
/**
 * Pay fee directly in the native gas token.
 */
export class NativeFeePaymentMethod {
    constructor() { }
    /**
     * Gets the native gas asset used to pay the fee.
     * @returns The asset used to pay the fee.
     */
    getAsset() {
        return __classPrivateFieldGet(_a, _a, "f", _NativeFeePaymentMethod_GAS_TOKEN);
    }
    /**
     * The contract responsible for fee payment. This will be the same as the asset.
     * @returns The contract address responsible for holding the fee payment.
     */
    getPaymentContract() {
        return __classPrivateFieldGet(_a, _a, "f", _NativeFeePaymentMethod_GAS_TOKEN);
    }
    /**
     * Fee payments in the native gas token are always public.
     * @returns false
     */
    isPrivateFeePayment() {
        return false;
    }
    /**
     * Creates a function call to pay the fee in gas token..
     * @param feeLimit - The maximum fee to be paid in gas token.
     * @returns A function call
     */
    getFunctionCalls(feeLimit) {
        return Promise.resolve([
            {
                to: __classPrivateFieldGet(_a, _a, "f", _NativeFeePaymentMethod_GAS_TOKEN),
                functionData: new FunctionData(FunctionSelector.fromSignature('check_balance(Field)'), false, false, false),
                args: [feeLimit],
            },
            {
                to: __classPrivateFieldGet(_a, _a, "f", _NativeFeePaymentMethod_GAS_TOKEN),
                functionData: new FunctionData(FunctionSelector.fromSignature('pay_fee(Field)'), false, false, false),
                args: [feeLimit],
            },
        ]);
    }
}
_a = NativeFeePaymentMethod;
_NativeFeePaymentMethod_GAS_TOKEN = { value: GasTokenAddress };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlX2ZlZV9wYXltZW50X21ldGhvZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWUvbmF0aXZlX2ZlZV9wYXltZW50X21ldGhvZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFJdEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sc0JBQXNCO0lBR2pDLGdCQUFlLENBQUM7SUFFaEI7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8sdUJBQUEsRUFBc0IsNkNBQVcsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsa0JBQWtCO1FBQ2hCLE9BQU8sdUJBQUEsRUFBc0IsNkNBQVcsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsbUJBQW1CO1FBQ2pCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxnQkFBZ0IsQ0FBQyxRQUFZO1FBQzNCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUNyQjtnQkFDRSxFQUFFLEVBQUUsdUJBQUEsRUFBc0IsNkNBQVc7Z0JBQ3JDLFlBQVksRUFBRSxJQUFJLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztnQkFDM0csSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDO2FBQ2pCO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLHVCQUFBLEVBQXNCLDZDQUFXO2dCQUNyQyxZQUFZLEVBQUUsSUFBSSxZQUFZLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7Z0JBQ3JHLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQzthQUNqQjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7OztBQTlDTSw2Q0FBYSxlQUFlLEVBQWxCLENBQW1CIn0=