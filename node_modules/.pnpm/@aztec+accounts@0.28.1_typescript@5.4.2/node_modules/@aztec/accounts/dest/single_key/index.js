/**
 * The `@aztec/accounts/single_key` export provides a testing account contract implementation that uses a single Grumpkin key for both authentication and encryption.
 * It is not recommended to use this account type in production.
 *
 * @packageDocumentation
 */
import { AccountManager } from '@aztec/aztec.js/account';
import { getWallet } from '@aztec/aztec.js/wallet';
import { SingleKeyAccountContract } from './account_contract.js';
export { SingleKeyAccountContract };
export { SchnorrSingleKeyAccountContractArtifact as SingleKeyAccountContractArtifact } from './artifact.js';
/**
 * Creates an Account that uses the same Grumpkin key for encryption and authentication.
 * @param pxe - An PXE server instance.
 * @param encryptionAndSigningPrivateKey - Grumpkin key used for note encryption and signing transactions.
 * @param salt - Deployment salt .
 */
export function getSingleKeyAccount(pxe, encryptionAndSigningPrivateKey, salt) {
    return new AccountManager(pxe, encryptionAndSigningPrivateKey, new SingleKeyAccountContract(encryptionAndSigningPrivateKey), salt);
}
/**
 * Gets a wallet for an already registered account using Schnorr signatures with a single key for encryption and authentication.
 * @param pxe - An PXE server instance.
 * @param address - Address for the account.
 * @param signingPrivateKey - Grumpkin key used for note encryption and signing transactions.
 * @returns A wallet for this account that can be used to interact with a contract instance.
 */
export function getSingleKeyWallet(pxe, address, signingKey) {
    return getWallet(pxe, address, new SingleKeyAccountContract(signingKey));
}
export { getSingleKeyAccount as getUnsafeSchnorrAccount, getSingleKeyWallet as getUnsafeSchnorrWallet };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2luZ2xlX2tleS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBRSxjQUFjLEVBQVEsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQWlCLFNBQVMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBSWxFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRWpFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxDQUFDO0FBRXBDLE9BQU8sRUFBRSx1Q0FBdUMsSUFBSSxnQ0FBZ0MsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1Rzs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsR0FBUSxFQUNSLDhCQUFrRCxFQUNsRCxJQUFXO0lBRVgsT0FBTyxJQUFJLGNBQWMsQ0FDdkIsR0FBRyxFQUNILDhCQUE4QixFQUM5QixJQUFJLHdCQUF3QixDQUFDLDhCQUE4QixDQUFDLEVBQzVELElBQUksQ0FDTCxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxrQkFBa0IsQ0FDaEMsR0FBUSxFQUNSLE9BQXFCLEVBQ3JCLFVBQThCO0lBRTlCLE9BQU8sU0FBUyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSx3QkFBd0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQzNFLENBQUM7QUFFRCxPQUFPLEVBQUUsbUJBQW1CLElBQUksdUJBQXVCLEVBQUUsa0JBQWtCLElBQUksc0JBQXNCLEVBQUUsQ0FBQyJ9