{ "noir_version": "0.25.0+589a6cb62caf38445c768429150eee469ae35d77", "name": "DocsExample", "functions": [{ "name": "insert_notes", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "amounts", "type": { "kind": "array", "length": 10, "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, "visibility": "private" }], "param_witnesses": { "amounts": [{ "start": 33, "end": 43 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370] }, "bytecode": "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", "debug_symbols": "7Z3RTus4EIbfJdcIecb22OZVVnvBnmUlJFSODt2VVoh3P3ZPkwbwSeVphO1prlCFvzKe/na+BMl9HZ6ev93vH593L8Pd64BquPvjdXj5fr9LL1/29z/2w526GR52f8efbzfDP49PD8MdEr3dfBoHNhxHgodprHeZoYjBH8eitnYaDCFkRvtgxxqCAvNu9J83A0KXVeNXVW00jlWbgBdWrS+p2gKNDbSo/KluzE1RqbFuUHiaJFidGR1nNr2zO401/lC16bJq22XVlKuaCO2RIaKz6QYyYzlanUZTrnZvxrHez9INPrcWVBjXDQKemgJpzp/f2elpKdgzY2OdMJVs9GyCmrHK3NbDi3voxfQwEE2LE+hcw8+0JWxtybRFqy9uC6hpe4bDlXjWmFQPVKwn9v5TPfjV9eD01oDkzwTHWDPuHMZSmF/sUvG65+LNlxc/We67Xfg3S1ZPxaMmd2bPNn68Glh9uhoEdZioFTRRB2MdztB8opltzLhpI1Czjck4xjZGgnpIk2Y6Mss9hDD5KyqL75y0vIlOUhDdmC6v3McV5xuf6FQ72tmNa36i2oXppmR2t2MPE5UjPdV82qhNHHNtgbbE0WBb4mh6di9jei5ekk8tiaORJD2VxNFIcp5a4mha96m1xNGEKxFHK0d6qomjhU0cc23BtsTR6rbE0ZqO3cvanouX5FNL4mhFPeipI45WkvPUEkfbuk+tJY6krkQcSY70VBNHwk0cc23RbYkjmbbEkXp2L6Kei5fkU0viSKIe9NQRR5LkPLXE0bXuU2uJo4MrEUcnR3qqiaPTmzjm2mLaEkdn2xJH17N7Oddz8ZJ8akkcnagHPXXE0Utynlri6Fv3qbXE0eOViKOXIz3VxNGbTRxzbbFtiaOntsTR9+xe3vdcvCSfWhLHIOpBTx1xDJKcp5Y4htZ9ai1xDPpKxDGYTRwvFcdgN3HMtYXaEsfg2hLH0LN7hdBx8aAkCdWSOcZVvKnjpeoISpL21HJHUK071VryGAN3JfYISo76VNPHqAmbP2b74toSSFC+LYME1bWFgeq6eklmteiQIOqpTyWHBEn2U80hwVyLQ0LrBzis5pCwnRl6uUOCnENDV3VI8I05JITGHBK7tjCErquXZFaLDomiHv5UckiUZD/VHBJFHTW65JDY+lkOqznkdmb6Cg65HZr+m76Exhyy6nnlOYfUXVtY18ebg5ZkVosOKeow9FoOKeqg9WoOKeqo9UWHbP489NWOCVe3+X9IoZu+bgudV+/+xJEDJpe98NhpZyA1y2lc+Ykyt/knSNqMXdPBf/gQI5R/ynMOAg6EHEgXQ/42fyNn9dg+6/DjZxwh4kD5RaDVtG5m35ql6NfR4Lw4JQ6YXHmcjGXEKULlcUoQcCDkQMVxMoERpwQRByqPk0VenBIHTK48TpYYcYpQeZwSBBwIOVBxnEgx4pQg4kDlcSLNi1PigMmVx4kcI04RKo9TgoADIQcqjpMDRpwSRByoPE7O8OKUOGBy5XFynhGnCJXHKUHAgZADFcfJIyNOCSIOVB4nb3lxShwwufI4+cCIU4TK45Qg4EDIgYrjFDQjTgkiDlQep0C8OCUOmFx5nEApRp4SVR6oAwUsClmULqcMI1QHilhUeaxAOV6uDiBwQUayADjJihQjWYkCFoUsqjxZYDnJShSxKEaywDOTlUDggoxkIXKSFSlGshIFLApZVHmykDjJShSxKEayMDCTlUDggoxkac1JVqQYyUoUsChkUeXJ0o6TrEQRiypNVnz13/2Px/u/nh5eIpF++e/u2/7xeXd8uf//+6/fvP0E" }, { "name": "initialize_shared_immutable", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "points": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "view_imm_card", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::card_note::CardNote", "fields": [{ "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, { "name": "randomness", "type": { "kind": "field" } }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "header", "type": { "kind": "struct", "path": "aztec::note::note_header::NoteHeader", "fields": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "nonce", "type": { "kind": "field" } }, { "name": "storage_slot", "type": { "kind": "field" } }, { "name": "is_transient", "type": { "kind": "boolean" } }] } }] }, "visibility": "public" }, "return_witnesses": [0, 1, 2, 3, 4, 5, 6] }, "bytecode": "", "debug_symbols": "" }, { "name": "is_priv_imm_initialized", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "boolean" }, "visibility": "public" }, "return_witnesses": [0] }, "bytecode": "H4sIAAAAAAAA/+3dB3cURxYF4B6BJERrkEQGZSQkUByNRjkwBIESEhIYcMbGYLBxtne9OQfnnHPOOWf/Mp/dbuodrtvVksvb5b3arT7HhzdPHb663TWFxGA8z/NS3tltmXduS3nf306UnP11BfTy6r9gy/wnWy7TVRScZLmn3Yr//V+hqn3Yr0D1yqEn7hUwnryXkDOT6fLhunFZ5aFepvF8l5wnkwYPXqvQ0tiXG4xdDGk4Do1FloyFBsYiMBZqjMWWjEUGxmKNp85L9hkq0lyrxNLYV3g/fuwlGk8q4bGv0FzLtzT2ld6PH7sY0nAcGkstGX0DYykY5Th8htKWjKUGxjT8KsfhHF9lyZg2MK4CoxyHOZZZMq4yMJaBUY7DHMuTN2Z9uO6PMZaDp8KSp9zAUwGe1ZY8FQae1eBZk7wnfKZWG3jEkIbj8Jlaa8m4xsC4FoxyHM7NdZaMaw2M68Aox2GO6y0Z1xkY14NRjsMcN1gyrjcwbgCjHIc5brRk3GBg3AhGOQ5z3GTJuNHAuAmMchzmuNmScZOBcTMY5TjMsdKScbOBsRKMchzmWGXJWGlgrAJjpcZYbclYZWCsBmOVxlhjyVhtYKwBY7XGWGvJWGNgrAVjjcZYZ8lYa2CsA2OtxlhvyVhnYKwHY53GuMWSsd7AuAWM9RpjgyXjFgNjAxjlOHwPb7RkbDAwNoKxQWPcasnYaGDcCsZGjbHJknGrgbEJjHIcPo/NyRvD76+aDIzN4NmWvCfMrNnAs82uJ/z5WbPmWi3JXyu8F9u9Hz/2FvC0Ju8J70WLgUcMaTgOM2tL3hhm1mpgbANPe/KeMLM2A087ZNamyawjeWOYWbuBsQM8ncl7wsw6DDydkFmHJrNM8sYws04DYwY8Xcl7wswyBp4uyCyjySybvDHMrMvAmAVPd/KeMLOsgacbMstqMsslbwwz6zYw5sDTk7wnzCxn4OmBzHKazHqTN4aZ9RgYe8HTl7wnzKzXwNMHmfVqMutP3hhm1mdg7AfPQPKeMLN+A88AZNavyWzQknHAwDgIRjkOfz8/ZMk4aGAcAqMch98XDVsyDhkYh8Eox2GOI8kbw/kxbGAcAc+oJc+IgWcUPDsseUYNPDvAk0/eEz5TOww8UqfhOHymdloy5g2MO8EofZybuywZdxoYd4FRjsMcd1sy7jIw7gajHIc57rFk3G1g3ANGOQ5zHLNk3GNgHAOjHIc57rVkHDMw7gWjHIc57rNk3Gtg3AdGOQ5zHLdk3GdgHAejHIc5TlgyjhsYJ8A4rjFOWjJOGBgnwTihMU5ZMk4aGKfAOKkxTlsyThkYp8E4pTHut2ScNjDuB+O0xjhjybjfwDgDRjkOP3M5a8k4Y2CcBaMchzkesGScNTAeAOOsxjhnyXjAwDgHxgMa47wl45yBcR6McxrjQUvGeQPjQTDOa4znJW8Mv786aGA8DzyHkvd0WRpnJhjT4ciYDkbGlIZ9MPfDFsaZguvKueX1YbgPS80ceORzxmL1Yb8yEqP0DoHnSPKerB/xBNtC8+uI5XwsjTOcX0c9fe5HIHfZB5/VoxbGmYLryrnl9VG4D0vNHHjkc/Ni9WG/chKj9A6D5/zkPVk/4gm2hebX+ZbzsTTOcH5d4OlzPx9yl33wWb3AwjhTcF05t7y+AO7DUjMHHvl7IGL1Yb8KEqP0joLnwuQ9OT/iCbaF5teFlvOxNM5wfl3k6XO/EHKXffBZvcjCOFNwXTm3vL4I7oMzO7POHHjk85Zi9WG/JhKj9C4Az8WJe3IZP+IJtoXexy62nI+dcZ59H7vE0+d+MeQu++CzeomFcabgunJueX0J3AcTc/ESNLucXc5xZpezyznO7HJ2OceZXc4u5zizy9nlHGd2Obuc48wuZ5dznNnl7HKOM7ucXc5xZpezyznO7HJ2OceZXc4u5zizy9nlHGd2Obuc48wuZ5dznNnl7HKOM7ucXc5xZpezyznO7HJ2OceZXc4u5zizy/mnmQOP/L9txerDfttJjNK7CDyXJu/J+RFPsKUir/NQX2o5H0vjDD/3fszT534p5C774Pw6ZmGcKbiunFteH4P7cMzAXLwEzS7nn2YOPK2qFqsP+7WSGKV3CXguS96T8yOeYFvofewyy/lYGmf4Pna5p8/9Mshd9sH5dbmFcabgunJueX053AdndmadOfC0q1qsPuzXTmKU3jHwHE/ck834EU+wLfQ+dtxyPnbGefZ97ApPn/txyF32wWf1CgvjTMF15dzy+gq4Dybm4iVodjm7nOPMLmeXc5zZ5exyjjO7nF3OcWaXs8s5zuxydjnHmV3OLuc4s8vZ5Rxndjm7nOPMLuf/n5wDj/w7qmL1Yb9OEqP0LgfPicQ93Rk/4gm2hf7c4YTlfOyM8+yfO5z09LmfgNxlH5xfJy2MMwXXlXPL65NwH/7XzcVL0OyejZ/H7J4NZ44zu2fDmePM7tlw5jizezacOc7sng1njjO7Z8OZ48zu2XDmOLN7Npw5zuyeDWeOM7tnw5njzO7ZcOY4s3s2nDnO7J4NZ44zu2fDmePMDM9G4OlStVh92K+LxCi9K8BzZfKenB/xBNtCn9u50nI+lsYZfm7nlKfP/UrIXfbB+XXKwjhTcF05t7w+BffBmZ1ZZw483aoWqw/7dZMYpXcSPKeT9+T8iCfYFnofO205H0vjDN/HrvL0uZ+G3GUffFavsjDOFFxXzi2vr4L74MzOrDMHnh5Vi9WH/XpIjNI7BZ6rk/fk/Ign2BZ6H7vacj6Wxhm+j53x9LlfDbnLPvisnrEwzhRcV84tr8/AfXBmZ9aZA0+fqsXqw359JEbpXQWea5L3ZP2IJ9gWeh+7xnI+lsYZvo9d6+lzvwZyl33wWb3WwjhTcF05t7y+Fu7DUjMHnmFVi9WH/YZJjNI7A57rkvdk/Ygn2BaaX9dZzsfSOMP5db2nz/06yF32wWf1egvjTMF15dzy+nq4D0vNHHhGVC1WH/YbITFK71rw3JC8J+tHPMG20Py6wXI+lsYZzq8bPX3uN0Dusg8+qzdaGGcKrivnltc3wn1YaubAM6pqsfqw3yiJUXrXg0d63yXn6U2DpfxnGLsXGbunGbtsM2SelWSecTLPLjLPMJmnl8yTIfO0kHkayDzVZJ4NZJ4KMs8smccn80yQeQrIPLvJPCNknj4yTxeZp5XM00jmqSHzbCTzrCbzHCDzlJJ5Jsk8y8k8e8g8P8fPmkw8/WSeLJmnjcyzlcxTS+bZROZZQ+aZI/OkyTxTZJ5CMs8YmWcHmWeAzNNN5mkn8zSReerIPJvJPGvJPPNknlVknmkyTxGZZy+ZJ0/mGSTz5Mg8HWSeZjJPPZmnksyzjsxTRubZT+ZZQebZR+bZSeYZIvP0kHk6yTzbyTxbyDxVZJ71ZJ4Ugcf3fvh5eR++XgK9m1RdAL2bVb0cereouhB6v1B1EfR+CeOX3q2qXgm9X0Etv/5a1aXQ+42q09D7rapXQe93qi6D3u9VXQ69P6i6Anp/VPVq6P1J1Wug92dVr4XeX1S9Dnp/VfV66P1N1Rug93dVb4TeP1S9CXr/VPVm6N2m6kro3a7qKujdoepq6N2p6hro3aXqWujdreo66N2j6nro3avqLdC7T9UN0Ltf1Y3Qe0DVW6H3oKqboPeQqpuh97Cqt0PvEVW3QO9RVbdC7zFVt0HvcVW3Q+8JVXdA70lVd0LvKVVnoPe0qrug94yqs9B7VtXd0HtO1TnoPa/qHui9oOpe6L2o6j7ovaTqfui9rOoB6L2i6kHovarqIei9puph6L2u6hHovaHqUei9qeod0HtL1Xnova3qndB7R9W7oPeuqndD7z1V74He+6oeg94Hqt4LvQ9VvQ96H6l6HHofq3oCep+oehJ6n6p6CnqfqXoaep+rej/0vlD1DPS+VPUs9L5S9QHofa3qOeh9o+p56H2r6hugJ+sBrinyd3lugp6sETdDT9aIW6Ana8QvoCf/T7JfQk/WjVuhJ+sVrhmylvwaer6qfwM9WUt+Cz1ZS34HPVlLfg89WUv+AD1ZS/4IPVlL/gQ9WUv+DD1ZS/4CPVlL/go9WUv+Bj1ZS/4OPVlL/gE9WUv+CT1ZS26Dnqwlt0NP1pI7oCdryZ3Qk7XkLujJWnI39GQtuQd6daq+F3qyltwHPVlL7oeerCUPQE/WkgehJ2vJQ9CTteRh6Mla8gj0tqn6UejJ+vIY9GR9eRx6rap+AnqyvjwJPVlfnoKerC9PQ0/Wl2egJ+vLs9CT9eU56Mn68jz0ZH15AXqyvrwIPVlfXoKerC8vQ0/Wl1egJ+vLq9CT9eU16Mn68jr0ZH15A3qyvrwJPVlf3oKerC9vQ0/Wl3egl1f1u9CT9eU96Mn68j70ZH35AHqyvnwIPVlfPoKerC8fQ0/Wl0+gJ+vLp9CT9eUz6Mn68jn0plT9BfRkffkSerK+fAU9WV++hp6sL99AT9aXb9WvwXt4WfG5r8u++P3Et5rzSI3fL8m1816y3y/htfLwWq5XCo5vSDzryTxVZJ4tZJ7tZJ5OMk8PmWeIzLOTzLOPzLOCzLOfzFNG5llH5qkk89STeZrJPB1knhyZZ5DMkyfz7CXzFJF5psk8q8g882SetWSezWSeOjJPE5mnnczTTeYZIPPsIPOMkXkKyTxTZJ40mWeOzLOGzLOJzFNL5tlK5mkj82TJPP1knlEyzx4yz3IyzySZp5TMc4DMs5rMs5HMU0PmaSTztJJ5usg8fWSeETLPbjJPAZlngszjk3lmyTwVZJ4NZJ5qMk8DmaeFzJMh8/SSeYbJPLvIPONknpVknhkyT3nEg3+H4Vvoye+T5Gsl3vd/Xox/7+9gpBeM8ZClMcq15Nzy+hCMUf6M+CB4DlryzEc80WunvXO5zJFmlobevCbHVRr3KgI3Po8/x72ei3ii105DLvOkmeG9ntPkWKZxlxG4Ged1WSRHtswWm9eNGncjgZtxXjdGcmTLbLF53aRxNxG4Ged1UyRHtswWm9fbNO5tBG7Geb0tkiNbZovN6xaNu4XAzTivWyI5smW22Lxu07jbCNyM87otkiNbZovN6w6Nu4PAzTivOyI5smW22LzOaNwZAjfjvM5EcmTLbLF5ndW4swRuxnmdjeTIltli8zqncecI3IzzOhfJkS2zxeb1gMY9QOBmnNcDkRzZMltsXg9q3IMEbsZ5PRjJkS2zxeb1kMY9ROBmnNdDkRzZMtPNa1uZ+d73Mwu2VOR1Hmq8h3MWPJbGmUlBvnJu3bMh++C/G/rfeg4wi7rkrt0bnPc8C2MK/tywBHI9L5IvPt+yFcBYD1vK2YvkLNthjWcHmaebzNNO5mkm89STeSrJPOvIPNNknhIyz14yzzIyT57Mc4jMs4XMU0XmWU/mKSfz7CfzrCTz7CPzLCfz7CTz9JB5Osk828k8DWSeajLPBjJPBZlnhszjk3nGyTyFZJ5dZJ5hMk8vmaeGzLORzLOazDNL5ikl80yQeYrIPLvJPCNknj4yTxeZp5XMs5XMU0vm2UTmWUPmmSTzFJN59pB5Rsk8/WSeOjLPZjLPWjLPFJlnBZlnjMyTIvD4nv7fO5evH4JeQeTYYH25tOTc14+ofoHmPEe8H+6H4z9qafx4rTy8luvhv194hMQzRuZZQeaZIvOsJfNsJvPUkXn6yTyjZJ49ZJ5iMs8kmWcNmWcTmaeWzLOVzNNK5uki8/SReUbIPLvJPEVkngkyTymZZ5bMs5rMs5HMU0Pm6SXzDJN5dpF5Csk842Qen8wzQ+apIPNsIPNUk3kayDzbyTydZJ4eMs9OMs9yMs8+Ms9KMs9+Mk85mWc9maeKzLOFzHOIzJMn8ywj8+wl85SQeabJPOvIPJVknnoyTzOZp53M003m2UHmKYh4gp+/yBqLn5OS/eRrwfto8Htd+fzH8VMnjl89c8uZM6dPnj5x49itp2+6+aaUd25bBhZPUxdoekE28vOy7xLMJjiHfB9TCLZCGK/0lmsyWAYZoDfc8gkhU3Ch6JbSNf8FR7yu6G6eAQA=", "debug_symbols": "" }, { "name": "simple_macro_example", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "a", "type": { "kind": "field" }, "visibility": "private" }, { "name": "b", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "a": [{ "start": 33, "end": 34 }], "b": [{ "start": 34, "end": 35 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251] }, "bytecode": "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", "debug_symbols": "1ZRBCoMwEEXvMmsXmUmiSa5SukitBUGiaFoo4t0bW6OUZicUXIXPPML7s5gRmra0vm7dAGYEZGBOIwyddXMcvO09GJZB5a7hnTK41U0FhvJ8yn44lHohUeHKqiKBEmm1sMSlXGHUOkErLaODZii+6HMGiIe0pn9ZC07RWmjaac33WEvM4wIlMbV5U6oiY9EbGW0lUfIEHZqtPxcbK9TbWhzSWh7POqSH7Wt7aar5oszDuyvjgQnRP7vPZHoB" }, { "name": "spend_private_authwit", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "inner_hash", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inner_hash": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250] }, "bytecode": "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", "debug_symbols": "1ZRBCoMwEEXvMmsXmUmiSa5SukitBUGiaFoo4t0bW6OUZicUXIXPPML7s5gRmra0vm7dAGYEZGBOIwyddXMcvO09GJZB5a7hnTK41U0FhvJ8yn44lHohUeHKqiKBEmm1sMSlXGHUOkErLaODZii+6HMGiIe0pn9ZC07RWmjaac33WEvM4wIlMbV5U6oiY9EbGW0lUfIEHZqtPxcbK9TbWhzSWh7POqSH7Wt7aar5oszDuyvjgQnRP7vPZHoB" }, { "name": "spend_public_authwit", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "inner_hash", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inner_hash": [{ "start": 37, "end": 38 }], "inputs": [{ "start": 0, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "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4FkCPEuz54k9taQGHmNohOfNywFjXw4YqSN1rCdG6lgcHclIRjKS8WAw5mEOJ2Mu/FgeLqPjWZY9T6zZ0hp4loFm9rxyWMbycBkdz/LseWLNltXAsxw0W5agWQDG8nAZHc+K7HlizZbXwLMCNFueoFkAxvJwGR3Pyux5Ys1W1MCzEjRbkaBZAMbycBkdz6rseWLNVtbAswo0W5mgWQDG8nAZHc/q7HlizVbVwLMaNFuVoFkAxvJwGR3Pmux5Ys1W18CzBjRbnaBZAMbycBkdz9rseWLN1tTAsxY0W5OgWQDG8nAZHc+67HlizdbWwLMONFuboFm9Ms7LAWNfDhgD61geLqPjWR+IZ10NPOuB58xAPOtr4DkTeM7Knif21Jk18BhDIzxvXg4Y+3LASB2pYz0xUsfi6EhGMpKxNsb+HDDyWJOxXhkDfL+quobmzBFee4JXe0JBaqetoRnptelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+rwItelz+ryeap+dfe1yCWrY1uDt90P7bOA5K4AWgcbZ4cZ0jjemM70xNUKfeTDOcwKMswHq2mvb/jlwHPLG7HgWattYS9BvYZ0wWu6ssDzx+bUwGrxVO7/OAZ4A50FnoHHG59e53pgWJuhufdCr5wYYZ9K5Y/vnwnHIG7PjWaRtYy1Bv0V1wmi5s8PyxOfXomjwVu38Ohd4Qsw/gcYZn1/neWNalKC79UGvnhdgnEnnju2fB8chb8yOZ7G2jbUE/RbXCaPlzgnL012CMdtW7fw6D3hCzD+BxhmfXxu8MS1O0N36oFc3BBhn0rlj+xvgOJCZzEnMjmeJto21BP2W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", "debug_symbols": "" }, { "name": "compute_note_hash_and_nullifier", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "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", "debug_symbols": "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" }, { "name": "get_legendary_card", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::card_note::CardNote", "fields": [{ "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, { "name": "randomness", "type": { "kind": "field" } }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "header", "type": { "kind": "struct", "path": "aztec::note::note_header::NoteHeader", "fields": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "nonce", "type": { "kind": "field" } }, { "name": "storage_slot", "type": { "kind": "field" } }, { "name": "is_transient", "type": { "kind": "boolean" } }] } }] }, "visibility": "public" }, "return_witnesses": [0, 1, 2, 3, 4, 5, 6] }, "bytecode": "", "debug_symbols": "" }, { "name": "increase_legendary_points", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428] }, "bytecode": "", "debug_symbols": "" }, { "name": "update_leader", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "account": [{ "start": 37, "end": 38 }], "inputs": [{ "start": 0, "end": 37 }], "points": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240] }, "bytecode": "", "debug_symbols": "" }, { "name": "simple_macro_example_expanded", "is_unconstrained": false, "custom_attributes": [], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "a", "type": { "kind": "field" }, "visibility": "private" }, { "name": "b", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "a": [{ "start": 33, "end": 34 }], "b": [{ "start": 34, "end": 35 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251] }, "bytecode": "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", "debug_symbols": "1ZRBCoMwEEXvMmsXmTGTJl6ldJFaC4KoaFoo4t2r1mhLU7ooFNzlM4/w/iymg6JKrcursoWkAxSQ7Dtoa1uOsXW2cZAgMssIsvI0vdWuj+CcFxkkpFQfvfNsPK1xYfUugBIZPbMUMy8wGhOgtWEx00agfKEPESBu2p7+bS9j8vbS0I/28Qd7Uk/2+os9o/ILZRIrrSlUVQjvj4LWsshxgB4aLj+vS0SpJ3u5aXverv2QrrbJ7bHIxgs0Di9l6g/SEN2tfkz6Ow==" }, { "name": "initialize_public_immutable", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "points": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "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", "debug_symbols": "" }, { "name": "get_public_immutable", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::leader::Leader", "fields": [{ "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }] }, "visibility": "public" }, "return_witnesses": [0, 1] }, "bytecode": "H4sIAAAAAAAA/81VTU+EMBCdlo/lY41evSgXPXeJF+Ol/gX/AQY0XpaE3U30z2+0bic8SmNMAONLSIfpdOb1tQyCiASdEFAPSWOYuAdrJ+DX9jFQU3CnytgkCcmL1dcTWzuHOAk+EQ73cuGJS8A+zsVdqfszGmrFtYK5dVJqI2gIDXaAejhxOcyjbtJZa7RWMB951sSeemxH4OPjjD1rUacI9qKtrabhWyespeGd662BR/wHfPB6a3iP/knt1fy1VUJ9z5gxb2n2lMLZaeDP9UKIubbjOZ3OnP3MC++/wRq0SSHvAnvZmJzZQhrljkbMPwONOObW0Yj9rkYJaMTacKyEONRNUn/neP5o/Slw4XjsH9hTcic39rAQfNibOD5xamtrq2koTd4YdJorL2rA+Kn/L93DMtBzt2+76rV5aqpaADWmKx26gobUpTO6duDxEQ1/IXjc/NniVZGOLHgtOD6lsaSz9t2A/MCNCRoLZnBlx0s7PnZd9VG8bevmvWgP+6J9KZ7bw7be4aKb3y6iTxBD8lMDCgAA", "debug_symbols": "zdjfaoMwFAbwd8m1jJw/SYyvMnaRdQ4EsaW6wRDffUqtDCqDyWq/O0PO8fwuwkdIb+rjIXXVsWlN0Rv75E3x3Jv2lJpp3Xbp3JnCeS+ZKZu36TPqkJn3qi5Nwd4P2U01Sx7nala2S7V3K8USeK5VkqWUbBhespETsDg5FidicciCeQjMw2AeAfMomMeBecDCmcDSmcDimcDymcHymcHyme+bz5cZssMM3WGG22HGf+Sdil1mOP79fCjl1/PB4cePdfYEME8O5olYHrFgHgLzMJhH9vbI4tE1j4J5HJjHg3kCmCcH80Qsj9rHeZyseAjMw2Ce1fPMPsxNYvX2Uq1xQ5OzW5poSxNvaZI/No2rz3Su0mtdTu+s0+ZHc7g+u47L7ut02Rm+AQ==" }, { "name": "get_shared_immutable", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::leader::Leader", "fields": [{ "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }] }, "visibility": "public" }, "return_witnesses": [0, 1] }, "bytecode": "H4sIAAAAAAAA/81VTUvEMBCdpB/bjxW9etFe9Jwtggcv8S/4Dyqt4mUL3V3QP79o3Ax9TYMIbcUHJdPJZOblJZ0KIhJ0QkA9JI1h4h6snYBf28dATcGdKmOTJCQvVl9PbO0c4iT4RDjcy4UnLgH7OBd3pe7PaKgV1wrm1kmpjaAhNNgB6uHE5TCPuklnrdFawXzkWRN76rEdgY+PM/asRZ0i2Iu2tpqGb52wloZ3rrcGHvEf8MHrreE9+ie1V/PXVgn1PWPGvKXZUwpnp4E/1wsh5tqO53Q6c/YzL7z/BmvQJoW8C+xlY3JmC2mUOxox/ww04phbRyP2uxoloBFrw7ES4lA3Sf2d4/mj9afAheOxf2BPyZ3c2MNC8GFv4vjEqa2traahNHlj0GmuvKgB46f+v3QPy0DP3b7tqtfmqalqAdSYrnToChpSl87o2oHHRzT8heBx82eLV0U6suC14PiUxpLO2ncD8gM3JmgsmMGVHS/t+Nh11Ufxtq2b96I97Iv2pXhuD9t6h4tufruIPgGOAZEeAwoAAA==", "debug_symbols": "zdjNaoQwFAXgd8laSu5PEvVVShfp1IIgzjDaQhHfvZFRKYwUKq09O0Puzf0W4SAZTHM+xb4+t50pB2MfvCkfB9NdYjutuz5ee1M6KjQzVfuSPll4zMxr3VSmZO/H7K6aKbdzNTPRWu11o1gCz7VKspaSDeNTljgBi5NjcQosDlkwD4F5GMwjYB4F8zgwD1g4E1g6E1g8E1g+M1g+M1g+89/m822GHDBDD5jhDpjxG3mXTl5nqHx/P5Ty5X5w+HLw4glgnhzMU2B5xIJ5CMzDYB452iOrR7c8CuZxYB4P5glgnhzMU2B51P6fx8mGh8A8DObZvM/sw9wkVu9/qrXY0eTsniba08R7muSHTWn1Hq91fG6q6Z112nxrT8uza1r2H5fbzvgJ" }, { "name": "get_leader", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::leader::Leader", "fields": [{ "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }] }, "visibility": "public" }, "return_witnesses": [0, 1] }, "bytecode": "H4sIAAAAAAAA/81Vy07DMBBcO4/mUQRXLpALnN2IGxfzC/xBUALi0khpK8HPV9TUq0wcCyElQYwUebNe747HzkYQkaAzAuohaQwT92jtBPzaPgZqCh5UGZskIXmxOj2xtXOIk+AT4XAvV564BOzjXNyV2lzQUCuuFcyt06mWoCE02AHq4cTlMI+6SWet0VrBfORZE3vqsR2Bj48z9qxFnSLYi7a2moZvnbCWhneutwYe8R/wweut4T36J7VX89dWCfU9Y8a8pdlTCmengT/XCyHm1o6XdD5z9jMvvP8Ga9AmhbwL7GVjcmYLaZQ7GjH/DDTimHtHI/a7GiWgEWvDsRLiUDdJ/Z3j+aP1p8CF47F/YE/JndzYw0LwYW/i+MSpra2tpqE0eWPQaa68qAHjp/6/dA/LQM/dvu2qt+a5qWoB1JiudOgKGlKXzujagcdHNPyF4HHzZ4tXRTqy4LXg+JTGks7adwPyAzcmaCyYwY0dr+341HXVZ/G+rZuPoj3si/a1eGkP23qHi+5+u4i+AMNB1nEDCgAA", "debug_symbols": "zdjLaoQwFAbgd8laSs4lN1+ldGGnFgRxhtEWivjuVUalMFKotPbfGXKO51uEn5De1OdT0VXnpjV5b+yDN/ljb9pL0UzrtiuuncmTDZSZsnmZPhMPmXmt6tLk7P2Q3VUTUZiriTSu1V42iiXwXKskaynZMDxlIydgcSIWJ2FxyIJ5CMzDYB4B8yiYx4F5wMKZwNKZwOKZwPKZwfKZwfKZ/zafbzPkgBl6wAx3wIxfyTsX1xnRfn8+lJZa5fDlxzp7ApgngnkSlkcsmIfAPAzmkaM9snp0y6NgHgfm8WCeAOaJYJ6E5VH7fx4nGx4C8zCYZ/M8s18ucWL1/lKtaUeTs3uaaE8T72mSHzaNq/fiWhXPdTm9s06bb81peXYdl93H5bYzfAI=" }, { "name": "insert_note", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "amount", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }, { "name": "randomness", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }], "randomness": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262] }, "bytecode": "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", "debug_symbols": "7ZjbbuJADIbfZa4RGntsj4dXWfUi22UlJESrwq5UId69CWWcAaaNmkq0oF6hKHb4/MenydYtH+6bzeJhtXazrQNws19bt35sVt3letM8bdzMT9x89af93U3c38Vy7mYospuc2QGngyUomK3Giili0oMtBmYzhpQq1po4MyQPdGR9N3GAV0kdLkVNATM1JfwkNX2GmkGygIxee26sheh95gaPfZDAoWLdRmZPjr0t6Z6ar5JarpI61qhFCQ4+olGGshuEMk7wfaRSY1fKtqpFdoPWasGnXDcI2IsCXcznT47BSoEHbFtOMGQKRYBhRJXpzWiYRCyxQIYEH5Al/chSkQX9hWUBb60F9lOkEKbjgS/kabU/48FL8yCy8YgOJA6xgRBLKht1Bx+uGZ4uDm8b2lEXfqNkg4FgkDjQs0nzNODQT4Pk94HyDQUaIXNEkjLQShujaI3AF42J4og2JjekodiKFIXe1xCS7V7oGY/2qY+LGG8pEWPOLvXxtOL0mwdq7MjFoaseaIjJFupiU+fX6T6F6oDHaGdAjOqP/uLgByP9qgOTrS2IL7K0Lft9p5/Wt7NAWbWQ9PQd0rS+uww5wRgnHOMUPuyk0/ow4JDl44in77h1kjFO9WoP3sqmOMp52d21V/+bp0XzeznvPvh0N/+t7vP3n/Zy8/z4emf3Ag==" }, { "name": "read_note", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "amount", "type": { "kind": "field" }, "visibility": "private" }, { "name": "comparator", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 0, "end": 1 }], "comparator": [{ "start": 1, "end": 2 }] }, "return_type": { "abi_type": { "kind": "array", "length": 10, "type": { "kind": "struct", "path": "std::option::Option", "fields": [{ "name": "_is_some", "type": { "kind": "boolean" } }, { "name": "_value", "type": { "kind": "struct", "path": "types::card_note::CardNote", "fields": [{ "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, { "name": "randomness", "type": { "kind": "field" } }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "header", "type": { "kind": "struct", "path": "aztec::note::note_header::NoteHeader", "fields": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "nonce", "type": { "kind": "field" } }, { "name": "storage_slot", "type": { "kind": "field" } }, { "name": "is_transient", "type": { "kind": "boolean" } }] } }] } }] } }, "visibility": "public" }, "return_witnesses": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81] }, "bytecode": "", "debug_symbols": "" }, { "name": "match_shared_immutable", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "account": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }], "points": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028] }, "bytecode": "", "debug_symbols": "" }, { "name": "update_legendary_card", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "randomness", "type": { "kind": "field" }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "points": [{ "start": 34, "end": 35 }], "randomness": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379] }, "bytecode": "", "debug_symbols": "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" }, { "name": "initialize_private_immutable", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "randomness", "type": { "kind": "field" }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "points": [{ "start": 34, "end": 35 }], "randomness": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264] }, "bytecode": "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", "debug_symbols": "3ZjhbuIwDMffpZ8Riu3YTniV0z70dpyEhNg0uJMmxLuvZcQNEFbRTWzlE6pqh58d+x+n22r59FhvFk+rdTXbVgDV7Ne2Wj/Xq/ZxvalfNtXMTar56k/zu5tUfxfLeTVDkd3kzA44HiwhgNkGLZgixnCwRWI2Y4ixYB0iJ4bowB9ZP0wqwFFS062oPWGi9hE/Se0/Q80gKYGMLnTcWArRucQNDrsggalg3URmK2tn68OemkdJLaOk1hI1R00+4jD2sCOrppIVELPmUsU2lWn1DY4+Nu4r7zBm+PgF8IJi8NID70NIKuQjaF5iDQ66n4UDX4HTba1S3255f7ANIVNdCKWFXYxWBtg1K7S9eL6ykpUB99gCOUidTZ6yAOn6CkO8mxxGERO8rEkvJLwnLXTjtIAzbYf9MZ4lpuXx38jT5P6Mh2/Ng8jGI6GncDz71CKeJZ7qhowZXm8ObyPykdxcaFkyeCTRHnHyIckeUyd70e0DDXcUqEJSPfWSB1qQMa8mBC4TJq8DZCzeUQ7F5ioV/3EOIdrwi47xaKC9Oonk7qkQjSM4Pek4gh8eaLc0Z7fecqCk0W402VWJ30/3KRQ3FdUu4ajBHf3FwQ8G+pXnLJOFJrVd+E3b75V+Wp7/yaesUQynqqnT8pTe5wRDnHCIE13rRDC9MG9QSh8rnuxx6yRDnIrnq5Cztsnu0k52D83T//plUf9eztsvbu3Lf6vH9AGuedy8Pr+/2b0B" }, { "name": "initialize_private", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "randomness", "type": { "kind": "field" }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "points": [{ "start": 34, "end": 35 }], "randomness": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264] }, "bytecode": "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", "debug_symbols": "3ZjdbuIwEIXfxdcIeX48Y/Mqq15ku6yEhGhV2JVWiHffhMaOoW4tQkUbrlDEmeSb8fhknL1ZPz02u9XTZmsWewNgFj/2ZvvcbLrL7a552ZmFnZnl5lf7e5iZ36v10ixQ5DB7owMXeiV4SFqvBSli8L0WybkkhhAKah9cZAgW+ET9MDOAk6SmW1EzYaTmgFdS8zXUDiQW0KH1AzeWUrQ2coPFIUlwVFC3maU766Blf6R2k6SWSVJriVpIpI8RRqmwY9D4BLIw4AiUxOR16G//sbjW3n7K8OF6eGpXP8FLBZ69jy7EATRvsRYH7ffCgc/AGZYWsLZazL3W+8x1wZfawIaIjvmNAYt3Vkpt4CpaaHsw7mxiyhKkyzsM8W5qGBIzWJBawStloRuXBWzydji+xrPCdDz8hTxt7d/wuFvzILrEI77SOOw4bhF2Es59Q6YMrzeHTyPyid28s2UpwSOJVsyJfbQ9R4PtBXtM1N9RogrR9ZQlT7RgY6zJCGxmTKwjbCzcUQ0lzagq/HENIaThF63Dk4H24iKSvadG1Nhd3urZjiP45okmdnTZqbecKGlIJ5rsqORe3+5zKC4qajqEo3p78og+DkbGFecsl2xBbNal7bY/Ov28PP8Tx6pRdr7oXVPn5Sm9FgRjgnBMEF0aRDAvzxuOYvmc4tkad0EyJuid96tN2yY7S1s5PLRXf5uXVfNzvey+uHV//tk8xg9w7eXu3/PrP4f/" }, { "name": "is_legendary_initialized", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "boolean" }, "visibility": "public" }, "return_witnesses": [0] }, "bytecode": "H4sIAAAAAAAA/+3dB3cURxYF4B6BJERrkEQGZSQkUByNRjkwBIESEhIYcMbGYLBxtne9OQfnnHPOOWf/Mp/dbuodrtvVksvb5b3arT7HhzdPHb663TWFxGA8z/NS3tltmXduS3nf306UnP11BfTy6r9gy/wnWy7TVRScZLmn3Yr//V+hqn3Yr0D1yqEn7hUwnryXkDOT6fLhunFZ5aFepvF8l5wnkwYPXqvQ0tiXG4xdDGk4Do1FloyFBsYiMBZqjMWWjEUGxmKNp85L9hkq0lyrxNLYV3g/fuwlGk8q4bGv0FzLtzT2ld6PH7sY0nAcGkstGX0DYykY5Th8htKWjKUGxjT8KsfhHF9lyZg2MK4CoxyHOZZZMq4yMJaBUY7DHMuTN2Z9uO6PMZaDp8KSp9zAUwGe1ZY8FQae1eBZk7wnfKZWG3jEkIbj8Jlaa8m4xsC4FoxyHM7NdZaMaw2M68Aox2GO6y0Z1xkY14NRjsMcN1gyrjcwbgCjHIc5brRk3GBg3AhGOQ5z3GTJuNHAuAmMchzmuNmScZOBcTMY5TjMsdKScbOBsRKMchzmWGXJWGlgrAJjpcZYbclYZWCsBmOVxlhjyVhtYKwBY7XGWGvJWGNgrAVjjcZYZ8lYa2CsA2OtxlhvyVhnYKwHY53GuMWSsd7AuAWM9RpjgyXjFgNjAxjlOHwPb7RkbDAwNoKxQWPcasnYaGDcCsZGjbHJknGrgbEJjHIcPo/NyRvD76+aDIzN4NmWvCfMrNnAs82uJ/z5WbPmWi3JXyu8F9u9Hz/2FvC0Ju8J70WLgUcMaTgOM2tL3hhm1mpgbANPe/KeMLM2A087ZNamyawjeWOYWbuBsQM8ncl7wsw6DDydkFmHJrNM8sYws04DYwY8Xcl7wswyBp4uyCyjySybvDHMrMvAmAVPd/KeMLOsgacbMstqMsslbwwz6zYw5sDTk7wnzCxn4OmBzHKazHqTN4aZ9RgYe8HTl7wnzKzXwNMHmfVqMutP3hhm1mdg7AfPQPKeMLN+A88AZNavyWzQknHAwDgIRjkOfz8/ZMk4aGAcAqMch98XDVsyDhkYh8Eox2GOI8kbw/kxbGAcAc+oJc+IgWcUPDsseUYNPDvAk0/eEz5TOww8UqfhOHymdloy5g2MO8EofZybuywZdxoYd4FRjsMcd1sy7jIw7gajHIc57rFk3G1g3ANGOQ5zHLNk3GNgHAOjHIc57rVkHDMw7gWjHIc57rNk3Gtg3AdGOQ5zHLdk3GdgHAejHIc5TlgyjhsYJ8A4rjFOWjJOGBgnwTihMU5ZMk4aGKfAOKkxTlsyThkYp8E4pTHut2ScNjDuB+O0xjhjybjfwDgDRjkOP3M5a8k4Y2CcBaMchzkesGScNTAeAOOsxjhnyXjAwDgHxgMa47wl45yBcR6McxrjQUvGeQPjQTDOa4znJW8Mv786aGA8DzyHkvd0WRpnJhjT4ciYDkbGlIZ9MPfDFsaZguvKueX1YbgPS80ceORzxmL1Yb8yEqP0DoHnSPKerB/xBNtC8+uI5XwsjTOcX0c9fe5HIHfZB5/VoxbGmYLryrnl9VG4D0vNHHjkc/Ni9WG/chKj9A6D5/zkPVk/4gm2hebX+ZbzsTTOcH5d4OlzPx9yl33wWb3AwjhTcF05t7y+AO7DUjMHHvl7IGL1Yb8KEqP0joLnwuQ9OT/iCbaF5teFlvOxNM5wfl3k6XO/EHKXffBZvcjCOFNwXTm3vL4I7oMzO7POHHjk85Zi9WG/JhKj9C4Az8WJe3IZP+IJtoXexy62nI+dcZ59H7vE0+d+MeQu++CzeomFcabgunJueX0J3AcTc/ESNLucXc5xZpezyznO7HJ2OceZXc4u5zizy9nlHGd2Obuc48wuZ5dznNnl7HKOM7ucXc5xZpezyznO7HJ2OceZXc4u5zizy9nlHGd2Obuc48wuZ5dznNnl7HKOM7ucXc5xZpezyznO7HJ2OceZXc4u5zizy/mnmQOP/L9txerDfttJjNK7CDyXJu/J+RFPsKUir/NQX2o5H0vjDD/3fszT534p5C774Pw6ZmGcKbiunFteH4P7cMzAXLwEzS7nn2YOPK2qFqsP+7WSGKV3CXguS96T8yOeYFvofewyy/lYGmf4Pna5p8/9Mshd9sH5dbmFcabgunJueX053AdndmadOfC0q1qsPuzXTmKU3jHwHE/ck834EU+wLfQ+dtxyPnbGefZ97ApPn/txyF32wWf1CgvjTMF15dzy+gq4Dybm4iVodjm7nOPMLmeXc5zZ5exyjjO7nF3OcWaXs8s5zuxydjnHmV3OLuc4s8vZ5Rxndjm7nOPMLuf/n5wDj/w7qmL1Yb9OEqP0LgfPicQ93Rk/4gm2hf7c4YTlfOyM8+yfO5z09LmfgNxlH5xfJy2MMwXXlXPL65NwH/7XzcVL0OyejZ/H7J4NZ44zu2fDmePM7tlw5jizezacOc7sng1njjO7Z8OZ48zu2XDmOLN7Npw5zuyeDWeOM7tnw5njzO7ZcOY4s3s2nDnO7J4NZ44zu2fDmePMDM9G4OlStVh92K+LxCi9K8BzZfKenB/xBNtCn9u50nI+lsYZfm7nlKfP/UrIXfbB+XXKwjhTcF05t7w+BffBmZ1ZZw483aoWqw/7dZMYpXcSPKeT9+T8iCfYFnofO205H0vjDN/HrvL0uZ+G3GUffFavsjDOFFxXzi2vr4L74MzOrDMHnh5Vi9WH/XpIjNI7BZ6rk/fk/Ign2BZ6H7vacj6Wxhm+j53x9LlfDbnLPvisnrEwzhRcV84tr8/AfXBmZ9aZA0+fqsXqw359JEbpXQWea5L3ZP2IJ9gWeh+7xnI+lsYZvo9d6+lzvwZyl33wWb3WwjhTcF05t7y+Fu7DUjMHnmFVi9WH/YZJjNI7A57rkvdk/Ygn2BaaX9dZzsfSOMP5db2nz/06yF32wWf1egvjTMF15dzy+nq4D0vNHHhGVC1WH/YbITFK71rw3JC8J+tHPMG20Py6wXI+lsYZzq8bPX3uN0Dusg8+qzdaGGcKrivnltc3wn1YaubAM6pqsfqw3yiJUXrXg0d63yXn6U6DpfxnGLsXGbunGbtsM2SelWSecTLPLjLPMJmnl8yTIfO0kHkayDzVZJ4NZJ4KMs8smccn80yQeQrIPLvJPCNknj4yTxeZp5XM00jmqSHzbCTzrCbzHCDzlJJ5Jsk8y8k8e8g8P8fPmkw8/WSeLJmnjcyzlcxTS+bZROZZQ+aZI/OkyTxTZJ5CMs8YmWcHmWeAzNNN5mkn8zSReerIPJvJPGvJPPNknlVknmkyTxGZZy+ZJ0/mGSTz5Mg8HWSeZjJPPZmnksyzjsxTRubZT+ZZQebZR+bZSeYZIvP0kHk6yTzbyTxbyDxVZJ71ZJ4Ugcf3fvh5eR++XgK9m1RdAL2bVb0cereouhB6v1B1EfR+CeOX3q2qXgm9X0Etv/5a1aXQ+42q09D7rapXQe93qi6D3u9VXQ69P6i6Anp/VPVq6P1J1Wug92dVr4XeX1S9Dnp/VfV66P1N1Rug93dVb4TeP1S9CXr/VPVm6N2m6kro3a7qKujdoepq6N2p6hro3aXqWujdreo66N2j6nro3avqLdC7T9UN0Ltf1Y3Qe0DVW6H3oKqboPeQqpuh97Cqt0PvEVW3QO9RVbdC7zFVt0HvcVW3Q+8JVXdA70lVd0LvKVVnoPe0qrug94yqs9B7VtXd0HtO1TnoPa/qHui9oOpe6L2o6j7ovaTqfui9rOoB6L2i6kHovarqIei9puph6L2u6hHovaHqUei9qeod0HtL1Xnova3qndB7R9W7oPeuqndD7z1V74He+6oeg94Hqt4LvQ9VvQ96H6l6HHofq3oCep+oehJ6n6p6CnqfqXoaep+rej/0vlD1DPS+VPUs9L5S9QHofa3qOeh9o+p56H2r6hugJ+sBrinyd3lugp6sETdDT9aIW6Ana8QvoCf/T7JfQk/WjVuhJ+sVrhmylvwaer6qfwM9WUt+Cz1ZS34HPVlLfg89WUv+AD1ZS/4IPVlL/gQ9WUv+DD1ZS/4CPVlL/go9WUv+Bj1ZS/4OPVlL/gE9WUv+CT1ZS26Dnqwlt0NP1pI7oCdryZ3Qk7XkLujJWnI39GQtuQd6daq+F3qyltwHPVlL7oeerCUPQE/WkgehJ2vJQ9CTteRh6Mla8gj0tqn6UejJ+vIY9GR9eRx6rap+AnqyvjwJPVlfnoKerC9PQ0/Wl2egJ+vLs9CT9eU56Mn68jz0ZH15AXqyvrwIPVlfXoKerC8vQ0/Wl1egJ+vLq9CT9eU16Mn68jr0ZH15A3qyvrwJPVlf3oKerC9vQ0/Wl3egl1f1u9CT9eU96Mn68j70ZH35AHqyvnwIPVlfPoKerC8fQ0/Wl0+gJ+vLp9CT9eUz6Mn68jn0plT9BfRkffkSerK+fAU9WV++hp6sL99AT9aXb9WvwXt4WfG5r8u++P3Et5rzSI3fL8m1816y3y/htfLwWq5XCo5vSDzryTxVZJ4tZJ7tZJ5OMk8PmWeIzLOTzLOPzLOCzLOfzFNG5llH5qkk89STeZrJPB1knhyZZ5DMkyfz7CXzFJF5psk8q8g882SetWSezWSeOjJPE5mnnczTTeYZIPPsIPOMkXkKyTxTZJ40mWeOzLOGzLOJzFNL5tlK5mkj82TJPP1knlEyzx4yz3IyzySZp5TMc4DMs5rMs5HMU0PmaSTztJJ5usg8fWSeETLPbjJPAZlngszjk3lmyTwVZJ4NZJ5qMk8DmaeFzJMh8/SSeYbJPLvIPONknpVknhkyT3nEg3+H4Vvoye+T5Gsl3vd/Xox/7+9gpBeM8ZClMcq15Nzy+hCMUf6M+CB4DlryzEc80WunvXO5zJFmlobevCbHVRr3KgI3Po8/x72ei3ii105DLvOkmeG9ntPkWKZxlxG4Ged1WSRHtswWm9eNGncjgZtxXjdGcmTLbLF53aRxNxG4Ged1UyRHtswWm9fbNO5tBG7Geb0tkiNbZovN6xaNu4XAzTivWyI5smW22Lxu07jbCNyM87otkiNbZovN6w6Nu4PAzTivOyI5smW22LzOaNwZAjfjvM5EcmTLbLF5ndW4swRuxnmdjeTIltli8zqncecI3IzzOhfJkS2zxeb1gMY9QOBmnNcDkRzZMltsXg9q3IMEbsZ5PRjJkS2zxeb1kMY9ROBmnNdDkRzZMtPNa1uZ+d73Mwu2VOR1Hmq8h3MWPJbGmUlBvnJu3bMh++C/G/rfeg4wi7rkrt0bnPc8C2MK/tywBHI9L5IvPt+yFcBYD1vK2YvkLNthjWcHmaebzNNO5mkm89STeSrJPOvIPNNknhIyz14yzzIyT57Mc4jMs4XMU0XmWU/mKSfz7CfzrCTz7CPzLCfz7CTz9JB5Osk828k8DWSeajLPBjJPBZlnhszjk3nGyTyFZJ5dZJ5hMk8vmaeGzLORzLOazDNL5ikl80yQeYrIPLvJPCNknj4yTxeZp5XMs5XMU0vm2UTmWUPmmSTzFJN59pB5Rsk8/WSeOjLPZjLPWjLPFJlnBZlnjMyTIvD4nv7fO5evH4JeQeTYYH25tOTc14+ofoHmPEe8H+6H4z9qafx4rTy8luvhv194hMQzRuZZQeaZIvOsJfNsJvPUkXn6yTyjZJ49ZJ5iMs8kmWcNmWcTmaeWzLOVzNNK5uki8/SReUbIPLvJPEVkngkyTymZZ5bMs5rMs5HMU0Pm6SXzDJN5dpF5Csk842Qen8wzQ+apIPNsIPNUk3kayDzbyTydZJ4eMs9OMs9yMs8+Ms9KMs9+Mk85mWc9maeKzLOFzHOIzJMn8ywj8+wl85SQeabJPOvIPJVknnoyTzOZp53M003m2UHmKYh4gp+/yBqLn5OS/eRrwfto8Htd+fzH8VMnjl89c8uZM6dPnj5x49itp2+6+aaUd25bBhZPUxdoekE28vOy7xLMJjiHfB9TCLZCGK/0lmsyWAYZoDfc8gkhU3Ch6JbSNf8FCA/XK26eAQA=", "debug_symbols": "zd3dqiVmVoXhe6njIHv+zy+3Ih7EtoVAk246UZCQe7daK2mlS3S8J86jUGR/yYIxmIQna7B//vSHP/7uu5++/+MPP3769udPH39Xn779+58//fin7374y59//Om7P//06duPbz79/od/+vzXX7759M/f/+H3n7717l+++Zufez1ffvKt/fazZh9f+VmbX3/WP/76z4365R+++fwx+sbHmBsfY298jHfjY9jHkc9hRz6HH/kcceRz5JHPceSW2pFjakeuqR05p3bknvqRe+pH7qkfuad+5J76kXvqR+6pH7mnfuSe+pF76kfuaRy5p3HknsaRexpH7mkcuadx5J7GkXsaR+5pHLmnceSe5pF7mkfuaR65p3nknuaRe5pH7mkeuad55J7mkXuaR+5pHbmndeSe1pF7WkfuaR25p3XkntaRe1pH7mkduad15J72kXvaR+5pH7mnfeSe9pF72lf+3/6Re9pH7mkfuad95J7OkXs6R+7pHLmnc+SezpF7Okfu6Vz5stSRezpH7ukcuad75J7ukXu6R+7pHrmne+Se7pF7ukfu6V759umRe7pH7uk7ck/fkXv6jtzTd+SeviP39B25p+/IPX1H7um78nX+M9/nv/KF/o8r3+j/uPKV/o8r3+n/OHJU7ePKt/o/rnyt/+PK9/o/rnyx/+PKZb0zlbpyWc+Mpc6spc7Mpc7spc4Mps4sps5Mpq5spuzKaMqurKbsymzKruym7Mpwyq4sp+zKdMqubKfsynjKrqyn7Mp8yq7sp+zKgMquLKjsyoTKrmyo7MqIyq6sqOzKjMqu7KjsypDKriyp7MqUyq5sqezKmMqurKnsypzKruyp7Mqgyq4squzKpMqubKrsyqjKrqyq7Mqsyq7squzKsMquLKvsyrTKrmyr7Mq4yq6sq+zKvMqu7KvsysDKriys7MrEyq5srOzKyMqurKzsyszKruys7MrQyq4srezK1MqubK3sytjKrqyt7Mrcyq7srezK4MquLK7syuTKrmyu7Mroyq6sruzK7Mqu7K7syvDKriyv7Mr0yq5sr+zK+MqurK/syvzKruyv7MoAy64ssOzKBMuubLD8ygbLr2yw/MoGy69ssPzjyGX1Kxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8jO/t+rML66685urrlzWM7+76swvrzrz26vO/PqqM7+/6swvsLqywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LB8isbLL+ywfIrGyy/ssHyKxssv7LBiisbrLiywQplg/XlRcgvUn5R8ouWX4z8YuUXT32hbFm+vDD5hZy5yZmbnLnJmZucucmZm5y5yZm7nLnLmbucucuZu5y5y5m7nLnLmbucucuZh5x5yJmHnHnImYececiZh5x5yJmHnHnImaececqZp5x5ypmnnHnKmaececqZp5x5ypmXnHnJmZececmZl5x5yZmXnHnJmZececmZt5x5y5m3nHnLmbececuZt5x5y5m3nHnLmY+c+ciZj5z5yJmPnPnImY+c+ciZj5z5yJmvnPnKma+c+cqZr5z5ypmvnPnKma+c+cqZPznzJ2f+5MyfnPmTM39y5k/O/MmZPznzp2aeHx/yC5NfuPwi5Bcpvyj5RcsvRn6x8gs5c9nhUna4lB0uZYdL2eFSdriUHS5lh0vZ4VJ2uJQdLmWHS9nhUna4lB0uZYdL2eFSdriUHS5lh0vZ4VJ2uJQdLmWHS9nhUna4lB0uZYdL2eFSdriUHS5lh0vZ4VJ2uJQdLmWHS9nhUna4lB0uZYdL2eFSdriUHS5lh0vZ4VJ2uJQdLmWHS9nhUna4lB0uZYdL2eFSdriUHS5lh0vZ4VJ2uJQdLmWHS9nhUna4lB0uZYdL2eFSdriUHS5lh0vZ4VJ2uJQdLmWHS9nhUna4lB0uZYdL2eFSdriUHS5lh0vZ4VJ2uJQdLmWHS9nhUna4lB0uZYdL2eFSdriSHa5khyvZ4Up2uJIdrmSHK9nhSna4kh2uZIcr2eFKdriSHa5khyvZ4Up2uJIdrmSHK9nhSna4kh2uZIcr2eFKdriSHa5khyvZ4Up2uJIdrmSHK9nhSna4kh2uZIcr2eFKdriSHa5khyvZ4Up2uJIdrmSHK9nhSna4kh2uZIcr2eFKdriSHa5khyvZ4Up2uJIdrmSHK9nhSna4kh2uZIcr2eFKdriSHa5khyvZ4Up2uJIdrmSHK9nhSna4kh2uZIcr2eFKdriSHa5khyvZ4Up2uJIdrmSHK9nhSna4kh2uZIcr2eFKdriSHa5khyvZ4Up2uJIdrmSHK9nhSna4kh2uZIcr2eFKdriSHa5khyvZ4Up2uJYdrmWHa9nhWna4lh2uZYdr2eFadriWHa5lh2vZ4Vp2uJYdrmWHa9nhWna4lh2uZYdr2eFadriWHa5lh2vZ4Vp2uJYdrmWHa9nhWna4lh2uZYdr2eFadriWHa5lh2vZ4Vp2uJYdrmWHa9nhWna4lh2uZYdr2eFadriWHa5lh2vZ4Vp2uJYdrmWHa9nhWna4lh2uZYdr2eFadriWHa5lh2vZ4Vp2uJYdrmWHa9nhWna4lh2uZYdr2eFadriWHa5lh2vZ4Vp2uJYdrmWHa9nhWna4lh2uZYdr2eFadriWHa5lh2vZ4Vp2uJYdrmWHa9nhWna4lh2uZYdr2eFadriWHa5lh2vZ4Vp2uJYdrmWHa9nhWna4kR1uZIcb2eFGdriRHW5khxvZ4UZ2uJEdbmSHG9nhRna4kR1uZIcb2eFGdriRHW5khxvZ4UZ2uJEdbmSHG9nhRna4kR1uZIcb2eFGdriRHW5khxvZ4UZ2uJEdbmSHG9nhRna4kR1uZIcb2eFGdriRHW5khxvZ4UZ2uJEdbmSHG9nhRna4kR1uZIcb2eFGdriRHW5khxvZ4UZ2uJEdbmSHG9nhRna4kR1uZIcb2eFGdriRHW5khxvZ4UZ2uJEdbmSHG9nhRna4kR1uZIcb2eFGdriRHW5khxvZ4UZ2uJEdbmSHG9nhRna4kR1uZIcb2eFGdriRHW5khxvZ4UZ2uJEdbmSHG9nhRna4kR1uZIcb2eFGdriVHW5lh1vZ4VZ2uJUdbmWHW9nhVna4lR1uZYdb2eFWdriVHW5lh1vZ4VZ2uJUdbmWHW9nhVna4lR1uZYdb2eFWdriVHW5lh1vZ4VZ2uJUdbmWHW9nhVna4lR1uZYdb2eFWdriVHW5lh1vZ4VZ2uJUdbmWHW9nhVna4lR1uZYdb2eFWdriVHW5lh1vZ4VZ2uJUdbmWHW9nhVna4lR1uZYdb2eFWdriVHW5lh1vZ4VZ2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ixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxpyU0NuashNDbmpITc15KaG3NSQmxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIQ815KGGPNSQhxryUEMeashDDXmoIS815KWGvNSQlxryUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2aUwuxRml8LsUphdCrNLYXYpzC6F2Udh9lGYfRRmH4XZ95H0YdGHTR8Ofbj0IW0ONeRHDflRQ37UkB815EcN+VFDftSQHzXkRw35UUN+1JAfNeRHDflRQ37UkB815EcN+VFDftSQHzXkRw35UUN+1JAfNeRHDflRQ37UkB815EcN+VFDftSQHzXkRw35UUN+1JAfNeRHDflRQ37UkB815EcN+VFDftSQHzXkRw35UUN+1JAfNeRHDflRQ37UkB815EcN+VFDftSQHzXkRw35UUN+1JAfNeRHDflRQ37UkB815EcN+VFDftSQHzXkRw35UUN+1JAfNeRHDflRQ37UkB815Pd1Q/a2Xx96118ftv3yzd/+cOz8+sP5/pcf/oydH79+pA/L337Y3vvtI+29j/TOfaSvi/r/70eyex/J732kuPeR8t5Hqnsfqe99pHvX+9273u9/uN69v/5b5sP+67/lP975x8cHfGfwncN3Ad8lfFfwXcN3A98tfAf7YrAvBvtisC8G+2KwLwb7YrAvBvtisC8G++KwLw774rAvDvvisC8O++KwLw774rAvDvsSsC8B+xKwLwH7ErAvAfsSsC8B+xKwLwH7krAvCfuSsC8J+5KwLwn7krAvCfuSsC8J+1KwLwX7UrAvBftSsC8F+1KwLwX7UrAvBfvSsC8N+9KwLw370rAvDfvSsC8N+9KwLw37MrAvA/sysC8D+zKwLwP7MrAvA/sysC8D+7KwLwv7srAvC/uysC8L+7KwLwv7srAvC/vyYF8e7MuDfXmwLw/25cG+PNiXB/vyYF+g7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg78bX3TSt7cu79I/57Z195JeH+XU4/W8Pzb/60OSHn//0r9/9+fvv/vEPv//x85u//M1/+eF3P33/xx++/PGnf/vTf/6dX/4d" }, { "name": "get_imm_card", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::card_note::CardNote", "fields": [{ "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, { "name": "randomness", "type": { "kind": "field" } }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "header", "type": { "kind": "struct", "path": "aztec::note::note_header::NoteHeader", "fields": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "nonce", "type": { "kind": "field" } }, { "name": "storage_slot", "type": { "kind": "field" } }, { "name": "is_transient", "type": { "kind": "boolean" } }] } }] }, "visibility": "public" }, "return_witnesses": [0, 1, 2, 3, 4, 5, 6] }, "bytecode": "", "debug_symbols": "" }], "events": [], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n", "path": "std/collections/bounded_vec.nr" }, "19": { "source": "// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n    let borrow = lt_unsafe(PLO, xlo, 16);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Check that (xlo < plo && xhi <= phi) || (xlo >= plo && xhi < phi)\n    let rlo = PLO - xlo + (borrow as Field) * TWO_POW_128;\n    let rhi = PHI - xhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let (alo, ahi) = decompose(a);\n    let (blo, bhi) = decompose(b);\n\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    // Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n", "path": "std/field/bn254.nr" }, "20": { "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n", "path": "std/field.nr" }, "30": { "source": "mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\n// TODO: add implementations for the remainder of primitive types.\nimpl Hash for Field{\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        let input: [Field] = [self];\n        H::write(state, input);\n    }\n}\n", "path": "std/hash.nr" }, "33": { "source": "// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n", "path": "std/merkle.nr" }, "35": { "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n", "path": "std/option.nr" }, "59": { "source": "use dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateImmutable<T> {}\n\nimpl<Note> PrivateImmutable<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note  where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr" }, "60": { "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr" }, "61": { "source": "use dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::{nullifier_key::get_nullifier_secret_key, notes::check_nullifier_exists};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateMutable<T> {}\n\nimpl<Note> PrivateMutable<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr" }, "62": { "source": "use dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateSet<T> {}\n\nimpl<Note> PrivateSet<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(self.context.public.unwrap(), self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n\n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(\n            false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(\n            false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.note_hash_read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>\n    ) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(self.context.private.unwrap(), storage_slot, options);\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr" }, "63": { "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr" }, "64": { "source": "use crate::{\n    context::Context, history::public_value_inclusion::prove_public_value_inclusion,\n    oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for SharedImmutable<T> {}\n\nimpl<T> SharedImmutable<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"SharedImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"SharedImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        // Read the value from storage (using the public tree)\n        let fields = storage_read(self.storage_slot);\n\n        // Loop over the fields and prove their inclusion in the public tree\n        for i in 0..fields.len() {\n            // TODO: Update membership proofs to use current header (Requires #4179)\n            // Currently executing unnecessary computation:\n            // - a membership proof of the value in the public tree of the header \n            prove_public_value_inclusion(\n                fields[i],\n                self.storage_slot + i as Field,\n                (*private_context).this_address(),\n                (*private_context)\n            )\n        }\n        T::deserialize(fields)\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr" }, "65": { "source": "use crate::{context::Context, oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T> Storage<T> for PublicImmutable<T> {}\n\nimpl<T> PublicImmutable<T> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"PublicImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"PublicImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicImmutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_immutable_struct_read\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr" }, "70": { "source": "use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::{AztecAddress},\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::{get_public_data_witness}};\n\nfn _public_value_inclusion(\n    value: Field,\n    storage_slot: Field,\n    contract_address: AztecAddress,\n    header: Header\n) {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 3) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 4) Check that the witness matches the corresponding public_value\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    if is_in_range {\n        assert_eq(value, 0, \"Non-existant public data leaf value is non-zero\");\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot don't match witness\");\n        assert_eq(preimage.value, value, \"Public value does not match the witness\");\n    }\n\n    // 5) Prove that the leaf we validated is in the public data tree\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and that way verified that a specific\n    // `value` was really set in a given contract storage slot at block `block_number` in public data tree.\n}\n\npub fn prove_public_value_inclusion(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    context: PrivateContext\n) {\n    _public_value_inclusion(\n        value,\n        storage_slot,\n        contract_address,\n        context.historical_header\n    );\n}\n\npub fn prove_public_value_inclusion_at(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32, // The block at which we'll prove that the note exists\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _public_value_inclusion(value, storage_slot, contract_address, header);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/history/public_value_inclusion.nr" }, "77": { "source": "use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "82": { "source": "use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "85": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/log.nr" }, "87": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "90": { "source": "use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr" }, "91": { "source": "use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr" }, "93": { "source": "use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr" }, "94": { "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr" }, "99": { "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr" }, "104": { "source": "use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr" }, "106": { "source": "use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr" }, "107": { "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr" }, "110": { "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context.nr" }, "115": { "source": "use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::{Empty, Serialize};\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n\nimpl Serialize<4> for NoteHeader {\n    fn serialize(self) -> [Field; 4] {\n        [self.contract_address.to_field(), self.nonce, self.storage_slot, self.is_transient as Field]\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/note_header.nr" }, "118": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr" }, "121": { "source": "use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed private data tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr" }, "122": { "source": "use dep::protocol_types::{\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTE_ORACLE_RETURN_LENGTH, GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH\n}\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note: Note) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index].lt(fields_1[sort.field_index]);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter.nr" }, "131": { "source": "pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr" }, "132": { "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr" }, "144": { "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr" }, "147": { "source": "use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl Eq for PublicKeysHash {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    assert(actual.to_field() == 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/public_keys_hash.nr" }, "148": { "source": "use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address\n    );\n\n    assert(address.to_field() == 0x2fd71a4f0742364f194dd16d0ae32d2f47845ddc7f5d328f37d4148b565c4123);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    assert(address.to_field() == 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr" }, "153": { "source": "use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr" }, "163": { "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr" }, "168": { "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr" }, "183": { "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0xedd2f10c0cdf776ee2fff3c799bae6df5771f5013a2d5d7154601dffdcf869;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x1cec0b51f9394405a626c3b77081c96f1bdcb8bacf96960ae4749068f9b4da0d;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr" }, "185": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr" }, "196": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr" }, "199": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::FunctionLeafPreimage;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr" }, "202": { "source": "global ARGS_LENGTH: u64 = 16;\nglobal RETURN_VALUES_LENGTH: u64 = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_NOTE_HASHES_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as note hashes and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_NOTE_HASHES_PER_TX ≥ MAX_NEW_NOTE_HASHES_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_CALL: u64 = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: u64 = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: u64 = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: u64 = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: u64 = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: u64 = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: u64 = 16;\nglobal MAX_NOTE_HASH_READ_REQUESTS_PER_CALL: u64 = 32;\nglobal MAX_NULLIFIER_READ_REQUESTS_PER_CALL: u64 = 2; // Change it to a larger value when there's a seperate reset circuit.\nglobal MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL: u64 = 2;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: u64 = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_TX: u64 = 64;\nglobal MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX: u64 = 8;\nglobal MAX_REVERTIBLE_NOTE_HASHES_PER_TX: u64 = 56;\n\nglobal MAX_NEW_NULLIFIERS_PER_TX: u64 = 64;\nglobal MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX: u64 = 8;\nglobal MAX_REVERTIBLE_NULLIFIERS_PER_TX: u64 = 56;\n\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: u64 = 8;\n\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 8;\nglobal MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 3;\nglobal MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 5;\n\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 16;\n\nglobal MAX_PUBLIC_DATA_READS_PER_TX: u64 = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: u64 = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: u64 = 16;\n\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: u64 = 2;\nglobal MAX_NOTE_HASH_READ_REQUESTS_PER_TX: u64 = 128;\nglobal MAX_NULLIFIER_READ_REQUESTS_PER_TX: u64 = 8; // Change it to a larger value when there's a seperate reset circuit.\nglobal MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX: u64 = 8;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: u64 = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: u64 = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: u64 = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: u64 = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: u64 = 3;\nglobal FUNCTION_TREE_HEIGHT: u64 = 5;\nglobal NOTE_HASH_TREE_HEIGHT: u64 = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: u64 = 40;\nglobal NULLIFIER_TREE_HEIGHT: u64 = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: u64 = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: u64 = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\nglobal NULLIFIER_TREE_ID = 0;\nglobal NOTE_HASH_TREE_ID = 1;\nglobal PUBLIC_DATA_TREE_ID = 2;\nglobal L1_TO_L2_MESSAGE_TREE_ID = 3;\nglobal ARCHIVE_TREE_ID = 4;\n\n// SUB-TREES RELATED CONSTANTS\nglobal NOTE_HASH_SUBTREE_HEIGHT: u64 = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: u64 = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: u64 = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: u64 = 5;\nglobal ARCHIVE_HEIGHT: u64 = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: u64 = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: u64 = 35;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: u64 = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: u64 = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: u64 = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u64 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u64 = 32;\n// The following is used in immutable state variables to compute an initialization slot whose value is used to\n// determine whether a given variable has been initialized (by asserting that the value in the slot is 0).\n// The initialization slot is computed by adding the constant bellow to the variable's storage slot. This constant has\n// to be large enough so that it's ensured that it doesn't collide with storage slots of other variables.\nglobal INITIALIZATION_SLOT_SEPARATOR: Field = 1000_000_000;\nglobal INITIAL_L2_BLOCK_NUM: Field = 1;\n// 126976 = 31 * 4096;\nglobal BLOB_SIZE_IN_BYTES: Field = 126976;\n\n// CONTRACT CLASS CONSTANTS\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: u64 = 15000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: u64 = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: u64 = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\nglobal DEPLOYER_CONTRACT_ADDRESS = 0x0bffa876f07f9fe1802579dfef599810202f9c25b9a2f58921064a267d1ad1d3;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: u64 = 17;\nglobal MAX_NOTE_FIELDS_LENGTH: u64 = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: u64 = 23;\nglobal MAX_NOTES_PER_PAGE: u64 = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: u64 = 212;\n\n// LENGTH OF STRUCTS SERIALIZED TO FIELDS\nglobal AZTEC_ADDRESS_LENGTH = 1;\nglobal CALL_CONTEXT_LENGTH: u64 = 7;\nglobal CONTENT_COMMITMENT_LENGTH: u64 = 7;\nglobal CONTRACT_INSTANCE_LENGTH: u64 = 6;\nglobal CONTRACT_STORAGE_READ_LENGTH: u64 = 2;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: u64 = 2;\nglobal ETH_ADDRESS_LENGTH = 1;\nglobal FUNCTION_DATA_LENGTH: u64 = 4;\nglobal FUNCTION_LEAF_PREIMAGE_LENGTH: u64 = 5;\nglobal GLOBAL_VARIABLES_LENGTH: u64 = 6;\nglobal HEADER_LENGTH: u64 = 23; // 2 for last_archive, 7 for content commitment, 8 for state reference, 6 for global vars\nglobal L1_TO_L2_MESSAGE_LENGTH: u64 = 8;\nglobal L2_TO_L1_MESSAGE_LENGTH: u64 = 2;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH = 5;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: u64 = 6;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: u64 = 215;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: u64 = 210;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: u64 = 202;\nglobal STATE_REFERENCE_LENGTH: u64 = 8; // 2 for snap + 8 for partial\nglobal TX_CONTEXT_DATA_LENGTH: u64 = 4;\nglobal TX_REQUEST_LENGTH: u64 = 10;\n\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH: Field = 13; // 2 + FUNCTION_DATA_LENGTH + CALL_CONTEXT_LENGTH\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: u64 = 674;\nglobal NOTE_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal NUM_MSGS_PER_BASE_PARITY: u64 = 4;\n// NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP / NUM_MSGS_PER_BASE_PARITY\nglobal NUM_BASE_PARITY_PER_ROOT_PARITY: u64 = 4;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__NOTE_HASH = 1;\nglobal GENERATOR_INDEX__NOTE_HASH_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_NOTE_HASH = 3;\nglobal GENERATOR_INDEX__SILOED_NOTE_HASH = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\nglobal GENERATOR_INDEX__FEE_PAYLOAD = 30;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\nglobal GENERATOR_INDEX__AUTHWIT_INNER = 45;\nglobal GENERATOR_INDEX__AUTHWIT_OUTER = 46;\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/constants.nr" }, "209": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr" }, "210": { "source": "use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr" }, "263": { "source": "use dep::aztec::prelude::{AztecAddress, NoteInterface, NoteHeader, PrivateContext, emit_encrypted_log};\nuse dep::aztec::{\n    note::{utils::compute_note_hash_for_consumption},\n    oracle::{nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    hash::pedersen_hash, protocol_types::traits::Empty\n};\n\n// Shows how to create a custom note\n\nglobal CARD_NOTE_LEN: Field = 3;\n\n// docs:start:state_vars-CardNote\nstruct CardNote {\n    points: u8,\n    randomness: Field,\n    owner: AztecAddress,\n    header: NoteHeader,\n}\n// docs:end:state_vars-CardNote\n\nimpl CardNote {\n    pub fn new(points: u8, randomness: Field, owner: AztecAddress) -> Self {\n        CardNote { points, randomness, owner, header: NoteHeader::empty() }\n    }\n}\n\nimpl NoteInterface<CARD_NOTE_LEN> for CardNote {\n    fn serialize_content(self) -> [Field; CARD_NOTE_LEN] {\n        [self.points as Field, self.randomness, self.owner.to_field()]\n    }\n\n    fn deserialize_content(serialized_note: [Field; CARD_NOTE_LEN]) -> Self {\n        CardNote {\n            points: serialized_note[0] as u8,\n            randomness: serialized_note[1],\n            owner: AztecAddress::from_field(serialized_note[2]),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(note: CardNote) -> NoteHeader {\n        note.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'CardNote')))\"\n        679711410078111116101\n    }\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/docs_example_contract/src/types/card_note.nr" }, "264": { "source": "use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\n// Shows how to create a custom struct in Public\nstruct Leader {\n    account: AztecAddress,\n    points: u8,\n}\n\nglobal LEADER_SERIALIZED_LEN: Field = 2;\n\nimpl Deserialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn deserialize(fields: [Field; LEADER_SERIALIZED_LEN]) -> Self {\n        Leader { account: AztecAddress::from_field(fields[0]), points: fields[1] as u8 }\n    }\n}\n\nimpl Serialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn serialize(self) -> [Field; LEADER_SERIALIZED_LEN] {\n        [self.account.to_field(), self.points as Field]\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/docs_example_contract/src/types/leader.nr" }, "266": { "source": "mod options;\nmod types;\n\n// Following is a very simple game to show case use of PrivateMutable in as minimalistic way as possible\n// It also serves as an e2e test that you can read and then replace the PrivateMutable in the same call\n// (tests ordering in the circuit)\n\n// you have a card (PrivateMutable). Anyone can create a bigger card. Whoever is bigger will be the leader.\n// it also has dummy methods and other examples used for documentation e.g. \n// how to create custom notes, a custom struct for public state, a custom note that may be unencrypted\n// also has `options.nr` which shows various ways of using `NoteGetterOptions` to query notes\n// it also shows what our macros do behind the scenes!\n\ncontract DocsExample {\n    // how to import dependencies defined in your workspace\n    use dep::aztec::prelude::{\n        AztecAddress, FunctionSelector, NoteHeader, NoteGetterOptions, NoteViewerOptions,\n        PrivateContext, Map, PublicMutable, PublicImmutable, PrivateMutable, PrivateImmutable,\n        PrivateSet, SharedImmutable\n    };\n    use dep::aztec::{note::note_getter_options::Comparator, context::{PublicContext, Context}};\n    // how to import methods from other files/folders within your workspace\n    use crate::options::create_account_card_getter_options;\n    use crate::types::{card_note::{CardNote, CARD_NOTE_LEN}, leader::Leader};\n\n    struct Storage {\n        // Shows how to create a custom struct in PublicMutable\n        // docs:start:storage-leader-declaration\n        leader: PublicMutable<Leader>,\n        // docs:end:storage-leader-declaration\n        // docs:start:storage-private-mutable-declaration\n        legendary_card: PrivateMutable<CardNote>,\n        // docs:end:storage-private-mutable-declaration\n        // just used for docs example to show how to create a private mutable map. \n        profiles: Map<AztecAddress, PrivateMutable<CardNote>>,\n        // docs:start:storage-set-declaration\n        set: PrivateSet<CardNote>,\n        // docs:end:storage-set-declaration\n        // docs:start:storage-private-immutable-declaration\n        private_immutable: PrivateImmutable<CardNote>,\n        // docs:end:storage-private-immutable-declaration\n        // docs:start:storage-shared-immutable-declaration\n        shared_immutable: SharedImmutable<Leader>,\n        // docs:end:storage-shared-immutable-declaration\n        // docs:start:storage-minters-declaration\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage-minters-declaration\n        // docs:start:storage-public-immutable-declaration\n        public_immutable: PublicImmutable<Leader>,\n        // docs:end:storage-public-immutable-declaration\n    }\n\n    // Note: The following is no longer necessary to implement manually as our macros do this for us. It is left here\n    // for documentation purposes only.\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                // docs:start:storage-leader-init\n                leader: PublicMutable::new(context, 1),\n                // docs:end:storage-leader-init\n                // docs:start:start_vars_private_mutable\n                legendary_card: PrivateMutable::new(context, 3),\n                // docs:end:start_vars_private_mutable\n                // just used for docs example (not for game play):\n                // docs:start:state_vars-MapPrivateMutable\n                profiles: Map::new(\n                    context,\n                    4,\n                    |context, slot| {\n                        PrivateMutable::new(context, slot)\n                    }\n                ),\n                // docs:end:state_vars-MapPrivateMutable\n                // docs:start:storage-set-init\n                set: PrivateSet::new(context, 5),\n                // docs:end:storage-set-init\n                private_immutable: PrivateImmutable::new(context, 6),\n                // docs:start:storage-shared-immutable\n                shared_immutable: SharedImmutable::new(context, 7),\n                // docs:end:storage-shared-immutable\n                // docs:start:storage-minters-init\n                minters: Map::new(\n                    context,\n                    8,\n                    |context, slot| {\n                        PublicMutable::new(context, slot)\n                    }\n                ),\n                // docs:end:storage-minters-init\n                // docs:start:storage-public-immutable\n                public_immutable: PublicImmutable::new(context, 9)// docs:end:storage-public-immutable\n            }\n        }\n    }\n\n    #[aztec(public)]\n    fn initialize_shared_immutable(points: u8) {\n        let mut new_leader = Leader { account: context.msg_sender(), points };\n        storage.shared_immutable.initialize(new_leader);\n    }\n\n    #[aztec(private)]\n    fn match_shared_immutable(account: AztecAddress, points: u8) {\n        let expected = Leader { account, points };\n        let read = storage.shared_immutable.read_private();\n\n        assert(read.account == expected.account, \"Invalid account\");\n        assert(read.points == expected.points, \"Invalid points\");\n    }\n\n    unconstrained fn get_shared_immutable() -> pub Leader {\n        storage.shared_immutable.read_public()\n    }\n\n    #[aztec(public)]\n    fn initialize_public_immutable(points: u8) {\n        // docs:start:initialize_public_immutable\n        let mut new_leader = Leader { account: context.msg_sender(), points };\n        storage.public_immutable.initialize(new_leader);\n        // docs:end:initialize_public_immutable\n    }\n\n    unconstrained fn get_public_immutable() -> pub Leader {\n        // docs:start:read_public_immutable\n        storage.public_immutable.read()\n        // docs:end:read_public_immutable\n    }\n\n    // docs:start:initialize-private-mutable\n    #[aztec(private)]\n    fn initialize_private_immutable(randomness: Field, points: u8) {\n        let mut new_card = CardNote::new(points, randomness, context.msg_sender());\n        storage.private_immutable.initialize(&mut new_card, true);\n    }\n    // docs:end:initialize-private-mutable\n\n    #[aztec(private)]\n    // msg_sender() is 0 at deploy time. So created another function\n    fn initialize_private(randomness: Field, points: u8) {\n        let mut legendary_card = CardNote::new(points, randomness, context.msg_sender());\n        // create and broadcast note\n        storage.legendary_card.initialize(&mut legendary_card, true);\n    }\n\n    #[aztec(private)]\n    fn insert_notes(amounts: [u8; 10]) {\n        for i in 0..amounts.len() {\n            let mut note = CardNote::new(amounts[i], 1, context.msg_sender());\n            storage.set.insert(&mut note, true);\n        }\n    }\n\n    #[aztec(private)]\n    fn insert_note(amount: u8, randomness: Field) {\n        let mut note = CardNote::new(amount, randomness, context.msg_sender());\n        storage.set.insert(&mut note, true);\n    }\n\n    // docs:start:state_vars-NoteGetterOptionsComparatorExampleNoir\n    unconstrained fn read_note(amount: Field, comparator: u8) -> pub [Option<CardNote>; 10] {\n        let options = NoteViewerOptions::new().select(0, amount, Option::some(comparator));\n        let notes = storage.set.view_notes(options);\n\n        notes\n    }\n    // docs:end:state_vars-NoteGetterOptionsComparatorExampleNoir\n\n    #[aztec(private)]\n    fn update_legendary_card(randomness: Field, points: u8) {\n        let mut new_card = CardNote::new(points, randomness, context.msg_sender());\n        storage.legendary_card.replace(&mut new_card, true);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"update_leader((Field),u8)\"),\n            [context.msg_sender().to_field(), points as Field]\n        );\n    }\n\n    #[aztec(private)]\n    fn increase_legendary_points() {\n        // Ensure `points` > current value\n        // Also serves as a e2e test that you can `get_note()` and then `replace()`\n\n        // docs:start:state_vars-PrivateMutableGet\n        let card = storage.legendary_card.get_note(false);\n        // docs:end:state_vars-PrivateMutableGet\n\n        let points = card.points + 1;\n\n        let mut new_card = CardNote::new(points, card.randomness, context.msg_sender());\n        // docs:start:state_vars-PrivateMutableReplace\n        storage.legendary_card.replace(&mut new_card, true);\n        // docs:end:state_vars-PrivateMutableReplace\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"update_leader((Field),u8)\"),\n            [context.msg_sender().to_field(), points as Field]\n        );\n    }\n\n    #[aztec(private)]\n    fn spend_private_authwit(inner_hash: Field) -> Field {\n        1\n    }\n\n    #[aztec(public)]\n    fn spend_public_authwit(inner_hash: Field) -> Field {\n        1\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn update_leader(account: AztecAddress, points: u8) {\n        let new_leader = Leader { account, points };\n        storage.leader.write(new_leader);\n    }\n\n    unconstrained fn get_leader() -> pub Leader {\n        storage.leader.read()\n    }\n\n    unconstrained fn get_legendary_card() -> pub CardNote {\n        storage.legendary_card.view_note()\n    }\n\n    // docs:start:private_mutable_is_initialized\n    unconstrained fn is_legendary_initialized() -> pub bool {\n        storage.legendary_card.is_initialized()\n    }\n    // docs:end:private_mutable_is_initialized\n\n    // docs:start:get_note-private-immutable\n    unconstrained fn get_imm_card() -> pub CardNote {\n        storage.private_immutable.get_note()\n    }\n    // docs:end:get_note-private-immutable\n\n    unconstrained fn view_imm_card() -> pub CardNote {\n        storage.private_immutable.view_note()\n    }\n\n    unconstrained fn is_priv_imm_initialized() -> pub bool {\n        storage.private_immutable.is_initialized()\n    }\n\n    /// Macro equivalence section\n    use dep::aztec::hasher::Hasher;\n\n    use dep::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs;\n    use dep::aztec::context::inputs::PrivateContextInputs;\n\n    // docs:start:simple_macro_example\n    #[aztec(private)]\n    fn simple_macro_example(a: Field, b: Field) -> Field {\n        a + b\n    }\n    // docs:end:simple_macro_example\n\n    // docs:start:simple_macro_example_expanded\n    fn simple_macro_example_expanded(\n        // ************************************************************\n        // The private context inputs are made available to the circuit by the kernel\n        // docs:start:context-example-inputs\n        inputs: PrivateContextInputs,\n        // docs:end:context-example-inputs\n        // ************************************************************\n\n        // Our original inputs!\n        a: Field,\n        b: Field // The actual return type of our circuit is the PrivateCircuitPublicInputs struct, this will be the \n        // input to our kernel! \n        // docs:start:context-example-return\n    ) -> distinct pub PrivateCircuitPublicInputs {\n        // docs:end:context-example-return\n        // ************************************************************\n        // The hasher is a structure used to generate a hash of the circuits inputs. \n        // docs:start:context-example-hasher\n        let mut hasher = Hasher::new();\n        hasher.add(a);\n        hasher.add(b);\n        // docs:end:context-example-hasher\n\n        // The context object is created with the inputs and the hash of the inputs\n        // docs:start:context-example-context\n        let mut context = PrivateContext::new(inputs, hasher.hash());\n        // docs:end:context-example-context\n\n        // docs:start:storage-example-context\n        let mut storage = Storage::init(Context::private(&mut context));\n        // docs:end:storage-example-context\n        // ************************************************************\n\n        // Our actual program\n        let result = a + b;\n\n        // ************************************************************\n        // Return values are pushed into the context\n        // docs:start:context-example-context-return\n        context.return_values.push(result);\n        // docs:end:context-example-context-return\n\n        // The context is returned to be consumed by the kernel circuit!\n        // docs:start:context-example-finish\n        context.finish()\n        // docs:end:context-example-finish\n        // ************************************************************\n    }\n    // docs:end:simple_macro_example_expanded\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/docs_example_contract/src/main.nr" } } }
