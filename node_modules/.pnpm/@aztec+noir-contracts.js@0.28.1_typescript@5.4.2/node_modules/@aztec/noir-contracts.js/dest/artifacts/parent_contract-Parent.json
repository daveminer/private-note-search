{ "noir_version": "0.25.0+589a6cb62caf38445c768429150eee469ae35d77", "name": "Parent", "functions": [{ "name": "privateStaticCall", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "args", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "args": [{ "start": 35, "end": 37 }], "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473] }, "bytecode": "", "debug_symbols": "" }, { "name": "privateCall", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "args", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "args": [{ "start": 35, "end": 37 }], "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472] }, "bytecode": "", "debug_symbols": "" }, { "name": "pubEntryPointTwice", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "initValue", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "initValue": [{ "start": 39, "end": 40 }], "inputs": [{ "start": 0, "end": 37 }], "targetContract": [{ "start": 37, "end": 38 }], "targetSelector": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241] }, "bytecode": "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", "debug_symbols": "" }, { "name": "enqueueCallsToChildWithNestedFirst", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541] }, "bytecode": "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", "debug_symbols": "" }, { "name": "enqueueCallToChildTwice", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetValue", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }], "targetValue": [{ "start": 35, "end": 36 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388] }, "bytecode": "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", "debug_symbols": "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" }, { "name": "enqueueCallToPubEntryPoint", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetValue", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }], "targetValue": [{ "start": 35, "end": 36 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320] }, "bytecode": "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", "debug_symbols": "7Z3dTuMwEIXfJdcIecbjn+FVVnvRZVkJCRUE3ZVWiHdfh8VOSoxHlKqFqa9oVac53yFJP5LgPg43t5erzfXt+mG4eBwAhotvj8PD3Wo9Pn3YrO43w4U5G67WP9PPp7Ph1/XN1XCB0T2dLcaB45eREKGMjaEyFJHjy1i0zpXBwFwZHdnlDGyAtkZ/PxsAv2Rqe6jUZDGnJsYPpqaPpHbgc4EOTZxyYw3RmJwbDE6Q4GxldCIr7xymsRSfU7svmdp/ydShlpqcp5dlKJCVtm6P0/btMVA7/X73y3j4/HvdQ3kf+a2hkt9aN8+f1oFmLx0xtNYBe+EgX9ZBzgh7QSQfymHVM72OhIePxABlz2RwoT3cY35v72fbka2+tXWlfztjTQkro9nkZhh4GpsYx2JsL6ZeDPVi6sW4Xky9GN+LqRcTejH1YmIvpl4M92KqxVjTi6kXA72YejG6zJewFEOEW8WMsLpsVoClU4LVZZ0CrC6TFGB12aEAq8v4BFhdFteGJV1mJsDqsi0BVplBlYsL6bQ/L2CVGVQblk4JVplBtWGVGVQbVplBtWGVGVQbVplBNWGdMoNqwyozqDasLoNyUO4QcGQWsLoMSoClU4LVZVACrC6DEmB1GZQAq8ugBFhdBtWG9boMSoDVZVAC7DEMCqncScgY4/5gMZgMi4H8DDbWLm/aPJj9TC2JKmODyx4aZpdN0Tx3aHV1GEqHEVHqsHWJ2FMvpl6M68XUi/G9mHoxoRdTLyb2YurFcC+mWkwwvZh6MdCLqRejTJL3V0w33zeKIVXFREelmOC2ihlhddmsAKvLUAVYXdYpwOoySQFWlx22YaMu4xNgdVmcAKvLzARYXbbFxmVYRr+ApVOC1WVQAqwugxJgdRmUAKvLoARYXQbVhmVdBiXA6jIoAVaXQQmwygzKQ4GdTfmVYemUYJUZVBtWmUG1YZUZVBtWmUG1YZUZVBMWjDKFEmiVOZRAq0yiBNpTsigwdHBaNCl2zmSCeT3pIBh3hEwBZ5kCLDL5Y2SKtmSKlUyHdwdMh75yEjdtPLjIFD9hJj5GJm9KphTwdSYwR8iE5cCRHi8m+wSAI2Sy5dbw9Dj4RSY8Qibm8rtLB6uwyHT4TwgcN6iSCc1iG4cjHMcRA06Zom0Pj5zPXTDObtSPtpoEy7S0nrdv66++c3N+YHC9mze78Z+9G7Y5CjsWuvHTPzL4aGcnyNjv0k347N2EcqBKf4C5rXJGAD6vEgTOiXimmnky7fO4wzLVT1iYDqMwHUTT5873cbLrc3z3isaFeIeF6tM/SgvBLgvh+xZKT/6s7q9XP26uxu+jGF/7vb7MX0+Rnm7+3v1/5ekf" }, { "name": "enqueueCallsToChildWithNestedLast", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541] }, "bytecode": "", "debug_symbols": "" }, { "name": "entryPoint", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470] }, "bytecode": "", "debug_symbols": "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vT6XhOhzwQ5UrA1UrQ10GhsI0Y+CHShYGyhaG2i3NlCaPBDw407pODwPnz0PXzwPXz0PfzoePm+ehw+eh4+eh989D+95w2bPGzZ73rDZ84bNnjds9rxhi+cNWzxv2OJ5wxbPGxbRN/Lc8J43bPG8YYvnDVs8b9jiecNWzxu2et6w1fOGrZ43LKJj57nhPW/Y6nnDVs8btnresNXzhj09b9jT84Y9PW/Y0/OGRXTsPDe85w17et6wp+cNe3resKfjDXtsjjfssTnesMfmeMMem+MNe2yON+yxOd6wx+Z4wx6b4w17bI437LF53rDB84YNnjds8Lxhg+cNi2jHeW54zxs2eN6wwfOGDZ43bPC8YaPnDRs9b9joecNGzxsW0YTz3PCeN2z0vGGj5w0bPW/Y6HnD7p437O55w+6eN+zuecMiWm+eG97zht09b9jd84bdPW/Y3fOGTZ43bPK8YZPnDZs8b1hE389zw3vesMnzhk2eN2zyvGGT5w17eN6wh+cNe3jesIfnDeu50+nw3Ol0eO50Ojx3Oh2eO50Oz51Oh+dOp8Nzp9PhudPp8NzpdHjudDo8dzodnjudDs+dTofnTqfDc6fT4bnT6fDc6XR47nQ6PHc6HZ47nQ7PnU6H506nw3On0+G50+nw3Ol0eO50Ojx3Oh2eO50Oz51Oh+dOp8Nzp9PhudPp8NzpdHjudDo8dzodnjudDs+dTofnTqfDc6fT4bnT6fDc6XR47nQ6PHc6HZ47nQ7PnU7Zc6dT9tzplD13OmXPnU55c7xhs+dOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nTKnjudsudOp+y50yl77nQqnjudiudOp+K506l47nQqm+MNWzx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT8dzpVDx3OhXPnU7Fc6dT9dzpVD13OlXPnU7Vc6dT3Rxv2Oq506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudqudOp+q506l67nSqnjudTs+dTqfnTqfTc6fT6bnT6dwcb9jTc6fT6bnT6fTc6XR67nQ6PXc6nZ47nU7PnU6n506n03On0+m50+n03Ol0eu50Oj13Op2eO51Oz51Op+dOp9Nzp9PpudPp9NzpdHrudDo9dzqdnjudTs+dTqfnTqfTc6fT6bnT6fTc6XR67nQ6PXc6nZ47nU7PnU6n506n03On0+m50+n03Ol0eu50Oj13Op2eO51Oz51Op+dOp9Nzp9PpudPp9NzpdHrudDo9dzqdnjudTs+dTqfnTqfTc6fT6bnT6fTc6XR67nQ6PXc6nZ47nU7PnU6n506n03On0+m50+n03Ol0eu50Oj13Op2eO51Oz51Op+dOp9Nzp9PpudPp9NzpdHrudDo9dzqdnjudTs+dTqfnTqfTc6fT6bnT6fTc6XR67nQ6PXc6nZ47nU7PnU6n506n03On0+m50+n03Ol0eu50Oj13Op2eO51Oz51Op+dOp9Nzp9PpudPp9NzpdHrudDo9dzqdnjudTs+dTmHzXOr0mt7xjn1N73jJvqZ3vGVf0ztes6/pHe/Z1/SOF+1reseb9jW941X7mt71rvVc7/Sa3vWu9Vzw9Jre9a71XPH0mt71rvVc8vSa3vWu9Vzz9Jre9a71XPT0ms31rvVc9fSazfWu9Vz29JrN9a71XPf0ms31rvVc+PSazfWu9Vz59Jre9a71XPr0mt71rvVc+/Sa3vWu9Vz89Jre9a71XP30mt71rvVc/vSa3vWu9Vz/9Jre9a71XAD1mt71rvVcAfWa3vWu9VwC9Zre9a71XAP1mt71rvVcBPWa3vWu9VwF9Zre9a71XAb1mt71rvVcB/Wa3vWu9VwI9Zre9a71XAn1mt71rvVcCvWa3vWu9VwL9Zre9a71XAz1mt71rvVcDfWa3vWu9VwO9Zre9a71XA/1mt71rvVcEPWa3vWu9VwR9Zre9a71XBL1mt71rvVcE/Wa3vWu9VwU9Zre9a71XBX1mt71rvVcFvWa3vWu9VwX9Zre9a71XBj1mt71rvVcGfWa3vWu9Vwa9Zre9a71XBv1mt7zrg2ue6OC696o4Lo3KrjujQqb510bXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1Rw3RsVXPdGBde9UcF1b1R03RsVXfdGRde9UdF1b1TcPO/a6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6Oi696o6Lo3KrrujYque6N2171Ru+veqN11b9Tuujdq3zzv2t11b9Tuujdqd90btVvuLtrP8OO1+/nF9Ibf729Mb/g9J4X047UpHO3pDb/n3Jje8HvOjekNv+fcmN6wv78xvWF/35/ecn9Oysd7+hra0xt+v78xvWF/f2N6w/7+xvSWd21/esu7tj+95V3bn97yru1Pb3nX9qe3vGu701vuz7kxvetda7k/58b0rnet5f6cG9O73rV2+nOuiczsz2ui2Tvxy6dwv3/teew/XnvWvT396Xn66T0335g+p+Mdn3Mq5ePV5x/7XpzeivOk1uhT6zX/7nz+5Hz+w/n82fn8xfn8hnf6rfkNb/U78x9O9/o1v9Ndfc3vfP8ezvfv9G4d9PzO9+9hef8e+zsW5aPrtfNxXC/OTa99WN7VaK2W9zpaq2UPANaaLfsFtFbL3gKt1bIPQWu17FnQWhORVste6Htaob8rmtfxWFgu6/gxLJd1vBuW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veeFqve8UPWeF6re80LVe16oes8LVe95oeo9L1S954Wq97xQ9Z4Xqt7zQtV7Xqh6zwtV73mh6j0vVL3nhar3vFD1nheq3vNC1XteqHrPC1XveaHqPS9UveeFqve8UPWeF6re80LVe16oes8LVe95oeo9L1S954Wq97xQ9Z4Xqt7zQtV7Xqh6zwtV73mh6j0vVL3nhar3vFD1nheq3vNC1XteqHrPC1XveaHqPS9UveeFqve8UPWeF6re80LVe16oes8LVe95oeo9L1S954Wq97xQ9Z4Xqt7zQtV7Xqh6zytV73ml6j2vVL3nlar3vG6JSi2Tl6pUveeVqve8UvWeV6re80rVe16pes8rVe95peo9r1S955Wq97xS9Z5Xqt7zStV7Xql6zytV73ml6j2vVL3nlar3vFL1nleq3vNK1XteqXrPK1XveaXqPa9UveeVqve8UvWeV6re80rVe16pes8rVe95peo9r1S955Wq97xS9Z5Xqt7zStV7Xql6zytV73ml6j2vVL3nlar3vFL1nleq3vNK1XteqXrPK1XveaXqPa9UveeVqve8UvWeV6re80rVe16pes8rVe95peo9r1S955Wq97xS9Z5Xqt7zStV7Xql6zytV73ml6j2vVL3nlar3vFL1nleq3vO6Tlt0jeHHi2v8+W++tC6zf/pa12kTfv0Y+q318xSftS7z/nRD6zLvTje0JiKty6S8G1qdZrxrfqc785rf8h48z/rjxWULtT2/5WR1Y37TXbx35rfsLe7Mb9kv3Jnfsge4M7/lvX5nfsu7+s78lvfvnfkt79878zvfv6bbXvvzn6b7W8+Ur/mPn+dvPOEJH0PHbf94dS4fak1va7ha07sdrta0E4CrTVRqTbsMuFrTngSu1rSDgas17Xfgak27I7Ra0/2teLVUXsp0fyteLZWXMt3fildL5aVM97fi1VJ5KdP9rXi1VF7KdH8rXi2VlzLd34pXS+WlTPe34tVSeSnT/a14tVReynR/K14tlZcy3d+KV7vMBur+ZvNpuvMSrXWZd6jub4WepjsRwVpNNyKitS6T825oXSbl3dDqNONd8zvdmdf8hvdgCeU9RonhaM9vOFndmt9wVro1v2FvcWt+w37hzvyWm/xuzW94r9+a3/CuvjW/4f17a37D+/fW/M73r+XWulvzm96/28f8+ef5G094UtneQx8/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6Q3v2hvTG961N6Y3vGv70x+Gd+2N6S3v2u4zhcPyru1Pb3nX9qe3vGv705vetd3pTe/a7vSmd213etO7tju96V3bmz6b3rXd6V3v2ux612bXu3Z6Zzl2ete7Nrvetdn1rs2ud212vWuL611bXO/a4nrXFte7dnpvN3Z617u2uN61xfWuLa53bXG9a6vrXVtd79rqetdW17t2emcwdnrXu7a63rXV9a6trndtdb1rET2fIb6nD0cBTt//3ShEG+eD0yfX0x+up8+upy+up6+upz8dT58QvYgPTh9cT+9516bN8K7t/jZp2gzv2hvTG961N6Y3vGtvTG9413Z/ozFthnftjekN79r+9MHwrr0xveFde2N6w7v2xvSWd23vmUJCdIU9OL3lXduf3vKu7U9vetd2pze9a7vTm961vemj6V3bnd70ru1Ob3rXdqd3vWsRPUUPTu9610bXuza63rXR9a6Nrnft7nrX7q537e561+6udy2iu+jB6V3v2t31rt1d79rd9a7dXe/a5HrXJte7Nrnetcn1rkV0Fz04vetdm1zv2uR61ybXuza53rWH6117uN61gP6c7RoobnUHTt//3ShAf86T02fX0xfX01fX05+epwf05zw5fXA9fXQ9/e56ete7Nhvetf3fJs2Gd+2N6Q3v2hvTG961N6Y3vGv7v9FYDO/aG9Mb3rU3pje8a29Mb3jX3pje8K69Mb3lXdt9plAs79r+9JZ3bX96y7u2P73pXdubvpretd3pTe/a7vSmd213etO7tju96V3bnd71rq2ud211vWur611bXe/a0/WuPV3v2tP1rj1d71pAd9GT07vetafrXXu63rWn6117et61x+Z51x6b5117bJ537bF53rXH5nnXHpvnXXtsnnftsXnetcfmedcem+tdG1zv2uB61wbXuzb43LWv/+v/+/P//Jc//1//+s///voT//n//H//8t//+i//9pcf/+df////8V//n7/9Lw==" }, { "name": "pubEntryPoint", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "initValue", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "initValue": [{ "start": 39, "end": 40 }], "inputs": [{ "start": 0, "end": 37 }], "targetContract": [{ "start": 37, "end": 38 }], "targetSelector": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241] }, "bytecode": "", "debug_symbols": "" }, { "name": "enqueueCallsToPubEntryPoint", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetValue", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }], "targetValue": [{ "start": 35, "end": 36 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389] }, "bytecode": "H4sIAAAAAAAA/+2dBXRcRRfH7zZJm7b0o7jDpi1WbHdjGzRYsWLFrWWz2UBo6qlQrFixYsUKfECB4u7u7u5Q3N217Tf/ZiaZfVmaA3tnz85335xzz6zOu7+ZO/P+z2ZOjRBdqwwJWTdlJcqi1vtS/dq8Lwu87x74fXng/SKB94sF3i8ReL9U4H008L6ffm8njUD1Oq+M1VRVZWoTmXhlPBVL1DUkq2NV1Q01yXgyXp2sbkwkKyszyapkbV1DXW2sLl5VmYk3VddVNsXa0gCrrFieKWLVCVKFsrmaA3l/nQ8Qkq+pbGXdZna9rCysHnLVyyrU1v9MPNspGOOx/FKcsayY7e+q1DZGIHXP4b9JJTlel1u/m8vMam8r6EvfHH52aoN6RmdcNOaqDspdjfgGVVfcq/G3UThoU+fBaXXqPGivLqwectXLQMoeVCKUPbgR8cd9BV9ZMVc+9vPAx/7kZie4hrI++nW59Xk91/aqYlXzd66lbWUF4w3b7Ma/zVi5tS22clU79FBl9NBl9cY2NJdh6Gt9FrEYSx34Euy/9dZ7s71e1NG+o1Pp4RuP3W/8iMzI1nF2EJgf25/Zg4SBK8nxnf2fEqtiygJl97bKMd/1JMfqxaRuzGUPJD61sQafXzE0QHfqnLhHowjxj5icMVCXqaxOxpIZl3Uw0FEdcPsZ9cTPMirumDLJHvzMyAp1tZaytZWtg20owwCUUFaprEpZtbIaZbXKktR2CI3kZq8br7T3usExAeNhxOyldB7Vn5u9V0ng81L9vtTau80/zabfl1mf24O98WH+3pKyt9m742vqZn1mdhAl1meGodT6zOyJzbbxfnn9mZO9blWsptzyj63cWKyx3OJhLLf9CJF0Hdbb9WbVVU/TNsS7nyi3yo1Y2zGfl1qvl7N+a35n6sPEk/F9IeqIiZ4L+F9p4H99rN90z8FfT7z8PQL+9Aj4jDYwp3WQdy/t8NP41ovft8belD32mPqjgL8m9XJcVyh/GV1WZuSY8ZnxmR3GN7Q0pweNH5lubR41ctNUS4s9+Brn+wScD6pS8709CHazXtsSutR6XWa9tv/bI8dnuRIq2K4081lv/bqn9Znxp5f1ma2mze+dqeUSyq4Uk7j38mtRUe/l4+aFXRd1Ol+XOhr974LJ1Jn5DAE1L/CdySPW/+dZ/8n1m8jflNM7hx99c3zmLHAMLCppdmAbJczbsoPnXx52JfRhV7wu/7LaD+HWJTdBzX3Yysm8Xo6yGmLpxup4Q01jbTyTqk6m03WV8XgiVZOqaUgkmzIN1fFkdVKVmU4lkmpziVQ6nomlajKFupK0Hl9ZWSfR1qfwSlKXzrhozPUdlLsBFfeVJHBvwN9GOX3lGBg3cFDu1IibAZdrh2X85IylDYkvhjjrzwgA+Feh67AQSnJtchMDxOtnwq6LjayyQyWZndqVJCppjgVfT3+/J+Xath1M/7ajZpra0kbE1+nryU2QcytLTuaNrbLiycpEorYSv0s2xuJVjelEMpFobKiKpWOpdCJTVxWva6pKVFWmG9MNqsxUvCnWlErXNSXb/CqUstyYeAdUkzahUFl26YyLxtzEQbmbUnErS3Bvyt9GTpRlvfaVu9zNiLcjY6DdjDpuWC6EMlqH3Ow0mOMiSxltrvNBFCqjYGpXRqgkWxkNIvfKyA6mfJXR5sTXUQeRmyDnVkaczFuQf8poC+IdUE3akkJl1KUzLhpzSwflbkXFrYzAvRV/GzlRRoO0r9zlbk28HRkD7dZUWGUUIzc7Dea4yFJG2+h8MIXKKJjalREqyVZGg8m9MrKDKV9ltA3xddTB5CbIuZURJ/O25J8y2pZ4B1STtqNQGXXpjIvG3M5BudtTcSsjcG/P30ZOlNFg7St3uTsQb0fGQLuDzs173EU8kwqnlKrIzU6EKU5y3qe1o86HUKiUOlWYgUUlzbbgUVnRwDa5lZIdTPnet7Uj8XXcIeQmyLmVEifzTjnKKvb7tnYi3gHWpJ0pVEpdOuOiMXd2UO4uVNxKCdy78LeRE6U0RPvKXe6xnty3xRlLuxJfDHHWnxEA8K+CCqcsq8lNDBCvn1nn4HbT+e4UKstgaleWqKQ5gW1wK0k7ePI957Yb8XXy3clNUHMrSU7mPci/c257EO8AatKeFCrJLp1x0Zh7Oih3LypuJQnuvfjbyImS3F37yl3u3sTbkTHQ7k2FvRpZQ252GsxxkaWE9tH5UAqVUDC1KyFUkn01cii5vxppB1O+ymgf4uuoQ8lNkHMrI07mYeSfMhpGvAOqSftSqIy6dMZFY+7roNwUFbcyAneKv42cKKOh2lfuchuItyNjoG2gwiqjWnKz02CKi5xXH9M6b6RQGXWqMAOLSrKvPqKyooFtcisjO5jyvfqYJr6O2khugpxbGXEyZ8i/q48Z4h1QTWqiUBl16YyLxmxyUO5+VNzKCNz78beRE2XUqH3lLvd4T64+csbS/sQXQ5z1ZwQA/Kug7MS9A4sw1uea5CaGuPv7ugzM1fF0qraptnJBbZNvfUYZmX0RVFHG+mtm7idgRZlRyk7cdcA5g3aS/OiThbpInG99Ms7EHC/U6d98mSOMzAmBzHEqTB/Ml/kABj/N7PLwzZ5lGmWbgzHkg3Q+WOeY3HW4ZsL/nrQY51p5pc6HUPYaLmU6j+p8IMle0ybMwzzMwzzMs3OsKNNCHfsZe9kefD9c5y06X1TZCMpO3Hq/P/Htw0cS7zHPgtbPG+lJm3PlOL8xijpiJ6rrZZSweshVL6MpXD8vl4/9PPCRcczIuogzhsL18/5BCtfPC35n/0fM+nmjiU8NjOHzK1w/T6dCrJ832lEdcPvZ7ImfPq+fN1bZOGWtysYrm6BsorJJyg5UNlnZQcoOVnaIskMpXD/PfGZ2EOH6eeH6eeH6eeH6eUjh+nn0f7p+3jgq6r18zjujD9P5FArvjO5UYQYWlTQ7sA3uO6Ht4Mn3TujD8i+r/RBuCrkJau7DVk7mw3OUVex3Qh/OV1bWSbQjKLwTuktnXDTmEQ7KPZL4Ookr7iP528jJndBTtK/c5U7z5E5ozlg6ivhiiLP+jACAfxVUuGfsWslNDBCvn1mzDxyt86kUKslgaleSqCR79oGp5H72ATuY8p194Gji6/RTyU2QcytLTuZjrLJ8mX3gGOIdUE06lkJl2aUzLhrzWAflHkfFrSzBfRx/GzlRllO1r+zP2BFvR8ZAezwVdvaB8eRmp8EcF1nK6ASdT6NQGQVTuzJCJdnKaBq5V0Z2MOWrjE4gvo46jdwEObcy4mQ+kfxTRicS74Bq0kkUKqMunXHRmCc5KPdkKm5lBO6T+dvIiTKapn3lLvcU4u3IGGhPocIqownkZqfBHBdZyuhUnU+nUBkFU7syQiXZymg6uVdGdjDlq4xOJb6OOp3cBDm3MuJkPo38U0anEe+AatLpFCqjLp1x0ZinOyj3DCpuZQTuM/jbyIkymq595S73TOLtyBhoz6Ts9fNwF/FMKpxSmkxudiJMcZLzPq2zdD6DQqXUqcIMLCpptgWPyooGtsmtlOxgyve+rbOIr+POIDdBzq2UOJnPzlFWsd+3dTbxDrAmnUOhUurSGReNeY6Dcs+l4lZK4D6Xv42cKKUZ2lfuck/y5L4tzlj6L/HFEGf9GQEA/yqocMryIHITA8TrZ9Y5uPN0fj6FyjKY2pUlKsn1+nl28OR7zu084uvk55OboOZWkpzMF5B/59wuIN4B1KSZFCrJLp1x0ZgzHZR7IRW3kgT3hfxt5ERJnq995S73IuLtyBhoL6LCXo08mNzsNJjjIksJXazzWRQqoWBqV0KoJPtq5CxyfzXSDqZ8ldHFxNdRZ5GbIOdWRpzMl5B/yugS4h1QTbqUQmXUpTMuGvNSB+VeRsWtjMB9GX8bOVFGs7Sv3OVeTrwdGQPt5VRYZXQIudlpMMVFzquPV+j8SgqVUacKM7CoJPvqIyorGtgmtzKygynfq49XEF9HvZLcBDm3MuJkvor8u/p4FfEOqCZdTaEy6tIZF415tYNyr6HiVkbgvoa/jZwooyu1r9zlnuLJ1UfOWLqW+GKIs/6MAIB/FZSduHdgEcb6HEtuYoi7v09hYC7E+nmc67/5IqiaGevvOuZ+AlaUGaXsxF0Hoxnr4FDyo08W6iJxMa2fV6jTv8W0ltwkgcwTGZnhV6516abqfJrOp+sck6ZeT239dUHr0h2o8xmUvTaKWZeuWeejSfZaMWEe5mEe5mGenWNduhuoYz8TXJfuep3foHOsS3ej9Rukep3H8kvz1+BejfjPkdxEfhxDcTLf7Akz53mMWzxh7sbIfKsnzCWMzLd5wlzKyHy7J8xljMx3eMLcnZH5Tk+YV2FkvssT5gGMzHcLZL5HIPO9Apnv84T5Jkbm+wW28wMCmR8UyPyQQOaHBTI/IpD5UYHMjwlkflwg8xMCmZ8UyPyUQOanBTI/I5D5WYHMzwlkfl4g8wsCmV8UyPySQOaXBTK/IpD5VYHMrwlkfl0g8xsCmd8UyPyWQOa3BTK/I5B5tkDmdwUyvyeQ+X2BzB8IZP5QIPNHApk/Fsj8iUDmTwUyfyaQ+XOBzF8IZP5SIPNXApm/Fsj8jUDmbwUyfyeQ+XuBzD8IZP5RIPNPApl/Fsj8i0DmXwUy/yaQ+XeBzH8IZP5TIPNfApnnCGSeK5B5nkBmishjjghk7iaQuUQgc6lA5jKBzN0FMvcQyFwukLmnQOZeApl7C2ReSCBzH4HM/xHIvLBA5r4CmRcRyLyoQObFBDIvLpB5CYHMSwpkXkog89ICmZcRyLysQOblBDIvL5B5BYHMKwpkXkkgc1Qgc4VA5n4CmfsLZB4gkHllgcyrCGReVSDzagKZVxfIPFAg8xoCmdcUyLyWQOa1BTKvI5A5JpA5LpA5IZC5UiBzlUDmaoHMNQKZawUyJwUy1wlkXlcg83oCmdcXyLyBQOYNBTJvJJC5XiDzxgKZNxHIvKlA5s0EMm8ukHmQQOYtBDJvKZB5K4HMWwtk3kYg82CBzNsKZN5OIPP2Apl3EMi8o0DmIQKZdxLIvLNA5l0EMu8qkHk3gcy7C2TeQyDzngKZ9xLIvLcnzCMYmffxhPlGRuahAmN7mEDmfQUypwQyNwhkTgtkbvSEOcrInPGE+TpG5iaBsb2fQOb9BTI3C2Q+QCDzcIHMLZ4w92BkHuEJczkj80hPmHsyMo/yhLkXI/NoT5h7MzKP8YR5IUbmsZ4w92FkHucJ838YmVs9YV6YkXm8J8x9GZkneMK8CCPzRE+YF2VknuQJ82KMzAd6wrw4I/NkT5iXYGQ+yBPmJRmZD/aEeSlG5kM8YV6akflQT5iXYWQ+zBPmZRmZp3jCvBwj8+GeMC/PyHyEJ8wrMDIf6QnziozMR3nCvBIj89GMzKooKtFlDbD4I7oO8F2psjJl3ZXhPD3OW+M8Ls5r4jwfznvhPBDOi+A8AY6bcRyJ4yocZ0B3Q4dCl0GnYL+N/RjGdYxz6PfoB4gL1FNUWYWyfsr6Wz69qPObld2i7FZltym7Xdkdyu5Udpeyu5Xdo+xeZfcpu1/ZA8oeVPaQsoeVPaLsUWWPKXtc2RPKnlT2lLKnlT2j7Fllzyl7XtkLevsvKXtZ2SvKXlX2mrLXlb2h7E1lbyl7W9k7ymYre1fZe8reV/aBsg+VfaTsY2WfKPtU2WfKPlf2hbIvlX2l7Gtl3yj7Vtl3yr5X9oOyH5X9pOxnZb8o+1XZb8p+V/aHsj+V/aVsjrK5yuZRW2NGlHVThjXisWY61hDHmtpYYxprLmMNYqzJizVqsWYr1jDFmp5Y4xJrPmINRKwJiDXysGYc1lDDmmJYYwtrTmENJqxJhDV6sGYN1nDBmiZY4wNrXmANCKyJgDUCMGc+5pDHnOqYYxxzbmMOaszJjDmKMWcv5rDFnK6Y4xRBijkwMSck5kjEnIGYQw9zymGONcw5hjm4MCcV5mjCnEWYwwdz2syf40UZ5gDBnBiYIwJzJmAOATxTj2fM8cw1nkHGM7l4RhXPbOIZRjzTh2fc8MwXnoHCM0F4RgbPjOAZCjxTgHvscc857sHGPcm4Rxf3rOIeTtzTiHv8cM8b7gHDPVG4Rwj3zOAeEtxTgXsMcM0d16BxTRbXKHHNDtewcE0H1zhwzh/nwHFOGOdIcc4Q59BwTgnnWHDOAcfgOCbFMRqOWaDhoWmh8aB5oAGwT8Q+AmMmxpBSq29tqPPldJ5OtbREW0dFU+PGZca2DhuRmjSsobl12LjmyRl83aJ/trzOU62tmRGjW+f/o7ExOrG5df/oqAmZsU0toybi+1n/rPgX/0nx/wM82ysn4LEBAA==", "debug_symbols": "7ZzdThtJFITfxdco6nP6n1dZ7QWbZSUkBFFgV1oh3j0DYdoGd3fJjuMx5b4KFt12fTXj8RfbnKfV7f3Xq8eb+7uH1eXTSmR1+cfT6uHb1d3LzYfHq++Pq0tzsbq++3v69/li9c/N7fXqUpN/vthaJz6/rZQkZW2KlaWqOb2tVet9WSw5V1an7OcM2Yh7t/rPi5Xop0xtj5XaWZ1Tu6y/mNr9SmovYS7Qq0nr3FpDNGbOLUbXkOJtZfVEVu45rte69Jraf8rU4VOmjrXUXrWkcSaiszvo+vwOGl0//WGfl+n4+Q/6DM2HyG+NK/mt9Zv5p8dQc5COsvQeQw7C4UJ5DOcNeBYkF2K5rIbsPkbS40fKIuWZmcXH/vKg832HsHEe2epdW1/6txusU8LK6mzmZrLk9dqJ8aUYO4qpF+NGMfVi/CimXkwYxdSLiaOYejFpFFMvJo9iqsVYM4qpFyOjmHoxXObrtBTjnL4r5gWWy2YBrDsnWC7rBLBcJglguewQwHIZH4Dlsrg+rOMyMwDLZVsAlsygyocL09v+eQuWzKD6sO6cYMkMqg9LZlB9WDKD6sOSGVQflsygurCezKD6sGQG1YflMigv5RsCU/AtWC6DArDunGC5DArAchkUgOUyKADLZVAAlsug+rCBy6AALJdBAdglDEpd+SZh1pQOB6vRzLAaXdiATbWPN+28OIcNtXSusjb6uZC48bGpmtcOLVeHsXSYVFGHvY+IgxvF1Ivxo5h6MWEUUy8mjmLqxaRRTL2YPIqpFhPNKKZejIxi6sWQSfLhihnm2yjGURWTvCvFRP+umBdYLpsFsFyGCmC5rBPAcpkkgOWywz5s4jI+AMtlcQCWy8wALJdtZeNn2KxhC9adEyyXQQFYLoMCsFwGBWC5DArAchlUHzZzGRSA5TIoAMtlUACWzKCCFNiNkV8zrDsnWDKD6sOSGVQflsyg+rBkBtWHJTOoLqwYMoUCtGQOBWjJJArQnpNFiXFHp1UzxZ4zmWg+Dh0U4xfIFHUjU5StTGGJTMmWTKmS6fjuoNOlr7yJO508upUpnWCmvESmYEqmKeDHTGIWyKTlwjH9vDXsU0QWyGTLV8Onn2PYyqQLZMq5HLvpYhW3Mh3/FUJfTqiSSc3WOS4LXMdVo64zJdtfnvL83kXWjS/qJ1tNomUsbcjvv9ZfvefufGDxo5tmN+HUu8l2vrhnn0E3Yf2HDCHZjTfIctinm3jq3cRyoZr+A+bflfMKUH8xdlIAwsYr0wlOJm+M9v48AI254b8V4KCz1RtDyXcE6A9Xl8aY8V1b6k5Xl8bI7l1JDjleXRrTsn9rpk8xflMa47JHM9KYlz2akcbA7NGMaBrNNJrJo5l6M9aMZhrNyGim0YyOZhrN2NFMoxlH1Ux/KKpYLq9FtFyuimi5/BPRcjklouXyREDruNwP0XL5HKLlcjREy+VdiNZx0XbHo4ojcylAS+ZSgJbMpQAtmUsBWjKX6tN6MpcCtGQuBWjJXArQkrkUoHVUtP1BqeK5XArRcrkUouVyKUTL5VKIlsulAG3gcilEy+VSiJbLpRAtl0shWrcALdkcdgmeq8SDjaOUEEYzjWbiaKbRTBrNNJrJo5l6M9GMZhrNyGim0YyOZhrN2NFMoxk3mmk0Mxy41QyXA/dnxUrk8lpEy+WqiJbLPwFt4nJKRMvliYiWy/0QLZfPIVp3VrRc3tWfoyqJy6UQLZdLIVoul0K0XC4FaDOXSyFaLpdCtFwuhWi5XArRurOiJXOp/oDRTOZSgJbMpQAtmUsBWjKX6tKqIXMpQEvmUoCWzKUALZlLAVp3VrTn5FJqju9SaFi7mrhApv6wdjVpiUzdYe1qjm8PaDC6ijnBTLJEpu6wdhVdIFN/WLuKXSBTf1i7ilsgU39Yu8rxXyHQsHaVBa7jn2QguUo89W4WG0iukk69GzCQPH+pHt1upp/70p77qq+6sr5kyPqCMV1jX0v+Up+WGvP8UHnD+eYj86U+SBRsqs/YRJtkn0266yaZdsV9NqV9Nu18nETtHgfqdVfeZ9fuh+p1l+y1a8eDNd347+r7zdVft9cP04aX3/179/Xx5v7u7ebj/99+/ub5Bw==" }, { "name": "enqueueCallToChild", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetValue", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }], "targetValue": [{ "start": 35, "end": 36 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319] }, "bytecode": "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", "debug_symbols": "7Z3dTttAEIXfxdcI7cz+Dq9ScZFSKiGhgCCtVCHevWvKrh083REhSmCyVyVi7Jzv1F4+Yss8Dbd3V6vNzd36cbh4GgCGi29Pw+P9aj2+fNysHjbDhTkbrtc/8r/PZ8PPm9vr4QKTfz5bzIGn10lIUGdTZEYRKb3OovW+DgMRM53IlwxkwG1NX54NgF8ytT1UamexpHaEH0ztPpLaQygFejRpyo0cojElNxicIMFbZjqT1T3Hadall9T+S6YOXzJ15FJDolDegCJIR3fA6fgOGF07/X7Py3T4/Hs9Q2kf+a1xNb+1fp4/vweavXRE0HoP2AuHq+PBeSOcBcmFWJfVQO5tJDx8JAKoZyaBj+3xgGXfIcyOI8vu2vrav52x5oTMNJnSDAFNs5lxLMb2YvhiXC+GL8b3YvhiQi+GLyb2YvhiUi+GL4Z6MWwx1vRi+GKgF8MX0833P8XoMl+HtRjncKuYEdadEqwuQxVgdVmnAKvLJAVYXXYowOoyvjas02VxAqwuMxNgddmWAKvMoOpVl3w9hBaw7pRglRlUG1aZQbVhlRlUG1aZQbVhlRlUE9YrM6g2rDKDasMqM6g2rC6D8lBvnfDOLGDdKcHqMigBVpdBCbC6DEqA1WVQAqwug2rDBl0GJcDqMigBVpdBCbDHMCh09RZLwpT2B4vRFFiMLsxgE3d505ZhCjO1dI6Zjb54aJxdNkXz0qHT1WGsHSZEqcPWJeLgezF8MaEXwxcTezF8MakXwxdDvRi2mGh6MXwx0Ivhi8FeDF+MMkneXzGuF8MXo8t8k3e1mOi3ihlhddmsAKvLUAVYXdYpwOoyyTZs0mWHAqwu4xNgdVmcAKvLzARYpwqWjC+whGEBq8ugBFhdBiXA6jIoAVaXQQmwugyqDUu6DEqA1WVQAqwugxJgdRmUAOt0wQaosLNnoRVYZQbVhlVmUG1YZQbVhlVmUG1YZQbVhAWjTKEEWmUOJdAqkyiBVplFCbTupGgP71FocuySyUTz9nGMYMIRMkWcZZrtvmSKx8iUbM2UmEyHlwfMC339FDefKrjIRJ8vE5hjZAqmZsoBF5ngCJmwLhz568VjUAHwCJlsvTc8fx3DIpM9Qiai+n+XF6u4yHT4nxA4HlA1E5rlMX6EdRwx4pQp2fZ4ovLhBeHsTv1k2SRYH9gbaPu+fnbPzScnQ/js3ZAtCxh5EroJ0936IdnZp0AUdukmfvZuYj0Z869UfqucEYDOWYJYAWimU+VR2udph234n2zTUgHTQpHX1svxUdfn+O43GjeiHTbiH/4obQS7bITv2yi/+L16uFl9v70e/xrF+L1f66vyxynyy82f+3/fef4L" }, { "name": "publicStaticCall", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "args", "type": { "kind": "array", "length": 1, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "args": [{ "start": 39, "end": 40 }], "inputs": [{ "start": 0, "end": 37 }], "targetContract": [{ "start": 37, "end": 38 }], "targetSelector": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241] }, "bytecode": "", "debug_symbols": "" }, { "name": "publicNestedStaticCall", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "args", "type": { "kind": "array", "length": 1, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "args": [{ "start": 39, "end": 40 }], "inputs": [{ "start": 0, "end": 37 }], "targetContract": [{ "start": 37, "end": 38 }], "targetSelector": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241] }, "bytecode": "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", "debug_symbols": "" }, { "name": "enqueueStaticNestedCallToPubFunction", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "args", "type": { "kind": "array", "length": 1, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "args": [{ "start": 35, "end": 36 }], "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321] }, "bytecode": "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", "debug_symbols": "7Z3dTttAEIXfxdcI7cz+Dq9S9SKlVEJCAUFaqUK8e9eUXTt42BEhSmCyVyRiHJ/vxLE/EuM8Dje3l6vN9e36Ybh4HACGi2+Pw8Pdaj3efdis7jfDhTkbrtY/88+ns+HX9c3VcIHJP50t5sDTyyQkqLMpMqOIlF5m0Xpfh4GImU7kSwYy4Lamv58NgF8ytT1UamexpHaEH0ztPpLaQygFejRpyo0cojElNxicIMFbZjqT1UeO06xLz6n9l0wdvmTqyKUmY2PZrBBI2rpDSIUz3ybfTr/f12U6fP69vkJpH/kj+po/+jDPn9eBZi/rAGytA/ayjhDrOlI0wqsguWk8BXKvI+HhIxFMLRH42B4PGF6GQ5htR5Z9aOuhPLKdsULgXvNkKuSMETLjWIztxfDFuF4MX4zvxfDFhF4MX0zsxfDFpF4MXwz1YthirOnF8MVAL4YvRpf5OqzFOIdbxYywumxWgHWnBKvLOgVYXSYpwOqyQwFWl/EJsLosrg3rdJmZAKvLtgRYZQZVP1zIb/vTAlaZQbVh3SnBKjOoNqwyg2rDKjOoNqwyg2rDKjOoJqxXZlBtWGUG1YbVZVAe6hk83pkFrC6DEmDdKcHqMigBVpdBCbC6DEqA1WVQAqwug2rDBl0GJcDqMigB9hgGhc5VWExpf7AYTYHF6MIMNnEfb9oyTGGmls4xs9EXD42zj03RPHdodXUYa4cJUeqw9RFxcL0Yvhjfi+GLCb0YvpjYi+GLSb0YvhjqxbDFRNOL4YuBXgxfjDJJ3l8x3XzfKMapKiZ5V4uJfquYEVaXzQqwugxVgNVlnQKsLpMUYHXZYRs26TI+AVaXxQmwusxMgNVlW2TK/5MjYVjAulOC1WVQAqwugxJgdRmUAKvLoARYXQbVhiVdBiXA6jIoAVaXQVGACju7ClaBVWZQbVh3SrDKDKoNq8yg2rDKDKoNq8yg2rDKDKoJC0aZQgm0yhxKoD0liQJzeItCk2OXTCaa15fhA+OOkCniLFOERSZ/jEzJ1kyJyXR4dcC8M6hva+YnCheZ4ifMlI6RKZiaKQdcZKIjZMK648i3F5e/zDGPkMnWk6Xz7RgWmeAImYjqc5d3VnGR6fBHCBw3qJoJzWIbhyPsxxEjTpmSbY8n8jXK7NT1ZNkkOAWh7RPd2UduXjEXXO/mzW78Z++GbNm5kyehmzCd2h+Snb0/RmGXbkLv5s1u4mfvJtadeP5zzW+VMwLQOUsQqexmaabh5dLb52mHZdgjPUyHGJgOMPmY/H28NPY5vntF40K0w0L8xSKlhWCXhfB9C+U7f1b316sfN1fjt1eMv/u9vixfZpHvbv7e/f/N0z8=" }, { "name": "compute_note_hash_and_nullifier", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "H4sIAAAAAAAA/+2YzW6DMAyATYECBbq/bmXrJnHcsUg99MhD7AWqDmm9tFNhe/xpuIuFoesuMwdLtRQlhBB/dkKwmQGABT9i18WFY6H7uann/5NMcK55n5yWEs6BEk5bkBPZJtDvPnV68Ks0o6uAcaiA0VPA6CtgDBQwjhQwhgoYIwWMsQLGsQLGCwWMlwoYrxQwXitgvFHAOFHAeKuA8U4B41SQ0WKMjmkndbmvy0NdZnVZmn4fGsmlGBbZGmN2Up5AWzA2GdCF0/TZxM36iH/A+ugfg+00NgzFbZgvcF5Pel6TKyTM/468/5c+85Mge18+OexZ2ouU75Eel/kqMG3BfysZ122ZEjCdYNaI2lM2lsaRP2hfE3sEzd4M/njO6TwXszHDX+zPQdZ+r8PjdZhdYwsKxkmJ0/ilyyb53wvnHcnP21pzt7MmpI+v+ZOpL0xfJL8OixDa5zHZzCVn7Yj5PpTnyXqy87CmsZnrC2TPkHHHV37HVzEbEzP/jXvwn8X00tx0TfrOzGfmU8whtN9x6uP3qR50bOHxFI0P4Pg8ETWIFPKAzzJweA8PVDxs8YPmQfPRGDFjaRHwoMUPDSa8mFBiwoYJESYcGNBPmY5TQS4PhEkeTf1s6pe3TZmud9tqv1pX6euuKNPtrko/yiJ9328+V1WB10UJ3zr8F0fqGgAA", "debug_symbols": "nZBLCoAgFEX38sYSEX3dSjR4mYEgKmpBiHtPixaQs/vhTE4AqRl6oZUDGqCumhboHMAZVHlwHq0H2owdAa62lKY6EtiF5M8aF5KhrgTqS6ChBBp/QqmdaAWukmct+TwU+yyl6i/zPvEG" }, { "name": "privateStaticCallNested", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "args", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "args": [{ "start": 35, "end": 37 }], "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474] }, "bytecode": "", "debug_symbols": "" }, { "name": "enqueueStaticCallToPubFunction", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "targetContract", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "targetSelector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "args", "type": { "kind": "array", "length": 1, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "args": [{ "start": 35, "end": 36 }], "inputs": [{ "start": 0, "end": 33 }], "targetContract": [{ "start": 33, "end": 34 }], "targetSelector": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320] }, "bytecode": "H4sIAAAAAAAA/+2dB3AcRRaG30qrYAuDycEGVrZJJm2StAKMZQwimWTgMMlmk0AgB2zJNibnnHM2Oeec7oDjEpeAy4kDjsuJy9E277e6pd7RgqrQa5Wm3nbVX70zu9vzvu6e7jczPd3tEaK9WQiIqljVrJizHTWf7XZNYLs28Pv6wPbage11A9vrB7Y3DGzHAtsTzLYbDAK1mTgVb06niy3JYiKVyMaTrblMUzzdlGvOJDKJpkxTIZlJpYqZdKalNdfaEm9NpFPFREdTa6oj3hsmOWnFhxgiTp4gNLJWGg7EE008SUm8HWsLU2ZuvmyhLB/K5cuW1Hv+2frshmAdjw8tJATTirv2bkW9bQRCbRn7bagu87ne+d1KYVb3WEFbxpaxc0AZtAka46Mwt/KQ7tYk16j64t5avowGNNraGulyjdM2NLDR3qaSLzSZShuVCA1sPKTr/UTy03hvyxpjPtc7+9ukjpeOJ1d3CtHSfCHnmFXyx4zXU38nI5Yul0Mdp1Fn0moAj+GyDGOdfRGHMerBlgiVdqptzrY93mjqL98F2fwJ0xYe2zO3OK97kVsQ9sfuPrdyV5XZZ+Ny/0HG1ATSbnDSsd+NIs+9rg1VwmlPJrlecls5u+Io/VoaGKRbo0ZBm33aOSEkdk4OiZ0xT3aSsJ0e0467jZ9tWeEVbM/agbUjjsGCEUlWipVmNbGaWS2sDPVe+iH46XUTKbfXDbYJaA/7eikTx8z+arNdHdgfNdtRp3dbfXvIbNc4+93G3tqAfbZ3ijj7bAdR5eyzHUS1s88yRJ19tie2x8b2eLPPS6+bjjfXO/aJpRuPF+odHsF0+65syORhm5tvTl6NsmVDsh5KvZNuxDmO3R91Po9zfmt/Z/PD1idr+xrUXydGfcr/ooH/jXF+U1uGv41k+esC9tQFbEYZ2NsRiGuj/XZa20bL21ZooNK2x+YfBey1YbTnvEL6G5u0ivNO7Cn2FA/syXV15tt75uW7O+fPm57t6nIbX2v8mIDxQa/Ufu82glXOZ9eFjjqfa5zP7n/ryuwrF5DBbqbZfQ3m8yhnn7VntLOv2vlsf+/NW66m0kyxQdqD2F4uLR8eRMJ+cPOi1cQ7UX+hf1Jlsnlm96FCrQp8Z+OI8/9VVP4yy/1cLp2GMnaMLbPPW8WxsMikdx14ZFYscMxq4WO7lekzXoYlzWVYonXoafVd0u1Efiq59GWsJPPOZdLKxfOFpkSuudCSKGabMvl8ayqRSGabs825ZKajmGtKZJoynGY+m8zw4ZLZfKIYzzYXh+uJyM5yaZXcVNuFKk9EBjXGR2Hu4iHdKTSyn4iAe4p8GZW1VaJhnOIh3WkRPw2uVIdl7ZSsS7uSXB2SzD/rAMC+RpOHw+FZ7kB+6gDJ2pl082Kqk3bFsywNfZ4lMmmFA99Gn9yTSh3brUyf9UQtdvSGqSR30reRn0ou7VlKMk9z0kpkUslkSwq/yxTiiXQhn8wkk4VcOp6PZ/PJYms60dqRTqZT+UI+x2lmEx3xjmy+tSPTa9dweZbTSLZBtWE3qniWgxrjozB385DudBrZniW4p8uXkRfPss3YKp3u7iR7IqOh3Z36B94Oh2e0I/npNITrRYlntIeJ26niGQVDn2eETHI9o3by7xm5lWmontEeJHeitpOfSi7tGUky70nh84z2JNkG1Ya9qOIZDWqMj8Lcy0O6e9PI9ozAvbd8GXnxjNqNrdLp7kOyJzIa2n1oeD2jOPnpNITrRYlntK+JZ1DFMwqGPs8ImeR6RjPIv2fkVqahekb7ktyJOoP8VHJpz0iSeT8Kn2e0H8k2qDbsTxXPaFBjfBTm/h7SPYBGtmcE7gPky8iLZzTD2Cqd7oEkeyKjoT3QxHYbo4qX0/B5Smny04kI1ZOy47YOMvFMqnhKAzLMwiKT3HFbyKxY4JjSnpJbmYY6busgkjtxZ5KfSi7tKUkyH1wmrZE+butgkm1gbTiEKp7SoMb4KMxDPKR7KI1sTwnch8qXkRdPaaaxVTrd6SEZtyVZlz5HcnVIMv+sAwD7Gmn4PMsm8lMHSNbOkntwh5l4FlU8y2Do8yyRSSsCx5D2JN3KM9R7boeR3Ek+i/xUamlPUpL5cArfPbfDSbYBteEIqniSgxrjozCP8JDukTSyPUlwHylfRl48yVnGVul0jyLZExkN7VE0vE8jm8lPpyFcL0o8oaNNPJsqnlAw9HlCyCTfnpBbeYbqCR1NcifmbPJTqaU9IUnmORQ+T2gOyTagNhxDFU9oUGN8FOYxHtLN0sj2hMCdlS8jL57QbGOrdLo5kj2R0dDmaHg9oRby02kI1YuyTxvzJi5QxRMakGEWFpnkPm1EZsUCx5T2jNzKNNSnjXmSO1EL5KeSS3tGksxFCt/TxiLJNqg2dFDFMxrUGB+F2eEh3WNpZHtG4D5Wvoy8eEYFY6t0unuE5GmjZF06juTqkGT+WQcA9jVSaZDuwBoF83M7Gp5Oe6h2ThDMv+GazmqozDFB5rA4ZzHB/OsUtMue30gzRqVBOg8kZ+POkJ9yl+7PZ4XEztmCZfNpdWioaTcKMicpHO1lRJA5IcgMu9zZm9GX2YscxO0mnmFiTJp6PJUGad/xBJJtG8H3pmMrOBpNnDLxTCpde+QEE8dMPJl0r8VSiStxJa7Elbg0xooyXdTbr7jrINn+5XgTd5l4HdZc8xtp/y9Gveu1SffH8ygc12eSzPNDwhwRZF4QEuYqQeYTQ8JcLci8MCTMUUHmRSFhrhFk7g4Jc60gc09ImLcUZF4cEuZJgsxLFDIvVch8kkLmZSFhnifIfLLCcj5FIfOpCplPU8h8ukLmMxQyn6mQ+SyFzGcrZD5HIfO5CpnPU8h8vkLmCxQyX6iQ+SKFzBcrZL5EIfOlCpkvU8h8uULmKxQyX6mQ+SqFzFcrZL5GIfO1CpmvU8h8vULmGxQy36iQ+SaFzDcrZL5FIfOtCplvU8h8u0Lm5QqZ71DIfKdC5rsUMt+tkPkehcz3KmS+TyHz/QqZH1DI/KBC5ocUMj+skPkRhcyPKmR+TCHz4wqZn1DI/KRC5qcUMj+tkPkZhczPKmR+TiHz8wqZX1DI/KJC5pcUMr+skPkVhcyfV8j8BYXMrypkfk0h8+sKmb+okPkNhcxfUsj8ZYXMX1HI/FWFzF9TyPymQuavK2T+hkLmbypk/pZC5m8rZH5LIfPbCpnfUcj8HYXM31XI/D2FzN9XyPwDhcw/VMj8I4XMP1bI/BOFzD9VyPwzhczvKmT+uULm9xQyv6+Q+QOFzL9QyPyhQuZfKmT+lULmXytk/o1C5t8qZP6dQubfK2T+g0LmPypk/pNC5j8rZP5IIfNfFDL/VSHz3xQy/10h8z8UMv9TIfO/FDL/WyHzfxQy/1ch8/8UMv9fIfMKhcwrFTKvUshMEX3MEYXMVQqZqxUyRxUy1yhkrlXIXKeQuV4h8yiFzKMVMjcoZF5DIfMYhcxrKmReSyHzWIXMaytkXkch87oKmddTyLy+QuYNFDJvGBLmuYLMGyks540VMm+ikHmcQubxCpk3Vci8mULmzUPCHBNkjoWEuVOQuVFh3Z6gkHmiQuZJCpm3UMi8pULmrULCXCfIvHVImOsFmbcJCfMoQebJIWEeLci8bUiYGwSZtwsJ8xqCzNuHhHmMIPMOIWFeU5B5x5AwryXIHA8J81hB5kRImNcWZE6GhHkdQeZUSJjXFWROh4R5PUHmppAwry/I3BwS5g0EmVtCwryhIHMmJMwbCTK3hoR5Y0HmnULCvIkg884hYR4nyLxLSJjHCzJPCQnzpoLMu4aEeTNB5qkhYd5ckLlNkJmTomqT1iSHP2LyAN9FWTWsWhbu0+O+Ne7j4r4m7vPhvhfuA+G+CO4T4LoZ15G4rsJ1Bvxu+KHwy+CnoN9GP4Z2He0cznucB6gXyKcYq5E1gTXRsekdE89nLWCdyFrIWsTqZvWwFrOWsJayTmItY53MOoV1Kus01umsM1hnss5inc06h3Uu6zzW+awLWBeyLmJdzLqEdSnrMtblrCtYV7KuYl3NuoZ1Les61vWsG1g3sm5i3cy6hXUr6zbW7azlrDtYd7LuYt3Nuod1L+s+1v2sB1gPsh5iPcx6hPUo6zHW46wnWE+ynmI9zXqG9SzrOdbzrBdYL7JeYr3MeoWFNeKxZvqrrNdYr7Ow5vIbLKzJizVqsWYr1jDFmp5Y4xJrPmINRKwJiDXysGbcW6y3TZlgzSmswYQ1ibBGD9aswRouWNMEa3xgzQusAYE1EbBGAObMf4/1PusDFubc/pCFOZkxRzHm7MUctpjTFXOcYs5PzIGJOSExRyLmDPyIhTnlMMca5hzDHFyYkwpzNGHOIszhgzltMMcL5jzBHCCYEwNzRGDOBFRwvFOPd8zxzjXeQcY7uXhHFe9s4h1GvNOHd9zwzhfegcI7QXhHBu+M4B0KvFOAMfYYc44x2BiTjDG6GLOKMZwY04gxfhjzhjFgGBOFMUIYM4MxJBhTgTEGeOaOZ9B4JotnlHhmh2dYeKaDZxy454974LgnjHukuGeIExf3lHCPBfcccA2Oa1Jco+GaBT48fFr4ePB54AOgT0QfsbrNjPS3cQhTTTzOxPlsV1ese34su2hRcWH3nLnZpXNynd1zFnUuK+LrLvOz8SbOdncX5y7oXv2PQiG2pLP7uNj8xcWFHV3zl9DHRNtYF6FBAQA=", "debug_symbols": "7Z3dTttAEIXfxdcR2hnv3+RVql6klEpIKCBIK1WId++asmsHDzsiRDFM9opEWdvnO9ibj9g4j93N7eVmd327fejWjx1At/722D3cbbbD04fd5n7Xrc2qu9r+TD+fVt2v65urbo3RPa1m48DRy0iIUMbGwAxFpPgyFnvnymAgYkZHcjkDGbB7o7+vOsAvmbo/VWrbY05tCT+Y2n4ktQOfC3Ro4pgbOURjcm4wOEKC65nRiaysOYxjbXxO7b5kav8lUwcuNbmyDHnvpL3b+5g502Ny9fTHPS7j6fMf9QilY+QP6Er+4Pw0f9oGmqNsA7C2DTjKNnwo24jBCEdBtOPw6Mm+joSnj0QwtkTgQn24R/8y2PvJftSzq+4d5DX3E1bw3DFPJqcmoHFsYhyK6VsxfDG2FcMX41oxfDG+FcMXE1oxfDGxFcMXQ60YtpjetGL4YqAVwxfTzPeNYnSZr8VSjLW4V8wAa88JVpehCrC6rFOA1WWSAqwuOxRgdRlfHdbqsjgBVpeZCbC6bEuAVWZQ5axLOh9CM1h7TrDKDKoOq8yg6rDKDKoOq8yg6rDKDKoK65QZVB1WmUHVYZUZVB1Wl0E5KJc2OWtmsPacYHUZlACry6AEWF0GJcDqMigBVpdB1WG9LoMSYHUZlACry6AE2CUMCq0tsBjj8WAxmAyLwfoJbOROb/ZUICdqaS0zNrjsoWFy2hTNc4dWV4ehdBgRpQ5rp4i9a8XwxfhWDF9MaMXwxcRWDF8MtWLYYoJpxfDFQCuGLwZbMXwxyiT5eMXYVgxfjC7zjc6WYoLbK2aA1WWzAqwuQxVgdVmnAKvLJOuwUZcdCrC6jE+A1WVxAqwuMxNgrSpYMvkf7ZHQz2B1GZQAq8ugBFhdBiXA6jIoAVaXQdVhSZdBCbC6DEqA1WVQAqwugyIPBXZye7AMa88JVplB1WGVGVQdVplB1WGVGVQdVplBVWHBKFMogVaZQwm0yiRKoD0niwJjT06LJsXOmUwwr29QCMYtkCngJFOAWSa/RKbYl0yRyXR6d8A09ZXPNdPOg7NM8RNmoiUyeVMypYCvM4FZIBOWiSM9nt0YFAAWyNSXq6XT4+BnmXCBTETld5cmqzDLdPp3CBx2qJIJzWwfhwXmccSAY6bY14dHyp9dEE6uXY89mwTHILR/pTu75uq9hMF99m6ozxNYSiV048fr133sJx8CkT+kG9+6ebOb8Nm7CWWiSn+Aub1yBgC6YAkC5amEJqqZb7x9EQ9Yhn2HhXEahXESTe8734cbY1/guzc0LEQHLMTfKlJaCA5ZCN+3UHryZ3N/vflxczV8d8Xw2u/tZf4qi/R09/fu/ytP/wA=" }], "events": [], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n", "path": "std/collections/bounded_vec.nr" }, "20": { "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n", "path": "std/field.nr" }, "77": { "source": "use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "82": { "source": "use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "87": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "94": { "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr" }, "98": { "source": "use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr" }, "99": { "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr" }, "105": { "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, constants::RETURN_VALUES_LENGTH};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr" }, "130": { "source": "use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{\n    GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH,\n    CONTENT_COMMITMENT_LENGTH\n},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr" }, "131": { "source": "pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr" }, "132": { "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr" }, "144": { "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr" }, "148": { "source": "use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address\n    );\n\n    assert(address.to_field() == 0x2fd71a4f0742364f194dd16d0ae32d2f47845ddc7f5d328f37d4148b565c4123);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    assert(address.to_field() == 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr" }, "150": { "source": "use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr" }, "153": { "source": "use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr" }, "155": { "source": "use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr" }, "163": { "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr" }, "167": { "source": "use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr" }, "168": { "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr" }, "182": { "source": "use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x19196a5f02621a64ce289fb09fada7fd650a6874cb63e7d10c0d9a9bf5a366f5;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr" }, "183": { "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0xedd2f10c0cdf776ee2fff3c799bae6df5771f5013a2d5d7154601dffdcf869;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x1cec0b51f9394405a626c3b77081c96f1bdcb8bacf96960ae4749068f9b4da0d;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr" }, "185": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr" }, "188": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr" }, "191": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr" }, "192": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    read_request::ReadRequest, side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    min_revertible_side_effect_counter: u32,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x2b5ba01a6b73b68b4f44196e2dea49afd4076333e2dee8eddc9186e080f18201;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr" }, "193": { "source": "use crate::{\n    address::AztecAddress, constants::{GENERATOR_INDEX__SIDE_EFFECT},\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr" }, "196": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr" }, "197": { "source": "use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr" }, "199": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::FunctionLeafPreimage;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr" }, "200": { "source": "use crate::{\n    constants::{NUM_FIELDS_PER_SHA256, CONTENT_COMMITMENT_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::{arr_copy_slice}\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: [Field; NUM_FIELDS_PER_SHA256],\n  in_hash: [Field; NUM_FIELDS_PER_SHA256],\n  out_hash: [Field; NUM_FIELDS_PER_SHA256],\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array([self.tx_tree_height]);\n    fields.extend_from_array(self.txs_effects_hash);\n    fields.extend_from_array(self.in_hash);\n    fields.extend_from_array(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n    let mut offset = 1;\n\n    let txs_effects_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let in_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let out_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: [0; NUM_FIELDS_PER_SHA256],\n      in_hash: [0; NUM_FIELDS_PER_SHA256],\n      out_hash: [0; NUM_FIELDS_PER_SHA256],\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr" }, "202": { "source": "global ARGS_LENGTH: u64 = 16;\nglobal RETURN_VALUES_LENGTH: u64 = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_NOTE_HASHES_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as note hashes and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_NOTE_HASHES_PER_TX ≥ MAX_NEW_NOTE_HASHES_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_CALL: u64 = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: u64 = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: u64 = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: u64 = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: u64 = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: u64 = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: u64 = 16;\nglobal MAX_NOTE_HASH_READ_REQUESTS_PER_CALL: u64 = 32;\nglobal MAX_NULLIFIER_READ_REQUESTS_PER_CALL: u64 = 2; // Change it to a larger value when there's a seperate reset circuit.\nglobal MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL: u64 = 2;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: u64 = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_TX: u64 = 64;\nglobal MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX: u64 = 8;\nglobal MAX_REVERTIBLE_NOTE_HASHES_PER_TX: u64 = 56;\n\nglobal MAX_NEW_NULLIFIERS_PER_TX: u64 = 64;\nglobal MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX: u64 = 8;\nglobal MAX_REVERTIBLE_NULLIFIERS_PER_TX: u64 = 56;\n\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: u64 = 8;\n\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 8;\nglobal MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 3;\nglobal MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 5;\n\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 16;\n\nglobal MAX_PUBLIC_DATA_READS_PER_TX: u64 = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: u64 = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: u64 = 16;\n\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: u64 = 2;\nglobal MAX_NOTE_HASH_READ_REQUESTS_PER_TX: u64 = 128;\nglobal MAX_NULLIFIER_READ_REQUESTS_PER_TX: u64 = 8; // Change it to a larger value when there's a seperate reset circuit.\nglobal MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX: u64 = 8;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: u64 = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: u64 = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: u64 = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: u64 = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: u64 = 3;\nglobal FUNCTION_TREE_HEIGHT: u64 = 5;\nglobal NOTE_HASH_TREE_HEIGHT: u64 = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: u64 = 40;\nglobal NULLIFIER_TREE_HEIGHT: u64 = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: u64 = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: u64 = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\nglobal NULLIFIER_TREE_ID = 0;\nglobal NOTE_HASH_TREE_ID = 1;\nglobal PUBLIC_DATA_TREE_ID = 2;\nglobal L1_TO_L2_MESSAGE_TREE_ID = 3;\nglobal ARCHIVE_TREE_ID = 4;\n\n// SUB-TREES RELATED CONSTANTS\nglobal NOTE_HASH_SUBTREE_HEIGHT: u64 = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: u64 = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: u64 = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: u64 = 5;\nglobal ARCHIVE_HEIGHT: u64 = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: u64 = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: u64 = 35;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: u64 = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: u64 = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: u64 = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u64 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u64 = 32;\n// The following is used in immutable state variables to compute an initialization slot whose value is used to\n// determine whether a given variable has been initialized (by asserting that the value in the slot is 0).\n// The initialization slot is computed by adding the constant bellow to the variable's storage slot. This constant has\n// to be large enough so that it's ensured that it doesn't collide with storage slots of other variables.\nglobal INITIALIZATION_SLOT_SEPARATOR: Field = 1000_000_000;\nglobal INITIAL_L2_BLOCK_NUM: Field = 1;\n// 126976 = 31 * 4096;\nglobal BLOB_SIZE_IN_BYTES: Field = 126976;\n\n// CONTRACT CLASS CONSTANTS\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: u64 = 15000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: u64 = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: u64 = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\nglobal DEPLOYER_CONTRACT_ADDRESS = 0x0bffa876f07f9fe1802579dfef599810202f9c25b9a2f58921064a267d1ad1d3;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: u64 = 17;\nglobal MAX_NOTE_FIELDS_LENGTH: u64 = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: u64 = 23;\nglobal MAX_NOTES_PER_PAGE: u64 = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: u64 = 212;\n\n// LENGTH OF STRUCTS SERIALIZED TO FIELDS\nglobal AZTEC_ADDRESS_LENGTH = 1;\nglobal CALL_CONTEXT_LENGTH: u64 = 7;\nglobal CONTENT_COMMITMENT_LENGTH: u64 = 7;\nglobal CONTRACT_INSTANCE_LENGTH: u64 = 6;\nglobal CONTRACT_STORAGE_READ_LENGTH: u64 = 2;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: u64 = 2;\nglobal ETH_ADDRESS_LENGTH = 1;\nglobal FUNCTION_DATA_LENGTH: u64 = 4;\nglobal FUNCTION_LEAF_PREIMAGE_LENGTH: u64 = 5;\nglobal GLOBAL_VARIABLES_LENGTH: u64 = 6;\nglobal HEADER_LENGTH: u64 = 23; // 2 for last_archive, 7 for content commitment, 8 for state reference, 6 for global vars\nglobal L1_TO_L2_MESSAGE_LENGTH: u64 = 8;\nglobal L2_TO_L1_MESSAGE_LENGTH: u64 = 2;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH = 5;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: u64 = 6;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: u64 = 215;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: u64 = 210;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: u64 = 202;\nglobal STATE_REFERENCE_LENGTH: u64 = 8; // 2 for snap + 8 for partial\nglobal TX_CONTEXT_DATA_LENGTH: u64 = 4;\nglobal TX_REQUEST_LENGTH: u64 = 10;\n\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH: Field = 13; // 2 + FUNCTION_DATA_LENGTH + CALL_CONTEXT_LENGTH\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: u64 = 674;\nglobal NOTE_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal NUM_MSGS_PER_BASE_PARITY: u64 = 4;\n// NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP / NUM_MSGS_PER_BASE_PARITY\nglobal NUM_BASE_PARITY_PER_ROOT_PARITY: u64 = 4;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__NOTE_HASH = 1;\nglobal GENERATOR_INDEX__NOTE_HASH_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_NOTE_HASH = 3;\nglobal GENERATOR_INDEX__SILOED_NOTE_HASH = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\nglobal GENERATOR_INDEX__FEE_PAYLOAD = 30;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\nglobal GENERATOR_INDEX__AUTHWIT_INNER = 45;\nglobal GENERATOR_INDEX__AUTHWIT_OUTER = 46;\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/constants.nr" }, "208": { "source": "use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr" }, "209": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr" }, "285": { "source": "// A contract used along with `Child` contract to test nested calls.\ncontract Parent {\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector};\n\n    // Private function to call another private function in the targetContract using the provided selector\n    #[aztec(private)]\n    fn entryPoint(targetContract: AztecAddress, targetSelector: FunctionSelector) -> Field {\n        // Call the target private function\n        let return_values = context.call_private_function(targetContract, targetSelector, [0]);\n\n        // Copy the return value from the call to this function's return values\n        return_values[0]\n    }\n\n    // Public function to directly call another public function to the targetContract using the selector and value provided\n    #[aztec(public)]\n    fn pubEntryPoint(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        initValue: Field\n    ) -> Field {\n        let return_values = context.call_public_function(targetContract, targetSelector, [initValue]);\n\n        return_values[0]\n    }\n\n    // Same as pubEntryPoint, but calls the target contract twice, using the return value from the first invocation as the argument for the second.\n    #[aztec(public)]\n    fn pubEntryPointTwice(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        initValue: Field\n    ) -> Field {\n        let returnValue = context.call_public_function(targetContract, targetSelector, [initValue])[0];\n        let return_values = context.call_public_function(targetContract, targetSelector, [returnValue]);\n\n        return_values[0]\n    }\n\n    // Private function to enqueue a call to the targetContract address using the selector and argument provided\n    #[aztec(private)]\n    fn enqueueCallToChild(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        targetValue: Field\n    ) {\n        context.call_public_function(targetContract, targetSelector, [targetValue]);\n    }\n\n    // Private function that enqueues two calls to a child contract: \n    // - one through a nested call to enqueueCallToChild with value 10,\n    // - followed by one issued directly from this function with value 20.\n    #[aztec(private)]\n    fn enqueueCallsToChildWithNestedFirst(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector\n    ) {\n        let enqueueCallToChildSelector = FunctionSelector::from_signature(\"enqueueCallToChild((Field),(u32),Field)\");\n        let _ret = context.call_private_function(\n            context.this_address(),\n            enqueueCallToChildSelector,\n            [targetContract.to_field(), targetSelector.to_field(), 10]\n        );\n        context.call_public_function(targetContract, targetSelector, [20]);\n    }\n\n    // Private function that enqueues two calls to a child contract: \n    // - one issued directly from this function with value 20,\n    // - followed by one through a nested call to enqueueCallToChild with value 10.\n    #[aztec(private)]\n    fn enqueueCallsToChildWithNestedLast(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector\n    ) {\n        context.call_public_function(targetContract, targetSelector, [20]);\n        let enqueueCallToChildSelector = FunctionSelector::from_signature(\"enqueueCallToChild((Field),(u32),Field)\");\n        let _ret = context.call_private_function(\n            context.this_address(),\n            enqueueCallToChildSelector,\n            [targetContract.to_field(), targetSelector.to_field(), 10]\n        );\n    }\n\n    // Private function to enqueue a call to the targetContract address using the selector and argument provided\n    #[aztec(private)]\n    fn enqueueCallToChildTwice(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        targetValue: Field\n    ) {\n        // Enqueue the first public call\n        context.call_public_function(targetContract, targetSelector, [targetValue]);\n        // Enqueue the second public call\n        context.call_public_function(targetContract, targetSelector, [targetValue + 1]);\n    }\n\n    // Private function to enqueue a call to the pubEntryPoint function of this same contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueueCallToPubEntryPoint(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        targetValue: Field\n    ) {\n        let pubEntryPointSelector = FunctionSelector::from_signature(\"pubEntryPoint((Field),(u32),Field)\");\n        let thisAddress = context.this_address();\n        let _void = context.call_public_function(\n            thisAddress,\n            pubEntryPointSelector,\n            [targetContract.to_field(), targetSelector.to_field(), targetValue]\n        );\n    }\n\n    // Private function to enqueue two calls to the pubEntryPoint function of this same contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueueCallsToPubEntryPoint(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        targetValue: Field\n    ) {\n        let pubEntryPointSelector = FunctionSelector::from_signature(\"pubEntryPoint((Field),(u32),Field)\");\n        let thisAddress = context.this_address();\n\n        context.call_public_function(\n            thisAddress,\n            pubEntryPointSelector,\n            [targetContract.to_field(), targetSelector.to_field(), targetValue]\n        );\n\n        context.call_public_function(\n            thisAddress,\n            pubEntryPointSelector,\n            [targetContract.to_field(), targetSelector.to_field(), targetValue + 1]\n        );\n    }\n\n    #[aztec(private)]\n    fn privateStaticCall(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        args: [Field; 2]\n    ) -> Field {\n        // Call the target private function\n        let return_values = context.static_call_private_function(targetContract, targetSelector, args);\n\n        // Copy the return value from the call to this function's return values\n        return_values[0]\n    }\n\n    #[aztec(private)]\n    fn privateCall(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        args: [Field; 2]\n    ) -> Field {\n        // Call the target private function\n        let return_values = context.call_private_function(targetContract, targetSelector, args);\n\n        // Copy the return value from the call to this function's return values\n        return_values[0]\n    }\n\n    // Private function to set a static context and verify correct propagation for nested private calls\n    #[aztec(private)]\n    fn privateStaticCallNested(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        args: [Field; 2]\n    ) -> Field {\n        // Call the target private function statically\n        let privateCallSelector = FunctionSelector::from_signature(\"privateCall((Field),(u32),[Field;2])\");\n        let thisAddress = context.this_address();\n        let return_values = context.static_call_private_function(\n            thisAddress,\n            privateCallSelector,\n            [targetContract.to_field(), targetSelector.to_field(), args[0], args[1]]\n        );\n\n        // Copy the return value from the call to this function's return values\n        return_values[0]\n    }\n\n    // Public function to directly call another public function to the targetContract using the selector and value provided\n    #[aztec(public)]\n    fn publicStaticCall(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        args: [Field; 1]\n    ) -> Field {\n        let return_values = context.static_call_public_function(targetContract, targetSelector, args);\n\n        return_values[0]\n    }\n\n    // Public function to set a static context and verify correct propagation for nested public calls\n    #[aztec(public)]\n    fn publicNestedStaticCall(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        args: [Field; 1]\n    ) -> Field {\n        // Call the target public function through the pub entrypoint statically\n        let pubEntryPointSelector = FunctionSelector::from_signature(\"pubEntryPoint((Field),(u32),Field)\");\n        let thisAddress = context.this_address();\n        let return_values = context.static_call_public_function(\n            thisAddress,\n            pubEntryPointSelector,\n            [targetContract.to_field(), targetSelector.to_field(), args[0]]\n        );\n        return_values[0]\n    }\n\n    // Private function to enqueue a static call to the pubEntryPoint function of another contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueueStaticNestedCallToPubFunction(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        args: [Field; 1]\n    ) {\n        // Call the target public function through the pub entrypoint statically\n        let pubEntryPointSelector = FunctionSelector::from_signature(\"pubEntryPoint((Field),(u32),Field)\");\n        let thisAddress = context.this_address();\n        context.static_call_public_function(\n            thisAddress,\n            pubEntryPointSelector,\n            [targetContract.to_field(), targetSelector.to_field(), args[0]]\n        );\n    }\n\n    // Private function to enqueue a static call to the pubEntryPoint function of another contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueueStaticCallToPubFunction(\n        targetContract: AztecAddress,\n        targetSelector: FunctionSelector,\n        args: [Field; 1]\n    ) {\n        // Call the target private function\n        context.static_call_public_function(targetContract, targetSelector, args);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/parent_contract/src/main.nr" } } }
