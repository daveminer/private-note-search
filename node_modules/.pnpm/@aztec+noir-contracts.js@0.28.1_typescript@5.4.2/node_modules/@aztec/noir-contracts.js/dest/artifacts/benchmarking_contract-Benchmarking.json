{ "noir_version": "0.25.0+589a6cb62caf38445c768429150eee469ae35d77", "name": "Benchmarking", "functions": [{ "name": "compute_note_hash_and_nullifier", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "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", "debug_symbols": "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" }, { "name": "broadcast", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "owner": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "increment_balance", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "value", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "owner": [{ "start": 37, "end": 38 }], "value": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240] }, "bytecode": "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", "debug_symbols": "" }, { "name": "create_note", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "value", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "owner": [{ "start": 33, "end": 34 }], "value": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277] }, "bytecode": "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", "debug_symbols": "5VnbbhoxEP2XfUbIc7Nn+JUqDzRNJSREokArVYh/7y7EF8DKFlDKrniKNpyxj8+Ox8ez22b5+jzfLF5X62a2bcA1s2/bZv02X3WP6838fdPM3KR5Wf1o/+4mzc/F8qWZIfFucoYDsQ8kKCSshgoU0fQDiySSwGBWQatJ5GAO+Aj9NGkARska/xdrJoys2fBG1nQLawEfBRR0mnljbYnORd7gMC8ShCrodmVp5JCxrHvWPErWMkrWvsbajNP4EHqoG0hMQZ+Je3dFuoYhkdGbyYBjiuj2nX1O518zRZUz6zwk7jnb+DijGyFnGCHn6glmmjkT9g2fjib1UmC1do5ZiDuxPYehQO93F9LNbMwggR0e0ekm4K+eQL56An/7BF7yBNTzxgB8GprKjKwdQcoRq1qYFKimgrNofxAwV2Xojq7zkQOlHJYebPvfpCAKHiXZxQUfw0Pqbd7nquX7Xk6PhDpgCcEliwV7N12I2HG3kXBv3+kpd3JD5o6YhsbClNWTl4XjlmbxVhrhbqHwKAvFQS803ayBmPrKEaNLN1r2PUWaNZZ/oVz+ze1FoQcVJUDkEQqs1ayicci2sijQHC4v58QPqrdPV+bg+XO9wdJdHF1hQbr79eWCy6MmeIhZqy6c7voh++C7iTJks3o3UQZtP+8lyqB97YWiSLyroA/QIwoFS33PoqEqh2bItF5qU5++MNl2CNFp/YMLKqXrlno663S0cXBlXNUESjIDvmgadIf93jdO601A4ig0mZ6mCE7rXbi+ILgmCK8JoouDbFrv0AhF+STgSVp0Qf6aoGo19uTSriya9M7vntqn3/P3xfz78qX7lNf9+Gv1HL/stY+bP2+HX3Z/AQ==" }, { "name": "recreate_note", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 }, "visibility": "private" }], "param_witnesses": { "index": [{ "start": 34, "end": 35 }], "inputs": [{ "start": 0, "end": 33 }], "owner": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [7224, 7225, 7226, 7227, 7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247, 7248, 7249, 7250, 7251, 7252, 7253, 7254, 7255, 7256, 7257, 7258, 7259, 7260, 7261, 7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7270, 7271, 7272, 7273, 7274, 7275, 7276, 7277, 7278, 7279, 7280, 7281, 7282, 7283, 7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291, 7292, 7293, 7294, 7295, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7305, 7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314, 7315, 7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323, 7324, 7325, 7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335, 7336, 7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347, 7348, 7349, 7350, 7351, 7352, 7353, 7354, 7355, 7356, 7357, 7358, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367, 7368, 7369, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7400, 7401, 7402, 7403, 7404, 7405, 7406, 7407, 7408, 7409, 7410, 7411, 7412, 7413, 7414, 7415, 7416, 7417, 7418, 7419, 7420, 7421, 7422, 7423, 7424, 7425, 7426, 7427, 7428, 7429, 7430, 7431, 7432, 7433] }, "bytecode": "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rDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrDnWHGuONceaY82x5lhzrNlNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjV3jzXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZYc6w51hxrjjXHmmPNseZY83+9ZvfZu+A/u2O9gs/O+idXUE827ULuC5LOxGlqlivex9nnNfDm8T1vRtBZ4n1utuzseTPPh1gzv+YG3v9LvXoIObQvwpZfT5PA6tkpsHrqB1ZPncDq2TGwerYLrJ7GgdVTL7B6GgZWz/aB1bNzYPU0DayeBoHVUzewenYIrJ5GgdVTEkA99XKf3Seq5/2/1Hst26bc0XutVf7xDt5rrfOPG3mv7ZV/3NB7be/84+2919rkH2/nvdY2/7ix99o++cdNvNf2zT/eyXutXf7xzt5r7fOPm3qv7Zd/XMd7bf/847rea0n+cQPvNcs/3tN7rUP+cQvvtY75x1Xea53yj5t7r3XOP97Ne+2A/ONdvdcyb3wva+UfN/NeK8s/buW9Vp5/3Np7rSL/eC/vtdr5x3t7r1XmH7fxXsv6ra33WtZv+3ivZdsA+3qvZdu57bzXsv5t772WZWI/77UsO/t7r2UZS7zXsiya91qW2Q7ea1m2O3qvZbnr5L2W5a6z91qWu8wr13edd9j6/+z9PlPZ59TyXjugyOd1LlJX9tgfR7L3dM9hxxH/s7p7z7PPq+/V0TGQehoFVs8OgdVTN7B6GgRWT9PA6tk5sHq2D6yehoHVUy+wehoHVs92gdWzY2D11AmsnvqB1bNTYPU0Caye0iL1NCLVk22fZsvOnjcK4LP97f8DvNey7TF/G760yHuzbfNs/jp5PfUIevz9pmyqbj/eP6bqPwbVkzTIfXr/N1t+A7z2Dv6+4BfR7h9/2x5fT0d/P/SL1OMfv90OX4+RdH5y/rhhgaYGBZoa5D597CbT2ZCgs8T73GzZ2fOGng+xZn7Nrp763uOsrmy++oHUmL22HbeeDvUK6nFTdWOCf45pB3w9Hf3jXV+kHv+YPGN9TNKZuOVm2+dbctixr3FBXzUs6KsG3jz+OefGhP4r8T43W3b2PPu8WPO2qdkfV/wxOZtv+0BqzF5rxK2nQ72CetxU3VjjX3+wE76ejv6x+S9Sj399TxN8PUbS+ckYtXOBpsYFmhrkPn2OK9O5M0Fnife52bKz5zt7PsSa+TX7/PvnR7P5dgikxuw1/5o/Biv++cls+e5c55D8AO7qzcbJivznZvOXeX+zec5stHUZ5zTcWjtr2zL73Gz6otuWhP3xL71t6e+Ps/Z/CToT1rET11c7FvRVw4K+apD79PUUWQ07EvqvJPfp4xndvefZ58Wat03N7nnGur9tmc3XKJAas9e249bT4csea/P3Dwjbch39a0G+SD3+eo2xL0DSmRRbf+9YoMlff/vsENbfn+SySUE92fPs82LN26Zmn39/7PTrDaHG7DV/f5PBin+dW7Z8t114q7dtmY3l2bZlNn92HV2ZN8/TDbcu4/b8Y/86huy8S/2Cx27yr6Xzj8Gy1hXZZ2XLzp7v6NXgX7OZvZbV5l/juWPBa8zjJ4XbBdnzxl6NxbRktfnXtTYueI11HKHYsbLseROvxmJaCo8F+bz62xT/LV7rf46WrDb/HMNOBa/9N/dh6xfR4m+zNCxSt3/eNFuOz0hTb9nZa/51u9nf7Ppen6HsOmB/XM6uF/Yzm11X7B8byL6X6Gdkj/xj/3rq0vxj35PsXLjfB9l+s39cJLu+2L/GOru+2NeYjYv+NczZ/rh/rXM2jvrXRGf96187nfXb7t5rWf9mGrPz96zzVZnObNnZc39/nbB/3OHL7q9nNfjnHMu9ftuuSN2Max5KvM/Kll24LmngvVbB7UdD9GNt733/aZvA79eSHKdfywtqyT6vzJtnbf6f2/P6tqNfQ2lBf/j7mITtgU8djynPfXq9up3XH9k873rbdTt5/+/uacje56/7smVn76njvbdJwbKzviZst3X1664oqHtHr6Zsnve9moqtE7OxIVuGvy73z62wtkEL6ynU4ntQu2Ae379sns0FHhC2LT7xIFsHZh4UbluUefOUNNpak//erK7yAj3+don//cimeC0dqvPg3/V7uqrz4N/fLfX0Mj3Itjmq8yCbp36BB4W/+VDMg0xjM295GRsNvXMIpzba+p7s//522HYFr/0317n+PoY/NjPO5fq5KVxPFstNM35uOjL3kzJesnXFjkW0ZvPs7uWnqtFWjzJPGnvL2r/I/7Opum0Y8ne9P1n3Ztvzmb+7FPns3bxaQZ9t/meX5FvhbxCVeY/3a7R13sLfLsr6OqvdMZIx79de+L7tCt7XwJunWRH93XNY/Z/3OzHZ57nstPRyluWIOf40+5w+quP1UTaPf8wxGxv98arYMQ7WdsjnHePwz5v4+9Fu8o8zNShSd4MA6vaP4ZHPZ3Qstl2U+Z59nj8Gdi8Y7wnbNx2ZxyGzMS4b77crojWbp5fH4eHeeF6YKff/E4r8P5uqG+/Jv6VR7Xjvf3YI432/asb7rK+/7HjfpOB9IY73R3o5O8Eb71njT7PP6aNi471//j4bG/38F57fZx0L8o9XZMsu3Pf3j/v4xxdObbTtays8luKfu6ldME/23jJvnkHeOFuvyLz++S7md7qy48zZsrPn/vo9pGuw/O2S0vxfP6d+3SHktBa3Hw3Rj2Xe+/7TNXt+v6LXJX72/Vr8Y4bZPCMLtlMIfdvJr6G0oD/Ix+oT/7qhbFumXsFnl3nzXOKtW/1tne65z17/VN3xWd/vHQuWnfU14drAM/y6KwrqbuDVlM3zs4JjR4XncbOxIVuGv1/gayVoKXpeuVCL70Htgnl8/7J5xhV4QDgffkax49iF55D949jjCzwoPGZZWqDHP87lH8cmHPvpUJ0H/rVChcexi3mQzTOJfyzsjGL7a1ktxY5j3/QfjmMX82AbHcfuWJ0H1R3HLuZBNs9t28iDwuPYxTzI5vn1fziOXcyDTKN/HDsbn37j7S/st8PW9/jvz+U+fezRvzaJNaZ93nHsBl4NhdtC/rGO7DqC0txnr3ftntu2x7yzzy92zPuB/7Fj3sXOC2Xz/MHL2pz/cMx7cTzmXbS/v8wxkL98RY95z/Vytvi/eMzb/55C4e9s+t/B9495++fhs7pZxy8/b9/S/x5q4bUl/rbt9kXq3hbXf/6nuv31gN+fhdfglnrv8ffpWN+9qm57y9/vyOb52zY6Ps5ah3/e8XFfazbPGo/Z17yxvzB/7v8bi/w/m+Lx8S+2bthAOD7esOB9Ia4b1no52/hfOD5ebIwtdj602G8UZPz4Y2wI12765xqzxzsUqXuHAOr+MvsN9Qrm657jnjst3G8oPIb0qWus8p3J3m9grcM/b7+h2HniBjtsnXd777eXC/Pn/r97kf9nU9xv+GLrhuY7bJ23cIzP+vp/cb9hBy9nWY6Y3wf6vP0Gf4zN5vGP6WbjqD9/9h72b0H55x6zZdcrUmP2mv99oOyxf08Lwnf0P7Me8D30r8nP6q1dMI9/Diibp5033vq/n+hfi7+flxnW91D882/dc589R+Rrr10wj38O7t+/0+vpqldkXv93NkhjYwf/O1I5T0euQGs2+ff0Y91jo7zgs8u34WfXLvjs2tvws+sUfHadbfjZnzeubIvP/rzfTdgWn/153wstdn+Z0m1QT66gnlw19TQLrJ7Q7h8X2v3aQrsfWWj3t6oXWD1lgdVTHlg9od3PLrT7kYV2v7bQ7qdZGVg9od2PtVZg9YR2v8h4v+Pq6wntfqyh3X+5QWD1VARWT+3A6ikJoJ56uS9+f8/smK5/L8LsmGeZ91r2eyv+b4Vkv7dS4b2W/d5Kbe+1qtzWPslea5F/7N97c8/8Y/83dFp6j7O/rfKP/WvPWucf+9+zy+5p6R8Hre7+o/65tOyelv5v7WT3tPR/Vyfry2L34/R/yybrS/+3bLK+9H/LJutL/7dssr7cw3st68sq77WsL1t4r2V9uaf3WtaXft9mfenfLzTrS/9+oVlf+vcLzfrSv19o1pdtvNeybV//fqHZ9mfWt05rgyZb/5+9389s9jl+Zvcp8nlti9SVPfY5zd7TPYfl1P+s7t7z7PP8+2fuHUg9tQOrpyKwehoEVk/9wOppGFg9OwVWT5PA6mkaWD21AqunTmD1VAZWz3aB1bNDYPU0CqyenQOrpzywesoCq6deYPXUDaye7QOrp3Fg9ewYWD3NAqundBvWk+2PZstuW1CP++y98J/9yb1OWqOX22HgJ99rzY4XZNcsZvVnn1fmzVM3H8bsu4nZ61ld2T78Xp4/Wd9k85Z6y/Z9KvXmyf6/Jf964TK65/sa3if5eza0RC8339d7FvR1Vn9Lr6+zeRoX9HX2eq6gr1t7fZ31TzZvpfe4ew7Lwufd4y6Ezy52XaV/fNK/pgXudb7GQr+y5y29GrPX/Gvps+27jCG3fdVix6314seXDok/1mbZLKyjzJtn/x231tY6/9jlb5eC/vWPRft93hyu4f/6vPCa5Ox59nmuxuyYrn8cN6ttlyJ1+8eAS4voq1WwPLe/WV1/ZmOZ358dvP58ovHWfiKsSzr7tZXmintN4uKTnGXjVfa9gJYFn13mzXNwvl/c+1p4/+/uacje5zOXLTt7j/89+z0Llp19v4KwLvlkzM/0ZcvOPsfftsnqrJ37/PVCNk/3grpb5MB1f866KqulRZG+POwLrquyZdT39PvrC7iWzxmLC7W4earyj2sXzLOnpzeb56gCD/ZA1533wD8/192rZQ+vpmyebxV4kL2e1bVPgZ76np5s3lLvcZXXN6Xe+7L/Z9tmVQXLLckVz0DWn629+bJlVdfn2TwnFvQ5a739edv42edVejUBP7uDf6405/VRrqCebNrdq4ewPu3onx/+IvU09+qB85DfLifo/GTfKlt3o+9RvmtBX+1e0FcNcp/dHqn0XgPq/CTbzQvqyZ773x2LNfNrdvVkrPvXCWTztQykxuy1Pbx6GAw67dl5LP86lfO9/R7C9tkn38nNth+zdWxWh3/8I5tnReOttV3o7fdk//evxyjc39uW2zfZ8+zz6nt6/O0t1jq0dUE9rYv0xX/zswnHJRKSv59kNOOvcDvQ3xbP5hlbsB2YvZ7VlWXV3w7M+sbnnJFV0rZTR388y/ooq393r4+yea4p6KPmn9NHPj9Z3/jbOYztQH97BN1Hhd9Pz+r3rxfM5rmhoI92/Zw+2t3ro8J1COkYhvnXC2ZTddum/nENxvrUv1bxi9Tj9w/j+/D+daFfpB5/m4hxzat/PO2L1ON/J3NfUj27fIl69vXqaUeqZ98vUU87r572pHrafYl6shrcNmPh+ta9lrGxh/fav3+Lwnsty0gr77XMp72917K+KvVey+qtyv+t773mH68tPEbNYrAk959/k6K+p2UXbj1d/HpKc58+7uvzzzh/6a8/smOzexV8tr/u+ZN33Le99//uRfqw2DHl7D3+cd/WBcvevkBvdo4ZoNco+yv2f/24X35Zhb8x4++vZPMsLNC6H6Em1nlYp3X/Al/3LaI1m2eJdw7lr/nH/nqwnbesF4v8P5uqG+ey/nOaDa/5E3875JeV+WtFPrujVyvos83/7OwYbvY52etl3uNVHqPZfFl/ZH2d1e7GuST/2K+98H27FryvgTdPUkR/9xxWvxXUYwU1u+w86eXsRe/4BGM9XOLpLuwj/7tL2Tz+WLZvwfuy+f1zHplPtQvmyd5b5s3zasFYsj9a7+eMb1kt+3s1ZfOs3UbjG1xrgbeF6y1fazbP217u3vHGr8wzf/36ryL/z6YvOr51wGtOfOYzfzsU+exOXq2gzzb/s7PxLfuc7PUy7/EWb3zL5sv6I+vrrHY3vmVjhV974ft2KXhfA28eK6K/e44zvmfL7lBQs8vOe17O/uWNb4z9nmJjbuEY1MCbp6XXt4Xn1bP5/fEt46l2wTz+efVsnor8sd1sLIEfJ8iPbxnPhefV/d/py+apW1BTQqiJeY4hYzob39oV0ZrNs713bL1R/rG/X7yLt6yqIv/PpurGN38bYluPb/5nhzC+7dF467z/aZz6ouPbvgXvC3F8a+zlrMq71oq1/Waf00f+8ZFsnj28vm1X8L5i16xkPhVeP5G9t8ybZ++CsQR+jv5ztt/aFWjzmd+3oCbW9hvjeoTqtt98rdk8iZe7Dt74lXm2r7esHkX+n01x++2LjW/dqxnfCsepLzq+tSx4X4jjW2cvZz288Y31Wxb2OX3UzuujbJ7mXt8WnnPL5q9u+61dwXL87bcjCsYS+HmDz9l+y2rx95mzeY7eRttvjHMkxbbfih0fyObp6+XuOG/8yjxr6S3r9CL/z6a4/fbFxreB1YxvhePUFx3f2hW8L8Tx7QQvZ6f/F7bfCscgf3xr5fVt4bmfbH5/fMt8ql0wT/beMm+eIdtgW6nY+JbVsp9XUzbP0G00vsG1FnhbuP3ma83m+YGXu+He+JV55p9fuLTI/7Ppi45vhGPcic985m+x4+udvVpBn23+Z2fjW/Y52etl3uNLvPEtmy/rj6yvs9rd+JaNFX7the9rXvC+Bt48HYro757jjO/ZsjsW1PzJNY9ezi71xjfW9XIdPqeP/PML2Tz+d1baF7zvy5xf8M/pZvNcUTCW7I3Wmx/fMp6z/Lcv0OYzf3VBTfBzfvnxDa71c/ZPWxbRms1znZe7id74lXnmX5c7rcj/s6m68c3fhtjW45v/2SGMb7dVM74VjlNfdHzbpeB9IY5vk7ycTfPGN9b5hQ6f00f+NUvZPKW5rX1beH4hm98f3zKfahfM459fyOb5zTbYVio2vmW1JF5N2Ty/3UbjG1xrgbeF5xd8rdk8s7zcPeCNX5ln/vmFBUX+n01fdHwj7CMlPvOZv8X2zw7wagV9tvmfnY1v2edkr5d5j+d741s2X9YfWV9ntbvxLRsr/NoL39e+4H0NvHk6FtHfPccZ37Nldyqo2WVntpezBd74xvrOe8fP6SP//EI2T5X3Wnb9Yza/f6zZvzaSNS4Xjq/Fjhtmr/nbHuTvx3/qd2eyZRd+P96/5rB2wTz+tlU2z1PeOFuvyLz+bzx83veJWhS8xjyvkX1WtuzsefZ5/veJ/PVh4fuy71Lt6c3j/76wP0/2Xv+7LC8WrJ/g37fIf8/6y3x35GWvJv+9WV37FOjZht8d+eQ7HrsVaGlaREs2zxsF/cv43glJ66fueZit/1sX0ZrNs84bl//hrd8zn/zfW9lS5P/ZVN3637+OmnBMPvH3qQuvj/M/u71XK+izzf/sbP2ffY5/vjl7vNlb/xceK8j6Oqvd/+0Yv/bC97UoeF+D3Ge335jHgguvqdy3oGaXnXe9nG3ZBuv/XT6nj/59b1VvHv/7faxrtgu/b1j4fVo3T+Z/4TrAP2/+7+/l5n9wN7svY+F1EP53r7bF96b3KtCXPfe/N5295v8ufKHGwu8370iq9/N+K8u/j9r/4meXF3x2+Tb87NoFn117G372593fcVt8dr2Cz663DT+7QcFnN9iGn63CWBXqs9PtZrfcndCa0uW6zDTOfXqqbpvLvx8S4z7OdXNbf7P7u4OHf/P7wwf/sMSrK6v11tJP11qS+3Td2f/re6+Veo9ree8rK/JaRZHXKou8VrfIa/ULXnOTf//k7b3HDb3HO3rLaFSNjmweX2+tbfR67j/UkdXrcpVlxb//S7Yv7t8/OvNlJ++17POy+evkPptLKNiuiHaeIPe8Y8HzTgXPDy54fkjB80MLnh9W8PyogudHFzw/ruD58QXPTy54fkrB8zMKng8qeH52wfNzCp7/sOD58ILnFxY8v6jg+aUFzy8reH5lwfOrCp5fV/B8QsHzXxY8v6ng+W0Fz6cVPP9NwfO7C57/ruD5rILnfyh4/nDB8z8VPJ9f8PwvBc8XFzx/quD58oLnzxc8f6Hg+SsFz9cUPP97wfO3Cp6/V/B8Q8HzfxY8/7jgea2STz8vK3her+B5/YLnOxY8b1zwfNeC57sVPG9Z8LxVwfN9S7YOKtnf7vm/HZMDOnUafGCHwdbRBiYdup7epXPSqfPpB3SxLta5S+dBHbp07Di4S6cuB3Y9veuBSVfr1HGwndm5a8cz84OKW147wnLrNoeNe0kx3UnNJnOaE4LuemDd2VQK1g/0x+qRva6pJ21JGd9OIOMdCLq3F8k40B9DanZ+uI30bOPRHSh0PzK5X/7v/vm/bmqXH/srvf7pkP+/+182X/uSXK66vqyp5x2By9qvBOdLLS/f/oRmyXJY/7Np/5KtB6EqitSfTbWKPK705gP+SKkVfm5hLQ2L1PkZD7oDi2GYuX8JfrlJCQ4Slm4/faDl0lZe+5XgV15W8t8ZyDtUM5B38AbyjkXmS/LzdczP98kVg+QBH5nlzsAB/8v0+QHV9PkBXp8fWE2fH+j1eZci81l+vi75+VxdXfPeMMYXIzBxUEnYY4HT3Jmg++DAdbsxsGMOr/uQwHW7se0ggt87BL7D5saNgwm6dyTtsNUC19kNuJ4Aem07iuzwVgG9+BrQCwYrbmz8GoGVr4O3D53HbplVuU9P6O21dsBldQ/c+6rc/10li/a+R+DrRXeQ5xBC5ncKfL3otv+6EXTvLLJe7AnkEei17Rx4btzyuhNys4tIbg4F7sMjTxjtEnhu3AUUXXL43OwW+Ikyp/tQAi/NRbafgf5Yc4GTop0Iy60SYPsggu4WKvuIwIy3IJ4Udd8Y/eQ4bf7vgbmtx2sPK3Ic9qD8/w/zjuv2Ih8jPxi4rG8InhTtmsP6n02Hx5Oi/7kYhpmHE06KHhH4SVGn+wiRk6Ju5fUNwgZa75L/zkB+ZDUD+ZHeQH5Ukfm65Oc7yjtBdzR5wEdmuQ/xpGh1ff7Navr8m16ff6uaPv+W1+fHFJmva36+Y7yTon1JJ0WdJ70JTBwb+MFAp7kPQfdxoZ8czG39RgNS9/GB63Zj27EEv1sFvsPmxo3jCLpbixzE6wdcTwC9NmT/uT4rzX12Ypw0/P9d1pmfmgYnRcr9/122Fb7g98UJ+U74dsnWnSF/p6i0SJ9lr7n1c8+C/2V/S7z39/TeU2yeks9ZTr0idTQs8hptRygTe0LJp78y820PmmyqBf7sGpxxTQogtxOAG5bfLuGEHL0xjdR8InCQ9AOLWqbbaDmRsBLrlMOuxBgDbk+C7v6Bb6xV5ThfOToJqNsdYSvzanN96pbvfi/lq9j8CXzUvQPy6pyTBXbQTiYwfwpQt8t9We6zE7JfGX17Skn4NQ5A14gu0J0WOp4Q0DaB70m7I0b9CLrbiuxJfwe4kQj02tpuo1PHyI3Nmi7rVIEN9u8QWGkX+BjhBu9TCbrbi4wRpwFzCfTakP1H3vj596nyr+LGz2klnJzDrwM6GXj0ZaDAYD6QMKidHvdI7HQBKM8IfY+kyi2LENBE4BdqGF/iMpGtjUHAgRPotdlXcI9ksMBKbBDjFELgY4QbvAcTdHcWGSPOBOYS6LV1jnskEhs/Z5Zwcg7fI0GeI/muwGD+XcKgdhbQ7OxaCn+ZLO8HAfdGhwh4P4Tg/fcI3rtlVpG9R3J/toD3ZxO8P4fg/Tme9+h+cMtgXB/RJfCN2U+WRfC/q8jG7FAgn0CvretXcIf33MDHStd3jDHikMDHCKebMUZ0Exkjvg/MJdBr6xZ4bmqReOkuoJvBSw8RXs4D8gL02noEnpsyEi+HCehm8NJLhJdhQF6AXluvwHNTTuLlCAHdDF56i/DyAyAvQK+td+C5qSDxcrSAbgYvfUR4+SGQF6DX1ifw3NQm8XKMgG4GL31FeBkO5AXotfUNPDeVJF6OF9DN4KWfCC8jgLwAvbZ+geemDomXEwV0M3jpL8LLj4C8AL22/oHnpi6Jl1MEdDN4GSDCy/lAXoBe24DAc1OPxMtpAroZvAwU4eUCIC9Ar21g4LmpT+JlkIBuBi+DRXgZCeQF6LUNDjw3DUi8nCWgm8HLEBFefgzkBei1DQk8N9uReDlHQDeDl6EivFwI5AXotQ0NPDfbk3g5T0A3g5dhIrxcBOQF6LUNCzw3DUm8DBfQzeBlhAgvo4C8AL22EYHnphGJlwsEdDN4GSnCy0+AvAC9tpGB52YHEi8XCehm8DJKhJefAnkBem2jAs/NjiReLhbQzeBltAgvFwN5AXptowPPTWMSL5cJ6GbwMkaEl9FAXoBe25jAc9OExMvlAroZvIwV4eUSIC9Ar21s4LnZicTLVQK6GbyME+HlUiAvQK9tXOC52ZnEyzUCuhm8jBfh5TIgL0CvbXzguWlK4mWCgG4GLxNFeBkD5AXotU0MPDfNSLxMEtDN4GWyCC8/A/IC9NomB56bXUi83CSgm8HLFBFefg7kBei1TQk8N7uSeLlFQDeDl6kivFwO5AXotU0NPDe7kXiZJqCbwcvtIryMBfIC9NpuDzw3zUm83Cmgm8HLdBFergDyAvTapgeem91JvNwtoJvBywwRXq4E8gL02mYEnps9SLzcK6CbwctMEV6uAvIC9NpmBp6bKhIvs0RyMw6YG+TNG2cFnhuXmR6E8eaBwHW7MZah+/civFwN5AXotf0+8Ny0znHG2YcEdDO2S/4gwssvgLwAvTZk/6ne9bylQI3XlABrVDWqjUCN40s4AxJ85LwWV2gH1UBdWxJ+jdepBGoCrtCOqoGaIBCoiSqBuh5XaCfVQF0vEKgbVAI1CVdoZ9VATRII1GSVQN2IK/QA1UDdKBCoX6oE6iZcoQeqBuomgUBNUQnUzbhCu6gG6maBQP1KJVC34ArtqhqoWwQCNVUlULfiCh2oGqhbBQJ1m0qgpuEKPV01UNMEAnW7SqDuwBV6hmqg7hAI1K9VAnUnrtBBqoG6UyBQ01UCdReu0MGqgbpLIFC/UQnU3bhCz1QN1N0CgZqhEqh7YIWa7HVG9wgE6rcqgboXFyhTDdS9AoGaqRKo+3CBkr0e6j6BQP1OJVCzcIGSvR5qlkCg7lcJ1AO4QMleD/WAQKB+rxKoB3GBkr0e6kGBQM1WCdRDuEDJXg/1kECg/qASqIdxgZK9HuphgUDNUQnUI7hAyV4P9YhAoP6oEqi5uEDJXg81VyBQ81QC9SguULLXQz0qEKg/qQRqPi5QstdDzRcI1AKVQD2GC5Ts9VCPCQTqzyqBWogLlOz1UAsFArVIJVCP4wIlez3U4wKB+otKoBbjAiV7PdRigUAtUQnUE7BCO8heD/WEQKD+qhKopbhAyV4PtVQgUMtUAvUkLlCy10M9KRCop1QCtRwXKNnroZYLBGqFSqCexgVK9nqopwUC9YxKoJ7FBUr2eqhnBQK1UiVQz+ECJXs91HMCgXpeJVAv4AIlez3UCwKBWqUSqBdxgZK9HupFgUD9TSVQL+ECJXs91EsCgVqtEqiXcYGSvR7qZYFAvaISqDW4QMleD7VGIFCvqgTqNVygZK+Hek0gUK+rBOoNXKBkr4d6QyBQa1UC9SYuULLXQ70pEKi/qwTqLVygZK+HeksgUOtUAvU2rNCOstdDvS0QqH+oBOodXKBkr4d6RyBQ61UC9S4uULLXQ70rEKj3VAK1ARco2euhNggEaqNKoN7HBUr2eqj3BQL1gUqgPsQFSvZ6qA8FArVJJVAf4QIlez3URwKB+qdKoD7GBUr2eqiPBQK1WSVQW3CBkr0eaotAoP6lEqhcKSxQstdD4fqAV2NJqUigSnGBkr0eqlQgULVUAlWGC5Ts9VBlAoEqVwlUBS5QstdDVQgEqrZKoCpxgZK9HqpSIFB1VAJVFxco2euh6goEqp5KoOrjAiV7PVR9gUA1QNeILvDQdIHnlhB+97w5h6Ra4Dq3K8UtqzlOs6H7D52bQ/LLQudmLll3Tetzul1m0MudR+KlFOw70B+bF7jXbdNlHEJY7nwBtnsSdC8QyTjQH0Nqdn5U5rauA7ulbUvavpb/+/X8Xzdtnx+jKr3+6Zn/v/tfNl/D0lyuur6sqeeHApfVCLcxZbW8fPsTmqUeOaz/2bRD2hfl+ccVRerPplpFHld6820Bai383MJaGhap8zMedAcWwzBzh1L8cncEboSydO9YCveItvJqRNhAa1z63xnIm1QzkDfxBvKdiszXPT/fTvn53F7+zuQBH5nlpsAB/8v0ebNq+ryZ1+e7VNPnu3h9vmuR+Xrk59s1P5+ra7f8PxnjS2MCE81Lwx4LnOamBN27B67bjYGH5vC69whctxvbmhP8Xhj4DpsbN3Yn6F4kchCvCrieAHptyP5zfeavutE7vZ3SZXwXd5GbuYPK7bx6/3+Xe+anpsGfPq1Ss2Vb4Qt+/7bIP9mzdOsOVkWR/s+mEu81t87vWfC/7G+J9/6e3nuKzVPyOcupV6SOhkVeo+1cZWJblG4t2D3f0wMRPci5MDHOVCwOfHDPwETrXhLm4J4U1GktgDsUewKX9cQ26r+kZpMB823AzFhN+q+6lQJ6hxaZv5bADRW3DMaOQ0vChuQhufDH2GsIY+yTga9b+pPO/j8lsuPQCsgj0Gt7SmCbZDwhN08HrvskEi/PiPDSGsgL0Gt7RoCX6wi52SvwA3JO90SC7r0FdN9A0N1GQPdkgu62Arp/SdC9j4DuKQTd+wro/hVBdzsB3VMJutsL6L6NoHs/Ad23E3TvL6D71wTdiYDu6QTdJqD7NwTdHQR0zyDo7iig+7cE3Z0EdM8k6O4soPt3BN0HCOi+n6D7QAHdvyfo7iKgezZBd1cB3X8g6D5IQPccgu6DBXT/kaD7EAHd8wi6uwno/hNB99cEdC8g6P66gO4/E3R3F9C9iKC7h4DuvxB09xTQvYSg+1AB3X8l6D5MQPcygu5eArqfIuj+hoDuFQTdhwvofoag+wgB3SsJunsL6H6eoPtIAd2rCLqPEtD9N4LuowV0rybo7iOg+xWC7m8K6H6VoPtbArpfJ+g+RkD3WoLuvgK6/07QfayA7nUE3ccJ6P4HQffxArrXE3T3E9D9HkH3CQK6NxJ0f1tA9wcE3ScK6N5E0N1fQPc/CbpPEtC9maD7ZAHd/yLoPkVAt7txElr3AAHdtQi6vyOgu5yg+1QB3bUJuk8T0F2HoHuggO56BN2nC+huQNB9BlC3+5Xdcq8295sB7nvQ7ru37nuo7juZ7vuJ7rt67ntr7jtc7vtM7rs97nsu7jsf7vsP7rsA7rp4d424u17aXTvsrqN115S66yvdtYbuujt3DZq7Hstdm/TJdTppc9dvuGsZ3Hl9d47bne915z7deUB3TsydH3LnStx5A3cM3R1PdsdW3XFGd8zNHX9yx2LccQm3j+72V92+m9uPcdv0bvvWbeu57R63DeDWh27d4MZJN2Y4flyWXL/6E/r75YNwvnUA/u5NhyUCv9g+iMDRYCBHZbmtv1jtT8h+ZfQtsg9YNZ6JrhFdoPuZ+T0IAX0ucDDdL9BWEXQ/L/KDId/FBdOAXtvz2+hWFMgfzqrpss4CesFgxWn9LoGVFwMfI9zgfRZB999ExoghwFwCvTZk/5E3fv59642v4sbPkFJOzj8zmCc1m8zfu6kpNN8TGMy/RxjUzo57JHZ2afg1nhP6Hok79DSEcArl5cC3NgaVcH7C8BWRrY2hwIET6LW98hXcIzlXYCU2lLASey3wMcIN3ucSdL8uMkZ8H5hLoNf2etwjkdj4+X4pJ+fwoJ8HDHqo9xlgGOxWDOcRBshhwOC42tzK319mNqH3bIcC92x/ILBR8AOC9z8keO+WWZVfJmMH6mzCjsSbIhsJwwMdO98UGDuHE/gZQeBnBJmfoQR+3gp852Io6QDEOpFx40fAcQPota37Ch6AOD/wbQ03RnyfwMo7gY8Rbnxg6F4vMkZcAMwl0GtbL3CflfMIudkgwAtD90YRXkYCeQF6bRsFeBlGyM2HArwwdG8S4eXHQF6AXtsmAV5+QMjNxwK8MHRvFuHlQiAvQK9tswAvPyTkJrd7+LwwdJfsrsHLRcj9apxmKwk8N46X4YTclAnwwtBdLsLLKCAvQK+tXICXEYTcVArwwtBdR4SXnwB5AXptdQR4+REhN/UFeGHobiDCy0+BvAC9tgYCvJxPyE1DAV4YuhuJ8HIxkBeg19ZIgJcLCLlpLMALQ3cTEV5GA3kBem1NBHgZSchNUwFeGLqbifByCZAXoNfWTICXHxNys5sALwzdzUV4uRTIC9Bray7Ay4WE3FQJ8MLQ3UKEl8uAvAC9thYCvFxEyE0rAV4YuluL8DIGyAvQa2stwMsoQm7aCPDC0N1WhJefAXkBem1tBXj5CSE37QR4YehuL8LLz4G8AL229gK8/JSQm0SAF4ZuE+HlciAvQK/NBHi5mJCbTgK8MHR3FuFlLJAXoNfWWYCX0YTcdBHghaG7qwgvVwB5AXptXQV4uYSQm0MEeGHo7ibCy5VAXoBeWzcBXi4l5Ka7AC8M3T1EeLkKyAvQa+shwMtlhNwcJsALQ3cvEV7GAXkBem29BHgZQ8jNEQK8MHT3FuHlaiAvQK+ttwAvPyPk5mgBXhi6+4jw8gsgL0CvrY8ALz8n5OYYAV4YuvuK8HINkBeg19ZXgJfLCbk5XoAXhu5+IryMB/IC9Nr6CfAylpCbEwV4YejuL8LLtUBegF5bfwFeriDk5hQBXhi6B4jwch2QF6DXNkCAlysJuTlNgBeG7oEivEwA8gL02gYK8HIVITeDBHhh6B4swstEIC9Ar22wAC/jCLk5S4AXhu4hIrxcD+QF6LUNEeDlakJuzhHghaF7qAgvNwB5AXptQwV4+QUhN+cJ8MLQPUyEl0lAXoBeG7L/yDegpd3ctaVAjZNLgTWqGtVGoMYbo1GJXVsSfo2/jEYlNkHAqJuiUYldL2DUlGhUYpMEjLo5GpWuqAWM+lU0Kh3/BYy6JRqVDisCRk2NRqVpFTDq1mhU2gkCRt0WjUpsmoBR06JRid0hYNTt0ajE7hQw6o5oVGJ3CRj162hUYncLGHVnNCqxewSMmh6NSuxeAaPuikYldp+AUb+JRiU2S8Cou6NRiT0gYNSMaFRiDwoYdU80KrGHBIz6bTQqsYcFjLo3GpXYIwJGzYxGJTZXwKj7olGJPSpg1O+iUYnNFzBqVjQqsccEjLo/GpXYQgGjHohGJfa4gFG/j0YltljAqAejUYk9IWDU7GhUYksFjHooGpXYkwJG/SEaldhyAaMejkYl9rSAUXOiUYk9K2DUI9GoxJ4TMOqP0ajEXhAwam40KrEXBYyaF41K7CUBox6NRiX2soBRf4pGJbZGwKj50ajEXhMwakE0KrE3BIx6LBqV2JsCRv05GpXYWwJGLYxGJfa2gFGLolGJvSNg1OPRqMTeFTDqL9GoxDYIGLU4GpXY+wJGLYlGJfahgFFPRKMS+0jAqL9GoxL7WMCopdGoxLYIGLUsGpVYrjT8Gp+MRiVWKmDUU9GoxMoEjFoejUqsQsCoFdGoxCoFjHo6GpVYXQGjnolGJVZfwKhnCTV+MqHvv7USV6gtbg48Btec04Ho/nsu0P57E9x/aEC2S/vt/NLPLremfgwXue/d86W4Zc0D5mZ44PdLPCxdxhE5fG5+RNZd0/qc7ucJvJxP4qUU7DvQHzs/cK/bpss4jLDcHwuwfSRB94UiGQf6Y0jNzo/K3NZ1YK+0bUnbN/J/D8//ddML+TGq0uufI/P/d//L5ltVmstV15c19fwo4LJeBG7j1fLy7U9olnrnsP5n099Kt+40VhSpP5tqFXlc6c23Bai18HMLa2lYpM7PeNAdWAzDzL+VEr7PA9wIZel+qRTuEW3l9SJhA2116X9nIH+5moH8ZW8gf6XIfEfk53slP5870rSGPOAjs/wqcMD/Mn3+WjV9/prX569X0+eve33+RpH5eufneyM/n6trbf6fjPFlNYGJN0vDHguc5lcJuv8euG43Bh6Vw+t+K3Ddbmx7k+D3TwLfYXPjxt8Jun8qchBvHXA9AfTakP3n+sxfdaN3eg9Jl3EesB/dQeWVgG3GMz81Df70WZiaLdsKX/D79+38k3+Ubt3BqijS/9lU4r3m1vk9C/6X/S3x3t/Te0+xeUo+Zzn1itTRsMhrtJ2rTOzbpVsLds//4QUIPchlAUUPcpcEPrhnIKF1Xxrm4J4U1GlvA3co/gFc1mXbqP+Smk0GzLcBM2M16b/qVgroHVpk/t4BrmDdMhg7Du8QxprDcmGPsW7dMpmg+/LA1y2tSjln/8eK7DisB/II9NrGBp4bx8uNhNxcFbju1iRexonw8i6QF6DXNk6Al18ScnNN4Lr3IvEyXoSX94C8AL228QK83ETIzYTAde9N4mWiCC8bgLwAvbaJArxMIeRmUuC625B4mSzCy0YgL0CvbbIALzcTcnNT4LrbkniZIsLL+0BegF7bFAFefkXIzS2B696HxMtUEV4+APIC9NqmCvByCyE30wLXvS+Jl9tFePkQyAvQa7tdgJephNzcGbjudiRepovwsgnIC9Brmy7Ay62E3NwduO72JF5miPDyEZAXoNc2Q4CX2wi5uTdw3fuReJkpwss/gbwAvbaZArxMI+RmVuC69yfxcr8ILx8DeQF6bfcL8HI7ITcPBq47IfEyW4SXzUBegF7bbAFe7iDk5uHAdRuJlzkivGwB8gL02uYI8PJrQm7mBq67A4mXeSK8/AvIC9BrmyfAy52E3MwPXHdHEi8LRHhxC0T1JdBrWyDAy3RCbhYGrrsTiZdFIryUAHkBem2LBHi5i5CbxYHr7kziZYkIL6VAXoBe2xIBXn5DyM3SwHUfQOJlmQgvtYC8AL22ZQK83E3IzfLAdR9I4mWFCC9lQF6AXtsKAV5mEHLzbOC6u5B4WSnCSzmQF6DXtlKAl3sIuXkhcN1dSbysEuGlAsgL0GtbJcDLbwm5eSlw3QeReFktwkttIC9Ar221AC/3EnKzJnDdB5N4eVWEl0ogL0Cv7VUBXmYScvNG6LpJvKwV4aUOkBeg17ZWgJf7CLl5K3Dd3Ui8rBPhpS6QF6DXtk6Al98RcvNO4Lq/RuJlvQgv9YC8AL229QK8zCLkZkPgur9O4mWjCC/1gbwAvbaNArzcT8jNh4Hr7k7iZZMILw2AvAC9tk0CvDxAyM3HgevuQeJlswgv2wF5AXptmwV4+T0hN7k9wtbdk8RLyR4avGwP5AXotZUEnhvHy4OE3JQFrvtQEi/lIrw0BPIC9NrKBXiZTchNZeC6DyPxUkeEl0ZAXoBeWx0BXh4i5KZ+4Lp7kXhpIMLLDkBegF5bAwFe/kDITcPAdX+DxEsjEV52BPIC9NoaCfDyMCE3jQPXfTiJlyYivDQG8gL02poI8DKHkJumges+gsRLMxFemgB5AXptzQR4eYSQm90C192bxEtzEV52AvIC9NqaC/DyR0JuqgLXfSSJlxYivOwM5AXotbUQ4GUuITetAtd9FImX1iK8NAXyAvTaWgvwMo+QmzaB6z6axEtbEV6aAXkBem1tBXh5lJCbdoHr7kPipb0IL7sAeQF6be0FePkTITdJ4Lq/SeLFRHjZFcgL0GszAV7mE3LTKXDd3yLx0lmEl92AvAC9ts4CvCwg5KZL4LqPIfHSVYSX5kBegF5bVwFeHiPk5pDAdfcl8dJNhJfdgbwAvbZuArz8mZCb7oHrPpbESw8RXvYA8gL02noI8LKQkJvDAtd9HImXXiK8VAF5AXptvQR4WUTIzRGB6z6exEtvEV5aAHkBem29BXh5nJCbowPX3Y/ESx8RXvYE8gL02voI8PIXQm6OCVz3CSRe+orw0hLIC9Br6yvAy2JCbo4PXPe3Sbz0E+GlFZAXoNfWT4CXJYTcnBi47hNJvPQX4aU1kBeg19ZfgJcnCLk5JXDd/Um8DBDhZS8gL0CvbYAAL38l5Oa0wHWfROJloAgvewN5AXptAwV4WUrIzaDAdZ9M4mWwCC9tgLwAvbbBArwsI+TmrMB1n0LiZYgIL22BvAC9tiECvDxJyM05geseQOJlqAgv+wB5AXptQwV4eYqQm/MC1/0dEi/DRHjZF8gL0GsbJsDLckJuhgeu+1QSLyNEeGkH5AXotY0Q4GUFITcXBK77NBIvI0V4aQ/kBei1jRTg5WlCbi4KXPdAEi+jRHjZD8gL0GsbJcDLM4TcXBy47tNJvIwW4WV/IC9Ar220AC/PEnJzWeC6zyDxMkaElwTIC9BrQ/ZfebqMCq/P1qd+v5u299K2IW0b0/Z+2j5I24dp25S2j9L2z7R9nLbNaduStn+V/p8BJWkrTVuttJWlrTxtFWmrnbbKtLl7tLv7Trt76br7g7p7Hrr7uLl7U7n77bh7iLj7Irjfene/X+1+k9f9zqj77UT3e3DuN67c7/a43yJxv6/gvjPuvgfrvtvnvq/kvoPhrit318q66//cNU3uOg137tmdT3PnCNxxT3csx+2fum1utx3hxsakVi7HzJPh8tThEtw95jpcGvj96g5Ll+H6Dj0OdcD5kZTlOSqckP3K6FtkH7Bq7IiuEV3gqnTwe4uworw88A2E1anmdQTdY0U2EDoBNxCAXhur/0rB/XcYcFmdkTe3zHFWYp0IK7GrAh8j3ODdmaB7nMgYcQAwl0CvDdl/5I0fy5b3Vdz4OaAWJ+efGcyTmk3m793UFJoDBQbzAwmDWpe4R2JdBKDsGvoeiTtk+QPClvk1gW9tDCUdshwvsrVxEHDgBHpt47+CeyQHC6zEDiKsxCYEPka4wftggu6JImPEIcBcAr22iXGPRGLj55BanJzDg94NGHTg+RYDnm+hrRi6EQbIrwGD42pzK39/mdmE3rM9CLhn+3WBjYKvE7zvTvDeLbMqv0zGDtRwwo7EpMA3jtzO03ME3ZNFNo56APkEem3A/qONGz0I40ZPwrjRkzxu/IjAz02Bjxs/Ih14mSIybhwKHDeAXtuUr+CBl8MC38ZyY8QFBFZuEdi2YOieKjJG9ALmEui1TRW4/nokITfTBHhh6L5dhJdvAHkBem23C/DyY0Ju7hTghaF7uggvhwN5AXpt0wV4uZCQm7sFeGHoniHCyxFAXoBe2wwBXi4i5OZeAV4YumeK8NIbyAvQa5spwMsoQm5mCfDC0H2/CC9HAnkBem33C/DyE0JuHhTghaF7tggvRwF5AXptswV4+SkhNw8L8MLQPUeEl6OBvAC9tjkCvFxMyM1cAV4YuueJ8NIHyAvQa5snwMtoQm7mC/DC0L1AhJdvAnkBem0LBHi5hJCbhQK8MHQvEuHlW0BegF7bIgFeLiXkZrEALwzdS0R4OQbIC9BrWyLAy2WE3CwV4IWhe5kIL32BvAC9tmUCvIwh5Ga5AC8M3StEeDkWyAvQa1shwMvPCLl5VoAXhu6VIrwcB+QF6LWtFODl54TcvCDAC0P3KhFejgfyAvTaVgnwcjkhNy8J8MLQvVqEl35AXoBe22oBXsYScrNGgBeG7ldFeDkByAvQa3tVgJcrCLl5Q4AXhu61Irx8G8gL0GtbK8DLlYTcvCXAC0P3OhFeTgTyAvTa1gnwchUhN+8I8MLQvV6El/5AXoBe23oBXsYRcrNBgBeG7o0ivJwE5AXotW0U4OVqQm4+FOCFoXuTCC8nA3kBem2bBHj5BSE3HwvwwtC9WYSXU4C8AL22zQK8XEPIjftRxdB5YeguqdLgZQDyd/Fwmg3dfwxexhNyUxa4bscLQ3d5lQYv3wHyAvTa0P3H4OVaQm4qA9fteGHorlOlwcupQF6AXhu6/xi8XEfITf3AdTteGLobVGnwchqQF6DXhu4/Bi8TCLlpGLhuxwtDd6MqDV4GAnkBem3o/mPwMpGQm8aB63a8MHQ3qdLg5XQgL0CvDd1/DF6uJ+SmaeC6HS8M3c2qNHg5A8gL0GtD9x+DlxsIudktcN2OF4bu5lUavAwC8gL02tD9x+BlEiE3VYHrdrwwdLeo0uBlMJAXoNeG7D/yjXdpN7VtKVDjmcgb76oa1Uagxu9GoxK7tiT8Gs+KRiU2QcCoIdGoxK4XMOp70ajEJgkYdXY0KrEbBYw6JxqV2E0CRg2NRiV2s4BR50ajErtFwKjvR6MSu1XAqPOiUYlNEzBqWDQqsTsEjPpBNCqxOwWM+mE0KrG7BIwaHo1K7G4Bo0ZEoxK7R8CoH0WjErtXwKjzo1GJ3Sdg1AXRqMRmCRg1MhqV2AMCRv04GpXYgwJGXRiNSuwhAaMuikYl9rCAUaOiUYk9ImDUT6JRic0VMOqn0ajEHhUw6uJoVGLzBYwaHY1K7DEBoy6JRiW2UMCoS6NRiT0uYNRl0ajEFgsYNSYaldgTAkb9LBqV2FIBo34ejUrsSQGjLo9GJbZcwKix0ajEnhYw6opoVGLPChh1ZTQqsecEjLoqGpXYCwJGjYtGJfaigFFXR6MSe0nAqF9EoxJ7WcCoa6JRia0RMGp8NCqx1wSMujYaldgbAkZdF41K7E0BoyZEoxJ7S8CoidGoxN4WMOr6aFRi7wgYdUM0KrF3BYyaFI1KbIOAUZOjUYm9L2DUjdGoxD4UMOqX0ajEPhIw6qZoVGIfCxg1JRqV2BYBo26ORiWWKw2/xl9FoxIrFTDqlmhUYmUCRk2NRiVWIWDUrdGoxCoFjLotGpVYXQGjpkWjEqsvYNTttfA1fjKh7791B/D+W5fsjlvWpbtzOhDdf78G9t+kPYAHm/fA9h8akOdTiA+r9dnl1tSPVlUaubmzFm5Z5wO5Q/cfOjdHp8s4JofPzV5k3TWtz+m+k8DL3lUcXkrBvgP9MbRmtCdt02UcTVjuPlXhs30sQfe+VRoZB/pjSM3Oj8rc1nVgn7RtSds383+/lf/rpun5MarS659j8/93/8vmu6tWLlddX9bU8+OAy/oNcBuvlpdvf0Kz1DeH9T+b7k4FlOcfVxSpP5tqFXlc6c23Bai18HMLa2lYpM7PeNAdWAzDzLtr4Zc7A7gRytI9oxbcI9rK6zeEDbR7av13BvLfVjOQ/9YbyO8tMt8x+fnuzc/njjTNJA/4yCzfBxzwv0yf/66aPv+d1+ezqunzWV6f319kvr75+e7Pz+fqeiBfHGN8uYfAxO9rhT0WOM33EXQ/GLhuNwYel8Prnh24bje2/Z7g935VYet248aDBN37g3VnE/og3kPA9QTQa0P2n+uzUq8P0Tu9h6XL6AbsR3dQ+Q7ANuOZn5oGf/osTM2WbYUv+P37h3ztD9fauoNVUaT/s6nEe82t83sW/C/7W+K9v6f3nmLzlHzOcuoVqaNhkddoO1eZ2D/U2lqwe/6wFyD0IJcFFD3IdagKe3DPQELr7gjWnU01HNyTgjrtD8AdioeBy+q0jfovqdlkwHwbMDNWk/6rbqWA3qFF5m8OcAXrlsHYcZhDGGuOzgU+xqbLOJOgu0tV2LrXk87+d60Kct3ymTofAfII9NrQ/cfg5buE3BwSuO53Sbx0q9Lg5Y9AXoBeG7r/GLycRchN98B1v0fipUeVBi9zgbwAvTZ0/zF4GULIzWGB695A4qVXlQYv85AHIHGaDd1/DF6+R8jNEYHr3kjipXeVBi+PAnkBem3o/mPwcjbjOEfgut8n8dKnSoOXPwF5AXpt6P5j8HIOITfHBK77AxIvfas0eJkP5AXotaH7j8HLUEJujg9c94ckXvpVafCyAMgL0GtD9x+Dl3MJuTkxcN2bSLz0r9Lg5TEgL0CvDd1/DF6+T8jNKYHr/ojEy4AqDV7+DOQF6LWh+4/By3mE3JwWuO5/kngZWKXBy0IgL0CvDd1/DF6GEXIzKHDdH5N4GVylwcsiIC9Arw3dfwxefkDIzVmB695M4mVIlQYvjwN5AXpt6P5j8PJDQm7OCVz3FhIvQ6s0ePkLkBeg14buPwYvwwm5OS9w3f8i8TKsSoOXxUBegF4buv8YvIwg5GZ44LpdABm8jKjS4GUJkBeg14buPwYvPyLk5oLAdZeQeBlZpcHLE0BegF4buv8YvJxPyM1FgesuJfEyqkqDl78CeQF6bej+Y/ByASE3FweuuxaJl9FVGrwsBfIC9NrQ/cfgZSQhN5cFrruMxMuYKg1elgF5AXpt6P5j8PJjQm4uD1x3OYmXsVUavDwJ5AXotaH7j8HLhYTcXBW47goSL+OqNHh5CsgL0GtD9x+Dl4sIubkmcN21SbyMr9LgZTmQF6DXhu4/Bi+jCLmZELjuShIvE6s0eFkB5AXotaH7j8HLTwi5mRS47jokXiZXafDyNJAXoNeG7j8GLz8l5OamwHXXJfEypUqDl2eAvAC9NnT/MXi5mJCbWwLXXY/Ey9QqDV6eBfIC9NrQ/cfgZTQhN9MC112fxMvtVRq8rATyAvTa0P3H4OUSQm7uDFx3AxIv06s0eHkOyAvQa0P3H4OXSwm5uTtw3duReJlRpcHL80BegF4buv8YvFxGyM29gevensTLzCoNXl4A8gL02tD9x+BlDCE3swLX3ZDEy/1VGrysAvIC9NrQ/cfg5WeE3DwYuO5GJF5mV2nw8iKQF6DXhu4/Bi8/J+Tm4cB170DiZU6VBi9/A/IC9NrQ/cfg5XJCbuYGrntHEi/zqjR4eQnIC9BrQ/cfg5exhNzMD1x3YxIvC6o0eFkN5AXotaH7j8HLFYTcLAxcdxMSL4uqNHh5GcgL0GtD9x+DlysJuVkcuO6dSLwsqdLg5RUgL0CvDd1/DF6uIuRmaeC6dybxsqxKg5c1QF6AXhu6/xi8jCPkZnngupuSeFlRpcHLq0BegF4buv8YvFxNyM2zgetuRuJlZZUGL68BeQF6bej+Y/DyC0JuXghc9y4kXlZVafDyOpAXoNeG7j8GL9cQcvNS4Lp3JfGyukqDlzeAvAC9NnT/MXgZT8jNmsB170bi5dUqDV7WAnkBem3o/mPwci0hN28Errs5iZe1VRq8vAnkBei1ofuPwct1hNy8Fbju3Um8rKvS4OXvQF6AXhu6/xi8TCDk5p3Ade9B4mV9lQYvbwF5AXpt6P5j8DKRkJsNgeuuIvGysUqDl3VAXoBeG7r/GLxcT8jNh4HrbkHiZVOVBi9vA3kBem3o/mPwcgMhNx8HrntPEi+bqzR4+QeQF6DXhu4/Bi+TCLnJtQhbd0sSLyUtNHh5B8gL0GsrCTw3jpfJhNyUBa67FYmXchFe1gN5AXpt5QK83EjITWXguluTeKkjwsu7QF6AXlsdAV5+SchN/cB170XipYEIL+8BeQF6bQ0EeLmJkJuGgevem8RLIxFeNgB5AXptjQR4mULITePAdbch8dJEhJeNQF6AXlsTAV5uJuSmaeC625J4aSbCy/tAXoBeWzMBXn5FyM1ugeveh8RLcxFePgDyAvTamgvwcgshN1WB696XxEsLEV4+BPIC9NpaCPAylZCbVoHrbkfipbUIL5uAvAC9ttYCvNxKyE2bwHW3J/HSVoSXj4C8AL22tgK83EbITbvAde9H4qW9CC//BPIC9NraC/AyjZCbJHDd+5N4MRFePgbyAvTaTICX2wm56RS47oTES2cRXjYDeQF6bcj+K0+XUdvrs0dSzX9M29y0zUvbo2n7U9rmp21B2h5L25/TtjBti9L2eNr+krbFaVuStifS9te0LU3bsrQ9mban0rY8bSvS5u7R7u477e6l6+4P6u556O7j5u5N5e634+4h4u6L4H7r3f1+tftNXvc7o+63E93vwbnfuHK/2+N+i8T9voL7zrj7Hqz7bp/7vpL7Doa7rtxdK+uu/3PXNLnrNNy5Z3c+zZ0jcMc93bEct3/qtrnddoQbGzfXyuWYedqCy1OHDlW4ZXWsCnscOjpdxhbCOPQvnB9JWZ6jwgnZr4y+RfYBq8ZcGbhGdIF3pZ04mxDQLoFvINyTan6IoLuryAZCCS6YBvTaWP1XCu6/o4HLKgV6wWDFaXV5QbNySOBjhBu8Swm6u4mMEbWAuQR6bcj+I2/8WLa8r+LGT60yTs4/M5gnNZvM37up8TfrBAbzMsKgVl4mAyUt8OVl4ddYEfoeiTtk+XXClnn3wLc2DiIdsuwhsrVRGzhwAr22Hl/BPZJKgZVYbcJK7LDAxwg3eFcSdPcSGSPqAHMJ9Np6xT0SiY2fOqw9EnTQ6wKDDjzfYsDzLbQVQ13CAFkPGBxXm1v5+8vMJvSerb9RVePv9AtsFNQneN+A4L1bZlV+mYwdqB6EHYkjQr/WJdX8a4Lu3iIbR9sB+QR6bcD+o40b2xHGje0J48b25HHjUAI/Rwc+bhxKOvDSR2TcaAgcN4BeG6v/Qj7w0ijwbSw3RvQisHKMwLYFQ3dfkTFiB2AugV5b39Bzky7jG4TcHC/AC0N3PxFedgTyAvTa+gnwcjghNycK8MLQ3V+El8ZAXoBeW38BXo4g5OYUAV4YugeI8NIEyAvQaxsgwEtvQm5OE+CFoXugCC87AXkBem0DBXg5kpCbQQK8MHQPFuFlZyAvQK9tsAAvRxFyc5YALwzdQ0R4aQrkBei1DRHg5WhCbs4R4IWhe6gIL82AvAC9tqECvPQh5OY8AV4YuoeJ8LILkBeg1zZMgJdvEnIzXIAXhu4RIrzsCuQF6LWNEODlW4TcXCDAC0P3SBFedgPyAvTaRgrwcgwhNxcJ8MLQPUqEl+ZAXoBe2ygBXvoScnOxAC8M3aNFeNkdyAvQaxstwMuxhNxcJsALQ/cYEV72APIC9NrGCPByHCE3lwvwwtA9VoSXKiAvQK9trAAvxxNyc5UALwzd40R4aQHkBei1jRPgpR8hN9cI8MLQPV6Elz2BvAC9tvECvJxAyM0EAV4YuieK8NISyAvQa5sowMu3CbmZJMALQ/dkEV5aAXkBem2TBXg5kZCbmwR4YeieIsJLayAvQK9tigAv/Qm5uUWAF4buqSK87AXkBei1TRXg5SRCbqYJ8MLQfbsIL3sDeQF6bbcL8HIyITd3CvDC0D1dhJc2QF6AXtt0AV5OIeTmbgFeGLpniPDSFsgL0GubIcDLAEJu7hXghaF7pggv+wB5AXptMwV4+Q4hN7MEeGHovl+El32BvAC9tvsFeDmVkJsHBXhh6J4twks7IC9Ar222AC+nEXLzsAAvDN1zRHhpD+QF6LXNEeBlICE3cwV4YeieJ8LLfkBegF7bPAFeTifkZr4ALwzdC0R42R/IC9BrWyDAyxmE3CwU4IWhe5EILwmQF6DXtkiAl0GE3CwW4IWhe4kILwbkBei1LRHgZTAhN0sFeGHoXibCSwcgL0CvDdl/5Bvv0m5q21Kgxo7IG++qGtVGoMZO0ajEri0Jv8bO0ajEJggYdUA0KrHrBYw6MBqV2CQBo7pEoxK7UcCortGoxG4SMOqgaFRiNwsYdXA0KrFbBIw6JBqV2K0CRnWLRiU2TcCor0WjErtDwKivR6MSu1PAqO7RqMTuEjCqRzQqsbsFjOoZjUrsHgGjDo1GJXavgFGHRaMSu0/AqF7RqMRmCRj1jWhUYg8IGHV4NCqxBwWMOiIaldhDAkb1jkYl9rCAUUdGoxJ7RMCoo6JRic0VMOroaFRijwoY1Scaldh8AaO+GY1K7DEBo74VjUpsoYBRx0SjEntcwKi+0ajEFgsYdWw0KrEnBIw6LhqV2FIBo46PRiX2pIBR/aJRiS0XMOqEaFRiTwsY9e1oVGLPChh1YjQqsecEjOofjUrsBQGjTopGJfaigFEnR6MSe0nAqFOiUYm9LGDUgGhUYmsEjPpONCqx1wSMOjUaldgbAkadFo1K7E0BowZGoxJ7S8Co06NRib0tYNQZ0ajE3hEwalA0KrF3BYwaHI1KbIOAUWdGoxJ7X8Co70ajEvtQwKizolGJfSRg1JBoVGIfCxj1vWhUYlsEjDo7GpVYrjT8Gs+JRiVWKmDU0GhUYmUCRp0bjUqsQsCo70ejEqsUMOq8aFRidQWMGhaNSqy+gFE/KMPX+MmEvv/WD3GFWocq3LI6VnE6EN1/w4H9d0QL3LJ6t8D2HxqQO1MjGpV9drk19WN5C43cjCjDLWvvKpwvywPPzfHpMk7M4XPzNFl3TetzukcQeHmGxEsp2HegP/ZM4F63TZdxPGG5zwmwfRJB9/MiGQf6Y0jNzo/K3NZ1YL+0bUnbCfm/387/ddOP8mNUpdc/J+X/7/6XzXd+WS5XXV/W1POTgcu6ALiNV8vLtz/BvwGWw/qfTSPTvijPP64oUn821SryuNKbbwtQa+HnFtbSsEidn/GgO7AYhpkjy/DL/TFwI5Sl+8dlcI9oK68LCBtoF5b9dwbyi6oZyC/yBvJRReY7MT/fqPx8zsKfkAd8ZJZ/Chzwv0yfX1xNn1/s9fnoavp8tNfnlxSZr39+vkvy87m6Ls17wxhfLiQwcVlZ2GOB0/xTgu4xget2Y+DJObzunwWu241tlxH8fjHwHTY3bowh6P6byEG8nwPXE0CvDdl/rs9KvT5E7/QenS6jLrAf3UHlHwK2Gc/81DT402dharZsK3zB79/L87WPLdu6g1VRpP+zqcR7zb21Z8H/sr8l3vt7eu8pNk/J5yynXpE6GhZ5jbZzlYm9vGxrwe75WC9A6EEuCyh6kHs58ME9Awmt+5UwB/ekoE67HLhDMRa4rDXbqP+Smk0GzLcBM2M16b/qVgroHVpk/q4ArmDdMhg7DlcQxprjc2GPsW7d0pGg+43A1y2PkM7+rxXZcbgSyCPQa1sbeG4cL50IuXkrcN1/JPGyToSXq4C8AL22dQK8dCbk5p3Adc8l8bJehJdxQF6AXtt6AV4OIORmQ+C655F42SjCy9VAXoBe20YBXg4k5ObDwHU/SuJlkwgvvwDyAvTaNgnw0oWQm48D1/0nEi+bRXi5BsgL0GvbLMBLV0JucnuGrXs+iZeSPTV4GY88Xo3TbCWB58bxchAhN2WB615A4qVchJdrgbwAvbZyAV4OJuSmMnDdj5F4qSPCy3VAXoBeWx0BXg4h5KZ+4Lr/TOKlgQgvE4C8AL22BgK8dCPkpmHguheSeGkkwstEIC9Ar62RAC9fI+SmceC6F5F4aSLCy/VAXoBeWxMBXr5OyE3TwHU/TuKlmQgvNwB5AXptzQR46U7IzW6B6/4LiZfmIrxMAvIC9NqaC/DSg5CbqsB1Lybx0kKEl8lAXoBeWwsBXnoSctMqcN1LSLy0FuHlRiAvQK+ttQAvhxJy0yZw3U+QeGkrwssvgbwAvba2ArwcRshNu8B1/5XES3sRXm4C8gL02toL8NKLkJskcN1LSbyYCC9TgLwAvTYT4OUbhNx0Clz3MhIvnUV4uRnIC9Br6yzAy+GE3HQJXPeTJF66ivDyKyAvQK+tqwAvRxByc0jgup8i8dJNhJdbgLwAvbZuArz0JuSme+C6l5N46SHCy1QgL0CvrYcAL0cScnNY4LpXkHjpJcLLrUBegF5bLwFejiLk5ojAdT9N4qW3CC+3AXkBem29BXg5mpCbowPX/QyJlz4ivEwD8gL02voI8NKHkJtjAtf9LImXviK83A7kBei19RXg5ZuM38ENXPdKEi/9RHi5A8gL0GvrJ8DLtwi5OTFw3c+ReOkvwsuvgbwAvbb+ArwcQ8jNKYHrfp7EywARXu4E8gL02gYI8NKXkJvTAtf9AomXgSK8TAfyAvTaBgrwciwhN4MC172KxMtgEV7uAvIC9NoGC/ByHCE3ZwWu+0USL0NEePkNkBeg1zZEgJfjCbk5J3DdfyPxMlSEl7uBvAC9tqECvPQj5Oa8wHW/ROJlmAgvM4C8AL22YQK8nEDIzfDAda8m8TJChJd7gLwAvbYRArx8m5CbCwLX/TKJl5EivPwWyAvQaxspwMuJhNxcFLjuV0i8jBLh5V4gL0CvbZQAL/0Jubk4cN1rSLyMFuFlJpAXoNc2WoCXkwi5uSxw3a+SeBkjwst9QF6AXtsYAV5OJuTm8sB1v0biZawIL78D8gL02sYK8HIKITdXBa77dRIv40R4mQXkBei1jRPgZQAhN9cErvsNEi/jRXi5H8gL0GsbL8DLdwi5mRC47rUkXiaK8PIAkBeg1zZRgJdTCbmZFLjuN0m8TBbh5fdAXoBe22QBXk4j5OamwHX/ncTLFBFeHgTyAvTapgjwMpCQm1sC1/0WiZepIrzMBvIC9NqmCvByOiE30wLXvY7Ey+0ivDwE5AXotd0uwMsZhNzcGbjut0m8TBfh5Q9AXoBe23QBXgYRcnN34Lr/QeJlhggvDwN5AXptMwR4GUzIzb2B636HxMtMEV7mAHkBem0zBXg5k5CbWYHrXk/i5X4RXh4B8gL02u4X4OW7hNw8GLjud0m8zBbh5Y9AXoBe22wBXs4i5ObhwHW/R+Jljggvc4G8AL22OQK8DCHkZm7gujeQeJknwss8IC9Ar22eAC/fI+RmfuC6N5J4WSDCy6NAXoBe2wIBXs4m5GZh4LrfJ/GySISXPwF5AXptiwR4OYeQm8WB6/6AxMsSEV7mA3kBem1LBHgZSsjN0sB1f0jiZZkILwuAvAC9tmUCvJxLyM3ywHVvIvGyQoSXx4C8AL22FQK8fJ+Qm2cD1/0RiZeVIrz8GcgL0GtbKcDLeYTcvBC47n+SeFklwstCIC9Ar22VAC/DCLl5KXDdH5N4WS3CyyIgL0CvbbUALz8g5GZN4Lo3k3h5VYSXx4G8AL02ZP+Vp8uo9PrsylTzVWkbl7ar0/aLtF2TtvFpuzZt16VtQtompu36tN2Qtklpm5y2G9P2y7TdlLYpabs5bb9K2y1pm5q2W9Pm7tHu7jvt7qXr7g/q7nno7uPm7k3l7rfj7iHi7ovgfuvd/X61+01e9zuj7rcT3e/Bud+4cr/b436LxP2+gvvOuPserPtun/u+kvsOhruu3F0r667/c9c0ues03Llndz7NnSNwxz3dsRy3f+q2ud12hBsbnd/MPP0Fl6cOL7fALeuVFmGPQ8eny/gL4/wEzo+kLM9R4YTsV0bfIvuAVeMSdI3oAs9PC/wZIaBvBL6BcGGq+ecE3WtFNhCeAG4gAL02Vv+VgvvveOCy/gr0gsGK0/oEgZW3Ah8j3OD9V4LudSJjxFJgLoFeG7L/yBs/li3vq7jxs7SMk/PPDOZJzSbz925qfEWAwGC+jDCoPRn3SOxJASifCn2PxB2yrE8I6DuBb23ULuMcslwvsrWxHDhwAr02Vv+FvEeyQmAltpzAyobAxwg3eK8g6N4oMkY8Dcwl0GtD9p/qHonCxs/TrD0SdNCfAQYdeL7FgOdbaCuGZxjXHwKD42pzK39/mdmE3rNdDtyzXSmwUbCS4P1zBO/dMqvyy2TsQG1H6IcPA984cjtPwwm6N4lsHD0P5BPotQH7jzZuPM+4BpcwbrxAHjcaEvrh48DHjYakAy+bRcaNVcBxA+i1sfov5AMvLwa+jeXGiB0IrORahr9twdBd0lJjjPgbMpc4zVYSeG4cLzsSclMmwAtDd7kILy8BeQF6beUCvDQm5KZSgBeG7joivKwG8gL02uoI8NKEkJv6ArwwdDcQ4eVlIC9Ar62BAC87EXLTUIAXhu5GIry8AuQF6LU1EuBlZ0JuGgvwwtDdRISXNUBegF5bEwFemhJy01SAF4buZiK8vArkBei1NRPgpRkhN7sJ8MLQ3VyEl9eAvAC9tuYCvOxCyE2VAC8M3S1EeHkdyAvQa2shwMuuhNy0EuCFobu1CC9vAHkBem2tBXjZjZCbNgK8MHS3FeFlLZAXoNfWVoCX5oTctBPghaG7vQgvbwJ5AXpt7QV42Z2Qm0SAF4ZuE+Hl70BegF6bCfCyByE3nQR4YejuLMLLW0BegF5bZwFeqgi56SLAC0N3VxFe1gF5AXptXQV4aUHIzSECvDB0dxPh5W0gL0CvrZsAL3sSctNdgBeG7h4ivPwDyAvQa+shwEtLQm4OE+CFobuXCC/vAHkBem29BHhpRcjNEQK8MHT3FuFlPZAXoNfWW4CX1oTcHC3AC0N3HxFe3gXyAvTa+gjwshchN8cI8MLQ3VeEl/eAvAC9tr4CvOxNyM3xArwwdPcT4WUDkBeg19ZPgJc2hNycKMALQ3d/EV42AnkBem39BXhpS8jNKQK8MHQPEOHlfSAvQK9tgAAv+xByc5oALwzdA0V4+QDIC9BrGyjAy76E3AwS4IWhe7AILx8CeQF6bYMFeGlHyM1ZArwwdA8R4WUTkBeg1zZEgJf2hNycI8ALQ/dQEV4+AvIC9NqGCvCyHyE35wnwwtA9TISXfwJ5AXptwwR42Z+Qm+ECvDB0jxDh5WMgL0CvbYQALwkhNxcI8MLQPVKEl81AXoBe20gBXoyQm4sEeGHoHiXCyxYgL0CvbZQALx0IublYgBeG7tEivPwLyAvQa0P2XyqReeNd2k1tWwrUmCsH1qhqVBuBGkuiUYldWxJ+jaXRqMQmCBhVKxqV2PUCRpVFoxKbJGBUeTQqsRsFjKqIRiV2k4BRtaNRid0sYFRlNCqxWwSMqhONSuxWAaPqRqMSmyZgVL1oVGJ3CBhVPxqV2J0CRjWIRiV2l4BR20WjErtbwKjto1GJ3SNgVMNoVGL3ChjVKBqV2H0CRu0QjUpsloBRO0ajEntAwKjG0ajEHhQwqkk0KrGHBIzaKRqV2MMCRu0cjUrsEQGjmkajEpsrYFSzaFRijwoYtUs0KrH5AkbtGo1K7DEBo3aLRiW2UMCo5tGoxB4XMGr3aFRiiwWM2iMaldgTAkZVRaMSWypgVItoVGJPChi1ZzQqseUCRrWMRiX2tIBRraJRiT0rYFTraFRizwkYtVc0KrEXBIzaOxqV2IsCRrWJRiX2koBRbaNRib0sYNQ+0ajE1ggYtW80KrHXBIxqF41K7A0Bo9pHoxJ7U8Co/aJRib0lYNT+0ajE3hYwKolGJfaOgFEWjUrsXQGjOkSjEtsgYFTHaFRi7wsY1SkaldiHAkZ1jkYl9pGAUQdEoxL7WMCoA6NRiW0RMKpLNCqxXGn4NXaNRiVWKmDUQdGoxMoEjDo4GpVYhYBRh0SjEqsUMKpbNCqxugJGfS0alVh9AaO+Xo6v8ZMJff+t7rhC7eUWuGW90oLTgej+6wHsvw/3xC1r057Y/kMDMiIdfV4k3PfuMpH73vUsxy3rGSB3lwV+v8RT0mWclsPn5mdk3TWtz+l2mUEv9+ckXkrBvgP9sZ8H7nXbdBmnEJZ7hQDbpxN0XymScaA/htTs/HA7Ctk6cEDatqTtO/m/p+b/uunQ/BhV6fXP6fn/u/9l8x1WnstV15c19fwM4LJ6Abfxann59ic0SwNzWP+z6RtpX2TWVRSpP5tqFXlc6c23Bai18HMLa2lYpM7PeNAdWAzDzG+U45d7OHAjlKX78HK4R7SVVy/CBtoR5f+dgbx3NQN5b28gP7LIfKfl5zsyP5870nQUecBHZvlo4ID/Zfq8TzV93sfr829W0+ff9Pr8W0XmG5if71v5+Vxdx+S9YYwvRxCY6Fse9ljgNB9N0H1s4LrdGHhGDq/7uMB1u7GtL8HvqwPfYXPjxrEE3b8QOYh3PHA9AfTakP3n+qzU60P0Tu/x6TKeKcMtzx1U7g7YZjzzU9PgT5+FqdmyrfAFv3/75Ws/oXzrDlZFkf7PphLvNbfO71nwv+xviff+nt57is1T8jnLqVekjoZFXqPtXGVi+5VvLdg9P8EDET3IZQFFD3LXBj64ZyChdV8X5uCeFNRp/YA7FCcAlzVhG/VfUrPJgPk2YGasJv1X3UoBvUOLzN+3gRsqbhmMHYdvE8aaU3Jhj7Fu3ZIj6J4U+LrlStLZ/8kiOw4nAnkEem2TA8+N46WEwMtNgeu+isTLFBFe+gN5AXptUwR4KSXwckvguseReJkqwstJQF6AXttUAV5qEXiZFrjuq0m83C7Cy8lAXoBe2+0CvJQReLkzcN2/IPEyXYSXU4C8AL226QK8lBN4uTtw3deQeJkhwssAIC9Ar22GAC8VBF7uDVz3eBIvM0V4+Q6QF6DXNlOAl9oEXmYFrvtaEi/3i/ByKpAXoNd2vwAvlQReHgxc93UkXmaL8HIakBeg1zZbgJc6BF4eDlz3BBIvc0R4GQjkBei1zRHgpS6Bl7mB655I4mWeCC+nA3kBem3zBHipR+BlfuC6ryfxskCElzOAvAC9tgUCvNQn8LIwcN03kHhZJMLLICAvQK9tkQAvDQi8LA5c9yQSL0tEeBkM5AXotS0R4GU7Ai9LA9c9mcTLMhFezgTyAvTalgnwsj2Bl+WB676RxMsKEV6+C+QF6LWtEOClIYGXZwPX/UsSLytFeDkLyAvQa1spwEsjAi8vBK77JhIvq0R4GQLkBei1rRLgZQcCLy8FrnsKiZfVIrx8D8gL0GtbLcDLjgRe1gSu+2YSL6+K8HI2kBeg1/aqAC+NCby8EbjuX5F4WSvCyzlAXoBe21oBXpoQeHkrcN23kHhZJ8LLUCAvQK9tnQAvOxF4eSdw3VNJvKwX4eVcIC9Ar229AC87E3jZELjuW0m8bBTh5ftAXoBe20YBXpoSePkwcN23kXjZJMLLeci71gF52STASzMCLx8HrnsaiZfNIrwMA/IC9No2C/CyC4GXXKuwdd9O4qWklQYvP0D+3ixOs5UEnhvHy64EXsoC130HiZdyEV5+COQF6LWVC/CyG4GXysB1/5rESx0RXoYDeQF6bXUEeGlO4KV+4LrvJPHSQISXEUBegF5bAwFedifw0jBw3dNJvDQS4eVHQF6AXlsjAV72IPDSOHDdd5F4aSLCy/lAXoBeWxMBXqoIvDQNXPdvSLw0E+HlAiAvQK+tmQAvLQi87Ba47rtJvDQX4WUkkBeg19ZcgJc9CbxUBa57BomXFiK8/BjIC9BrayHAS0sCL60C130PiZfWIrxcCOQF6LW1FuClFYGXNoHr/i2Jl7YivFwE5AXotbUV4KU1gZd2geu+l8RLexFeRgF5AXpt7QV42YvASxK47pkkXkyEl58AeQF6bSbAy94EXjoFrvs+Ei+dRXj5KZAXoNfWWYCXNgReugSu+3ckXrqK8HIxkBeg19ZVgJe2BF4OCVz3LBIv3UR4GQ3kBei1dRPgZR8CL90D130/iZceIrxcAuQF6LX1EOBlXwIvhwWu+wESL71EeLkUyAvQa+slwEs7Ai9HBK779yReeovwchmQF6DX1luAl/YEXo4OXPeDJF76iPAyBsgL0GvrI8DLfgRejglc92wSL31FePkZkBeg19ZXgJf9CbwcH7juh0i89BPh5edAXoBeWz8BXhICLycGrvsPJF76i/ByOZAXoNfWX4AXI/BySuC6HybxMkCEl7FAXoBe2wABXjoQeDktcN1zSLwMFOHlCiAvQK9toAAvHQm8DApc9yMkXgaL8HIlkBeg1zZYgJdOBF7OClz3H0m8DBHh5SogL0CvbYgAL50JvJwTuO65JF6GivAyDsgL0GsbKsDLAQRezgtc9zwSL8NEeLkayAvQaxsmwMuBBF6GB677URIvI0R4+QWQF6DXNkKAly4EXi4IXPefSLyMFOHlGiAvQK9tpAAvXQm8XBS47vkkXkaJ8DIeyAvQaxslwMtBBF4uDlz3AhIvo0V4uRbIC9BrGy3Ay8EEXi4LXPdjJF7GiPByHZAXoNc2RoCXQwi8XB647j+TeBkrwssEIC9Ar22sAC/dCLxcFbjuhSRexonwMhHIC9BrGyfAy9cIvFwTuO5FJF7Gi/ByPZAXoNc2XoCXrxN4mRC47sdJvEwU4eUGIC9Arw3Zf6nEXB2vz05MX+iftpPSdnLaTknbgLR9J22npu20tA1M2+lpOyNtg9I2OG1npu27aTsrbUPS9r20nZ22c9I2NG3npu37aXP3aHf3nXb30nX3B3X3PHT3cXP3pnL323H3EHH3RXC/9e5+v9r9Jq/7nVH324nu9+Dcb1y53+1xv0Xifl/BfWfcfQ/WfbfPfV/JfQfDXVfurpV11/+5a5rcdRru3LM7n+bOEbjjnu5Yjts/ddvcbjvCjY3Ob2aeJuHy1OFa3D2yO1wX+P22T0mXMYkw/k7G+ZGU5TkqnJD9yuhbZB+warwRXSO6wMPSAo8jBHRS4BsIR6Saj2eAKbKB8EvgBgLQa2P1Xym4/04BLusmoBcMVpzWXxJYuSnwMcIN3jcRdE8RGSOmAHMJ9NqQ/Ufe+LFseV/FjZ8p5Zycf2YwT2o2mb93U1NobhYYzG8mDGq/insk9isBKG8JfY/EHbJcSTh0d0vgWxvLSYcsp4psbUwFDpxAr23qV3CP5FaBldhUwkpsWuBjhBu8byXovl1kjLgNmEug13Z73COR2Pi5jbVHgg76NGDQgedbDHi+hbZimMYYIIHBcbW5lb+/zGxC79lOBe7Z3iGwUXAHwftfE7x3y6zKL5OxA/U8YUfizsA3jtzOUw+C/9NFNo7uBPIJ9NqA/UcbN+5k5IYwbkwnjxurCOPG3YGPG6tIB15miIwbdwHHDaDXNuMreODlN4FvY7kx4m8EVu4V2LZg6J4pMkbcDcwl0GubGXhuHC8vEXIzS4AXhu77RXiZAeQF6LXdL8DLakJuHhTghaF7tggv9wB5AXptswV4eZmQm4cFeGHoniPCy2+BvAC9tjkCvLxCyM1cAV4YuueJ8HIvkBeg1zZPgJc1hNzMF+CFoXuBCC8zgbwAvbYFAry8SsjNQgFeGLoXifByH5AXoNe2SICX1wi5WSzAC0P3EhFefgfkBei1LRHg5XVCbpYK8MLQvUyEl1lAXoBe2zIBXt4g5Ga5AC8M3StEeLkfyAvQa1shwMtaQm6eFeCFoXulCC8PAHkBem0rBXh5k5CbFwR4YeheJcLL74G8AL22VQK8/J2Qm5cEeGHoXi3Cy4NAXoBe22oBXt4i5GaNAC8M3a+K8DIbyAvQa3tVgJd1hNy8IcALQ/daEV4eAvIC9NrWCvDyNiE3bwnwwtC9ToSXPwB5AXpt6wR4+QchN+8I8MLQvV6El4eBvAC9tvUCvLxDyM0GAV4YujeK8DIHyAvQa9sowMt6Qm4+FOCFoXuTCC+PAHkBem2bBHh5l5CbjwV4YejeLMLLH4G8AL22zQK8vEfITa51+LwwdJe01uBlLvJ3JXCarSTw3DheNhByUybAC0N3uQgv84C8AL22cgFeNhJyUynAC0N3HRFeHgXyAvTa6gjw8j4hN/UFeGHobiDCy5+AvAC9tgYCvHxAyE1DAV4YuhuJ8DIfyAvQa2skwMuHhNw0FuCFobuJCC8LgLwAvbYmArxsIuSmqQAvDN3NRHh5DMgL0GtrJsDLR4Tc7CbAC0N3cxFe/gzkBei1NRfg5Z+E3FQJ8MLQ3UKEl4VAXoBeWwsBXj4m5KaVAC8M3a1FeFkE5AXotbUW4GUzITdtBHhh6G4rwsvjQF6AXltbAV62EHLTToAXhu72Irz8BcgL0GtrL8DLvwi5SQR4Yeg2EV4WA3kBem3I/kvtZd54l3ZT25YCNS4pB9aoalQbgRqfiEYldm1J+DX+NRqV2AQBo5ZGoxK7XsCoZdGoxCYJGPVkNCqxGwWMeioaldhNAkYtj0YldrOAUSuiUYndImDU09GoxG4VMOqZaFRi0wSMejYaldgdAkatjEYldqeAUc9FoxK7S8Co56NRid0tYNQL0ajE7hEwalU0KrF7BYx6MRqV2H0CRv0tGpXYLAGjXopGJfaAgFGro1GJPShg1MvRqMQeEjDqlWhUYg8LGLUmGpXYIwJGvRqNSmyugFGvRaMSe1TAqNejUYnNFzDqjWhUYo8JGLU2GpXYQgGj3oxGJfa4gFF/j0YltljAqLeiUYk9IWDUumhUYksFjHo7GpXYkwJG/SMaldhyAaPeiUYl9rSAUeujUYk9K2DUu9GoxJ4TMOq9aFRiLwgYtSEaldiLAkZtjEYl9pKAUe9HoxJ7WcCoD6JRia0RMOrDaFR6mlvAqE3RqPTsqYBRH0Wj0pNyAkb9MxqVnusRMOrjaFR6CkHAqM3RqPTItIBRW6JR6QFPAaP+FY1Kj6MJGJWriEbZ+wJGlUSj0r1+AaNKo1HpzqSAUbWiUek+ioBRZdGodNNXwKjyaFS6RVUafo0V0ah0RS1gVO1oVDr+CxhVGY1KhxUBo+pEo9K0ChhVNxqVdoKAUfWiUYnVFzCqfgW+xk8m9P23GuAKtWtb4pZ1XUtOB6L7bztg/93ZCres6a2w/YcGpGd61uI35Z9dbk396NRaIzfbV+CW9XMgd+j+Q+dmULqMs3L43BxA1l3T+pxulxn0cg8k8VIK9h3ojx0YuNdt02UMIiz3IAG2v0fQfbBIxoH+GFKz86Myt3UdODhtW9J2Zv7vd/N/3dQwP0ZVev3zvfz/3f+y+RpV5HLV9WVNPT8buKwdgNt4tbx8+xOapSE5rP/ZtGPaF+X5xxVF6s+mWkUeV3rzbQFqLfzcwloaFqnzMx50BxbDMHPHCvxyGwM3Qlm6G1fAPaKtvHYgbKA1qfjvDOQ7VTOQ7+QN5DsXme+s/Hw75+dzR5qakgd8ZJabAQf8L9Pnu1TT57t4fb5rNX2+q9fnuxWZb0h+vt3y87m6mue9YYwvTQhM7F4R9ljgNDcj6N4jcN1uDDw7h9ddFbhuN7btTvD7a4HvsLlxYw+C7q+LHMRrAVxPAL02ZP+5Piv1+hC903tKuoxpuEvYzR1UbgDYZjzzU9PgT5+FqdmyrfAFv3/3zNfesmLrDlZFkf7PphLvNbfO71nwv+xviff+nt57is1T8jnLqVekjoZFXqPtXGVi96zYWrB73tIDET3IZQFFD3I9Ax/cM5DQug8Nc3BPCuq0PYE7FC2ByzpsG/VfUrPJgPk2YGasJv1X3UoBvUOLzF8r4IaKWwZjx6EVYawZlAt7jHXrliWEdcsRga9bTiSd/e8tsuPQGsgj0GvrHXhuHC9PEHJzdOC6+5N46SPCy15AXoBeWx8BXv5KyM0xges+icRLXxFe9gbyAvTa+grwspSQm+MD130yiZd+Iry0AfIC9Nr6CfCyjJCbE0PXTeKlvwgvbYG8AL22/gK8PEnIzSmB6x5A4mWACC/7AHkBem0DBHh5ipCb0wLX/R0SLwNFeNkXyAvQaxsowMtyQm4GBa77VBIvg0V4aQfkBei1DRbgZQUhN2cFrvs0Ei9DRHhpD+QF6LUNEeDlaUJuzglc90ASL0NFeNkPyAvQaxsqwMszhNycF7ju00m8DBPhZX8gL0CvbZgAL88ScjM8cN1nkHgZIcJLAuQF6LWNEOBlJSE3F4T+SwEkXkaK8GJAXoBe20gBXp4j5OaiwHUPJvEySoSXDkBegF7bKAFenifk5uLAdZ9J4mW0CC8dgbwAvbbRAry8QMjNZYHr/i6JlzEivHQC8gL02sYI8LKKkJvLA9d9FomXsSK8dAbyAvTaxgrw8iIhN1cFrnsIiZdxIrwcAOQF6LWNE+Dlb4TcXBO47u+ReBkvwsuBQF6AXtt4AV5eIuRmQuC6zybxMlGEly5AXoBe20QBXlYTcjMpcN3nkHiZLMJLVyAvQK9tsgAvLxNyc1PguoeSeJkiwstBQF6AXtsUAV5eIeTmlsB1n0viZaoILwcDeQF6bVMFeFlDyM20wHV/n8TL7SK8HALkBei13S7Ay6uE3NwZuO7zSLxMF+GlG/KudUBepgvw8hohN3cHrnsYiZcZIrx8DcgL0GubIcDL64Tc3Bu47h+QeJkpwsvXgbwAvbaZAry8QcjNrMB1/5DEy/0ivHQH8gL02u4X4GUtITcPBq57OImX2SK89ADyAvTaZgvw8iYhNw8HrnsEiZc5Irz0BPIC9NrmCPDyd0Ju5gau+0ckXuaJ8HIokBeg1zZPgJe3CLmZH7ju80m8LBDh5TAgL0CvbYEAL+sIuVkYuO4LSLwsEuGlF5AXoNe2SICXtwm5WRy47pEkXpaI8PINIC9Ar22JAC//IORmaeC6f0ziZZkIL4cDeQF6bcsEeHmHkJvlgeu+kMTLChFejgDyAvTaVgjwsp6Qm2cD130RiZeVIrz0BvIC9NpWCvDyLiE3LwSuexSJl1UivBwJ5AXota0S4OU9Qm5eClz3T0i8rBbh5SggL0CvbbUALxsIuVkTuO6fknh5VYSXo4G8AL22VwV42UjIzRuB676YxMtaEV76AHkBem1rBXh5n5CbtwLXPZrEyzoRXr4J5AXota0T4OUDQm7eCVz3JSRe1ovw8i0gL0Cvbb0ALx8ScrMhcN2XknjZKMLLMUBegF7bRgFeNhFy82Hgui8j8bJJhJe+QF6AXtsmAV4+IuTm48B1jyHxslmEl2OBvAC9ts0CvPyTkJvcXmHr/hmJl5K9NHg5DsgL0GsrCTw3jpePCbkpC1z3z0m8lIvwcjyQF6DXVi7Ay2ZCbioD1305iZc6Irz0A/IC9NrqCPCyhZCb+oHrHkvipYEILycAeQF6bQ0EePkXITcNA9d9BYmXRiK8fBvIC9BrayTAS64Cn5vGgeu+ksRLExFeTgTyAvTamgjwUkLgpWnguq8i8dJMhJf+QF6AXlszAV5KCbzsFrjucSRemovwchKQF6DX1lyAl1oEXqoC1301iZcWIrycDOQF6LW1EOCljMBLq8B1/4LES2sRXk4B8gL02loL8FJO4KVN4LqvIfHSVoSXAUBegF5bWwFeKgi8tAtc93gSL+1FePkOkBeg19ZegJfaBF6SwHVfS+LFRHg5FcgL0GszAV4qCbx0Clz3dSReOovwchqQF6DX1lmAlzoEXroErnsCiZeuIrwMBPIC9Nq6CvBSl8DLIYHrnkjipZsIL6cDeQF6bd0EeKlH4KV74LqvJ/HSQ4SXM4C8AL22HgK81Cfwcljgum8g8dJLhJdBQF6AXhuy/1J7c3W9Pmudat4rbXunrU3a2qZtn7Ttm7Z2aWuftv3Stn/akrRZ2jqkrWPaOqWtc9oOSNuBaeuStq5pOyhtB6ftkLS5e7S7+05/ci/dtLl7Hrr7uLl7U7n77bh7iLj7Irjfene/X+1+k9f9zqj77UT3e3DuN67c7/a43yJxv6/gvjPuvgfrvtvnvq/kvoPhrit318q66//cNU3uOg137tmdT3PnCNxxT3csx+2fum1utx3hxkbnNzNPg3F56tAT9x3bDocG/n3dQekyBhPG3zNxfiRleY4KJ2S/MvoW2QesGr+LrhFdYKO0wCpCQI/YK2wwm6SaWxB09xbZQDgLuIEA9NpY/VcK7r9BwGUNAXrBYMVpPYvAytGBjxFu8B5C0N1HZIz4HjCXQK8N2X/kjR/LlvdV3Pj5XgUn558ZzJOaTebv3dQUmrMFBvOzCYPaOXGPxM4RgHJo6Hsk7pDlHYRDd8cEvrUxlXTIsq/I1sa5wIET6LX1/QrukXxfYCV2LmEldnzgY4QbvL9P0N1PZIw4D5hLoNfWL+6RSGz8nFfByTk86MOAQQeebzHg+RbaimEYYYD8ATA4rja38veXmU3oPdtzgXu2PxTYKPghwfvhBO/dMqvyy2TsQN1J2JE4MfCNI7fztB3B//4iG0cjgHwCvTZg/9HGjRGE3PyIMG78iDxu3EUYN04JfNy4i3TgZYDIuHE+cNwAem2s/gv5wMsFgW9juTHibgIrpwlsWzB0DxQZI0YCcwn02gYGnhvHywxCbgYJ8MLQPViElx8DeQF6bYMFeLmHkJuzBHhh6B4iwsuFQF6AXtsQAV5+S8jNOQK8MHQPFeHlIiAvQK9tqAAv9xJyc54ALwzdw0R4GQXkBei1DRPgZSYhN8MFeGHoHiHCy0+AvAC9thECvNxHyM0FArwwdI8U4eWnQF6AXttIAV5+R8jNRQK8MHSPEuHlYiAvQK9tlAAvswi5uViAF4bu0SK8jAbyAvTaRgvwcj8hN5cJ8MLQPUaEl0uAvAC9tjECvDxAyM3lArwwdI8V4eVSIC9Ar22sAC+/J+TmKgFeGLrHifByGZAXoNc2ToCXBwm5uUaAF4bu8SK8jAHyAvTaxgvwMpuQmwkCvDB0TxTh5WdAXoBe20QBXh4i5GaSAC8M3ZNFePk5kBeg1zZZgJc/EHJzkwAvDN1TRHi5HMgL0GubIsDLw4Tc3CLAC0P3VBFexgJ5AXptUwV4mUPIzTQBXhi6bxfh5QogL0Cv7XYBXh4h5OZOAV4YuqeL8HIlkBeg1zZdgJc/EnJztwAvDN0zRHi5CsgL0GubIcDLXEJu7hXghaF7pggv44C8AL22mQK8zCPkZpYALwzd94vwcjWQF6DXdr8AL48ScvOgAC8M3bNFePkFkBeg1zZbgJc/EXLzsAAvDN1zRHi5BsgL0GubI8DLfEJu5grwwtA9T4SX8UBegF7bPAFeFhByM1+AF4buBSK8XAvkBei1LRDg5TFCbhYK8MLQvUiEl+uAvAC9tkUCvPyZkJvFArwwdC8R4WUCkBeg17ZEgJeFhNwsFeCFoXuZCC8TgbwAvbZlArwsIuRmuQAvDN0rRHi5HsgL0GtbIcDL44TcPCvAC0P3ShFebgDyAvTaVgrw8hdCbl4Q4IWhe5UIL5OAvAC9tlUCvCwm5OYlAV4YuleL8DIZyAvQa0P2H/nGu7Sb2rYUqPHGCmCNqka1Eajxl9GoxK4tCb/Gm6JRiU0QMGpKNCqx6wWMujkaldgkAaN+FY1Kt6gEjLolGpWuqAWMmhqNSsd/AaNujUalw4qAUbdFo9K0Chg1LRqVdoKAUbdHoxK7Q8CoO6JRid0pYNSvo1GJ3SVg1J3RqMTuFjBqejQqsXsEjLorGpXYvQJG/SYaldh9AkbdHY1KbJaAUTOiUYk9IGDUPdGoxB4UMOq30ajEHhIw6t5oVGIPCxg1MxqV2CMCRt0XjUpsroBRv4tGJfaogFGzolGJzRcw6v5oVGKPCRj1QDQqsYUCRv0+GpXY4wJGPRiNSmyxgFGzo1GJPSFg1EPRqMSWChj1h2hUYk8KGPVwNCqx5QJGzYlGJfa0gFGPRKMSe1bAqD9GoxJ7TsCoudGoxF4QMGpeNCqxFwWMejQaldhLAkb9KRqV2MsCRs2PRiW2RsCoBdGoxF4TMOqxaFRibwgY9edoVGJvChi1MBqV2FsCRi2KRiX2toBRj0ejEntHwKi/RKMSe1fAqMXRqMQ2CBi1JBqV2PsCRj0RjUrsQwGj/hqNSuwjAaOWRqMS+1jAqGXRqMS2CBj1ZDQqsVxp+DU+FY1KrFTAqOXRqMTKBIxaEY1KrELAqKejUYlVChj1TDQqsboCRj0bjUqsvoBRKyvwNX4yoe+/9Rzw/ls9W+OWdWhrTgei++95YP+duBduWf33wvYfGpDt0367oOKzy62pH2v20sjNCxW4ZR0I5G5N4Lk5J13GeTl8bl4j665pfU73CwReXifxUgr2HeiPvR64123TZZxDWO6bAmz/gKD77yIZB/pjSM3Oj8rc1nXg0LRtSdu5+b/fz/9106r8GFXp9c8P8v93/8vme7Eil6uuL2vq+Q+By/obcBuvlpdvf0KzNCyH9T+bXkr7ojz/uKJI/dlUq8jjSm++LUCthZ9bWEvDInV+xoPuwGIYZr5UgV/uauBGKEv36gq4R7SV198IG2gvV/x3BvJXqhnIX/EG8jVF5jsvP9+a/HzuSNOr5AEfmeXXgAP+l+nz16vp89e9Pn+jmj5/w+vztUXmG5afb21+PlfXm3lvGOPLywQm/l4R9ljgNL9G0P1W4LrdGPjDHF73usB1u7Ht7wS/3w58h82NG28RdP9D5CDe28D1BNBrQ/af67NSrw/RO72D0mUMA/ajO6j8HGCb8cxPTYM/fRamZsu2whf8/v1HvvZ3KrbuYFUU6f9sKvFec+v8ngX/y/6WeO/v6b2n2Dwln7OcekXqaFjkNdrOVSb2HxVbC3bP3/EChB7ksoCiB7l3Ax/cM5DQut8Lc3BPCuq0fwB3KN4BLmvDNuq/pGaTAfNtwMxYTfqvupUCeocWmb/1wBWsWwZjx2E9Yaw5Jxf2GOvWLTcSdH8Y+LqlNens/yaRHYd3gTwCvbZNgefG8fJLQm4+Dlz3XiReNovw8h6QF6DXtlmAl5sIucntHbbuvUm8lOytwcsG5PYeTrOVBJ4bx8sUQm7KAtfdhsRLuQgvG4G8AL22cgFebibkpjJw3W1JvNQR4eV9IC9Ar62OAC+/IuSmfuC69yHx0kCElw+AvAC9tgYCvNxCyE3DwHXvS+KlkQgvHwJ5AXptjQR4mUrITePAdbcj8dJEhJdNQF6AXlsTAV5uJeSmaeC625N4aSbCy0dAXoBeWzMBXm4j5Ga3wHXvR+KluQgv/wTyAvTamgvwMo2Qm6rAde9P4qWFCC8fA3kBem0tBHi5nZCbVoHrTki8tBbhZTOQF6DX1lqAlzsIuWkTuG4j8dJWhJctQF6AXltbAV5+TchNu8B1dyDx0l6El38BeQF6be0FeLmTkJskcN0dSbyYCC+52sBtWyAvJsDLdEJuOgWuuxOJl84ivJQAeQF6bZ0FeLmLkJsugevuTOKlqwgvpUBegF5bVwFefkPIzSGB6z6AxEs3EV5qAXkBem3dBHi5m5Cb7oHrPpDESw8RXsqAvAC9th4CvMwg5OawwHV3IfHSS4SXciAvQK+tlwAv9xByc0TguruSeOktwksFkBeg19ZbgJffEnJzdOC6DyLx0keEl9pAXoBeWx8BXu4l5OaYwHUfTOKlrwgvlUBegF5bXwFeZhJyc3zgug8h8dJPhJc6QF6AXls/AV7uI+TmxMB1dyPx0l+El7pAXoBeW38BXn5HyM0pgev+GomXASK81APyAvTaBgjwMouQm9MC1/11Ei8DRXipD+QF6LUNFODlfkJuBgWuuzuJl8EivDQA8gL02gYL8PIAITdnBa67B4mXISK8bAfkBei1DRHg5feM31kPXHdPEi9DRXjZHsgL0GsbKsDLg4TcnBe47kNJvAwT4aUhkBeg1zZMgJfZhNwMD1z3YSReRojw0gjIC9BrGyHAy0OE3FwQuO5eJF5GivCyA5AXoNc2UoCXPxByc1Hgur9B4mWUCC87AnkBem2jBHh5mJCbiwPXfTiJl9EivDQG8gL02kYL8DKHkJvLAtd9BImXMSK8NAHyAvTaxgjw8gghN5cHrrs3iZexIrzsBOQF6LWNFeDlj4TcXBW47iNJvIwT4WVnIC9Ar22cAC9zCbm5JnDdR5F4GS/CS1MgL0CvbbwAL/MIuZkQuO6jSbxMFOGlGZAXoNc2UYCXRwm5mRS47j4kXiaL8LILkBeg1zZZgJc/EXJzU+C6v0niZYoIL7sCeQF6bVMEeJlPyM0tgev+FomXqSK87AbkBei1TRXgZQEhN9MC130MiZfbRXhpDuQF6LXdLsDLY4Tc3Bm47r4kXqaL8LI7kBeg1zZdgJc/E3Jzd+C6jyXxMkOElz2AvAC9thkCvCwk5ObewHUfR+JlpggvVUBegF7bTAFeFhFyMytw3ceTeLlfhJcWQF6AXtv9Arw8TsjNg4Hr7kfiZbYIL3sCeQF6bbMFePkLITcPB677BBIvc0R4aQnkBei1zRHgZTEhN3MD1/1tEi/zRHhpBeQF6LXNE+BlCSE38wPXfSKJlwUivLQG8gL02hYI8PIEITcLA9fdn8TLIhFe9gLyAvTaFgnw8ldCbhYHrvskEi9LRHjZG8gL0GtbIsDLUkJulgau+2QSL8tEeGkD5AXotS0T4GUZITfLA9d9ComXFSK8tAXyAvTaVgjw8iQhN88GrnsAiZeVIrzsA+QF6LWtFODlKUJuXghc93dIvKwS4WVfIC9Ar22VAC/LCbl5KXDdp5J4WS3CSzsgL0CvbbUALysIuVkTuO7TSLy8KsJLeyAvQK/tVQFenibk5o3AdQ8k8bJWhJf9gLwAvba1Arw8Q8jNW4HrPp3EyzoRXvYH8gL02tYJ8PIsITfvBK77DBIv60V4SYC8AL229QK8rCTkZkPoukm8bBThxYC8AL02ZP+Vp8uo5/XZu6nf76VtQ9o2pu39tH2Qtg/TtiltH6Xtn2n7OG2b07Ylbf9KWy7tq5K0laatVtrK0laetoq01U5bZdrqpM3do93dd9rdS9fdH9Td89Ddx83dm8rdb8fdQ8TdF8H91rv7/Wr3m7zud0bdbye634Nzv3HlfrfH/RaJ+30F951x9z1Y990+930l9x0Md125u1bWXf/nrmly12m4c8/ufJo7R+COe7pjOW7/1G1zu+0INzY6v5l56oDLU4d398It6729wh6HzkmX4foOPQ51xPmRlOU5KpyQ/croW2QfsGrshK4RXeCL6QC4jrCi/HDvsMF8OdX8NkH3JpENhM7ADQSg18bqv1Jw/50DXNYBQC8YrDitnQkrsY8DHyPc4H0AQfdmkTHiQGAugV4bsv/IGz+WLe+ruPFzYG1Ozj8zmCc1m8zfu6kpNF0EBvMuhEGta9wjsa4CUB4U+h6JO2T5Q8KWea5N2Fsb55IOWZa0yUlsbRyMHDhxmo3VfyHvkRwisBI7mLASKwt8jHCD9yEE3eUiY0Q3YC6BXhuy/1T3SBQ2frqx9kjQQf8aMOjA8y0GPN9CWzF8jTBAfh0YHFebW/n7y8wm9J7twcA92+4CGwXdCd73IHjvllmVXyZjB2oEYUeiMvCNI7fz9DxBdx2RjaOeQD6BXhuw/2jjRk/CuHEoYdw4lDxunE/gp37g48b5pAMvDUTGjcOA4wbQa2vwFTzw0ivwbSw3RowksNJQYNuCobuRyBjxDWAugV5bo8Bz43j5MSE3jQV4YehuIsLL4UBegF5bEwFeLiTkpqkALwzdzUR4OQLIC9BraybAy0WE3OwmwAtDd3MRXnoDeQF6bc0FeBlFyE2VAC8M3S1EeDkSyAvQa2shwMtPCLlpJcALQ3drEV6OAvIC9NpaC/DyU0Ju2gjwwtDdVoSXo4G8AL22tgK8XEzITTsBXhi624vw0gfIC9Bray/Ay2hCbhIBXhi6TYSXbwJ5AXptJsDLJYTcdBLghaG7swgv3wLyAvTaOgvwcikhN10EeGHo7irCyzFAXoBeW1cBXi4j5OYQAV4YuruJ8NIXyAvQa+smwMsYQm66C/DC0N1DhJdjgbwAvbYeArz8jJCbwwR4YejuJcLLcUBegF5bLwFefk7IzRECvDB09xbh5XggL0CvrbcAL5cTcnO0AC8M3X1EeOkH5AXotfUR4GUsITfHCPDC0N1XhJcTgLwAvba+ArxcQcjN8QK8MHT3E+Hl20BegF5bPwFeriTk5kQBXhi6+4vwciKQF6DX1l+Al6sIuTlFgBeG7gEivPQH8gL02gYI8DKOkJvTBHhh6B4owstJQF6AXttAAV6uJuRmkAAvDN2DRXg5GcgL0GsbLMDLLwi5OUuAF4buISK8nALkBei1DRHg5RpCbs4R4IWhe6gILwOAvAC9tqECvIwn5OY8AV4YuoeJ8PIdIC9Ar22YAC/XEnIzXIAXhu4RIrycCuQF6LWNEODlOkJuLhDghaF7pAgvpwF5AXptIwV4mUDIzUUCvDB0jxLhZSCQF6DXNkqAl4mE3FwswAtD92gRXk4H8gL02kYL8HI9ITeXCfDC0D1GhJczgLwAvbYxArzcQMjN5QK8MHSPFeFlEJAXoNc2VoCXSYTcXCXAC0P3OBFeBgN5AXpt4wR4mUzIzTUCvDB0jxfh5UwgL0CvDdl/5Bvv0m5q21Kgxu8ib7yralQbgRrPikYldm1J+DUOiUYlNkHAqO9FoxK7XsCos6NRiU0SMOqcaFRiNwoYNTQaldhNAkadG41K7GYBo74fjUrsFgGjzotGJXargFHDolGJTRMw6gfRqMTuEDDqh9GoxO4UMGp4NCqxuwSMGhGNSuxuAaN+FI1K7B4Bo86PRiV2r4BRF0SjErtPwKiR0ajEZgkY9eNoVGIPCBh1YTQqsQcFjLooGpXYQwJGjYpGJfawgFE/iUYl9oiAUT+NRiU2V8Coi6NRiT0qYNToaFRi8wWMuiQaldhjAkZdGo1KbKGAUZdFoxJ7XMCoMdGoxBYLGPWzaFRiTwgY9fNoVGJLBYy6PBqV2JMCRo2NRiW2XMCoK6JRiT0tYNSV0ajEnhUw6qpoVGLPCRg1LhqV2AsCRl0djUrsRQGjfhGNSuwlAaOuiUYl9rKAUeOjUYmtETDq2mhUYq8JGHVdNCqxNwSMmhCNSuxNAaMmRqMSe0vAqOujUYm9LWDUDdGoxN4RMGpSNCqxdwWMmhyNSmyDgFE3RqMSe1/AqF9GoxL7UMCom6JRiX0kYNSUaFRiHwsYdXM0KrEtAkb9KhqVWK40/BpviUYlVipg1NRoVGJlAkbdGo1KrELAqNuiUYlVChg1LRqVWF0Bo26PRiVWX8CoO2rja/xkQt9/69fA+2+9uxduWe/txelAdP/dCey/SuD9y+oEft+7FypyuV61P7vcmvoxQeS+d9Nr45b1OpC7CYHnZni6jAty+NxcT9Zd0/qc7ukEXm4g8VIK9h3oj90QuNdt02UMJyz3RgG2f0zQ/UuRjAP9MaRm50dlbus6cETatqTtR/m/5+f/uumu/BhV6fXPj/P/d//L5vtN7Vyuur6sqecXApd1N3Abr5aXb39CszQyh/U/m2akfVGef1xRpP5sqlXkcaU33xag1sLPLaylYZE6P+NBd2AxDDNn1Cb8oDpwI5Sl+57acI9oK6+7CRtov6393xnI761mIL/XG8hnFpnvgvx8M/PzuSNN95EHfGSWfwcc8L9Mn8+qps9neX1+fzV9fr/X5w8UmW9kfr4H8vO5un6f94YxvvyWwMSDtcMeC5zm3xF0zw5ctxsDL8zhdT8UuG43tj1I8PvmwHfY3Lgxm6D7VyIH8f4AXE8AvTZk/7k+K/X6EL3Te066jK8B+9EdVP41YJvxzE9Ngz99FqZmy7bCF/z+fThf+5zaW3ewKor0fzaVeK+5dX7Pgv9lf0u89/f03lNsnpLPWU69InU0LPIabecqE/tw7a0Fu+dzvAChB7ksoOhB7tbAB/cMJLTu28Ic3JOCOu1h4A7FHOCypm2j/ktqNhkw3wbMjNWk/6pbKaB3aJH5ewS4gnXLYOw4PEIYa4bnwh5j3brluwTddwa+bnmXdPZ/usiOwx+BPAK9tumB58bxchYhN3cHrvs9Ei8zRHiZC+QF6LXNEOBlCCE39wauewOJl5kivMwD8gL02mYK8PI9Qm5mBa57I4mX+0V4eRTIC9Bru1+Al7MZJ/gC1/0+iZfZIrz8CcgL0GubLcDLOYTcPBy47g9IvMwR4WU+kBeg1zZHgJehhNzMDVz3hyRe5onwsgDIC9BrmyfAy7mE3MwPXPcmEi8LRHh5DMgL0GtbIMDL9wm5WRi47o9IvCwS4eXPQF6AXtsiAV7OI+RmceC6/0niZYkILwuBvAC9tiUCvAwj5GZp4Lo/JvGyTISXRUBegF7bMgFefkDIzfLAdW8m8bJChJfHgbwAvbYVArz8kJCbZwPXvYXEy0oRXv4C5AXota0U4GU4ITcvBK77XyReVonwshjIC9BrWyXAywhCbl4KXHeuNoeX1SK8LAHyAvTaVgvw8iNCbtYErruExMurIrw8AeQF6LW9KsDL+YTcvBG47lISL2tFePkrkBeg17ZWgJcLCLl5K3DdtUi8rBPhZSmQF6DXtk6Al5GE3LwTuO4yEi/rRXhZBuQF6LWtF+Dlx4TcbAhcdzmJl40ivDwJ5AXotW0U4OVCQm4+DFx3BYmXTSK8PAXkBei1bRLg5SJCbj4OXHdtEi+bRXhZDuQF6LVtFuBlFCE3ubZh664k8VLSVoOXFcjfa8JptpLAc+N4+QkhN2WB665D4qVchJengbwAvbZyAV5+SshNZeC665J4qSPCyzNAXoBeWx0BXi4m5KZ+4LrrkXhpIMLLs0BegF5bAwFeRhNy0zBw3fVJvDQS4WUlkBeg19ZIgJdLCLlpHLjuBiRemojw8hyQF6DX1kSAl0sJuWkauO7tSLw0E+HleSAvQK+tmQAvlxFys1vgurcn8dJchJcXgLwAvbbmAryMIeSmKnDdDUm8tBDhZRWQF6DX1kKAl58RctMqcN2NSLy0FuHlRSAvQK+ttQAvPyfkpk3guncg8dJWhJe/AXkBem1tBXi5nJCbdoHr3pHES3sRXl4C8gL02toL8DKWkJskcN2NSbyYCC+rgbwAvTYT4OUKQm46Ba67CYmXziK8vAzkBei1dRbg5UpCbroErnsnEi9dRXh5BcgL0GvrKsDLVYTcHBK47p1JvHQT4WUNkBeg19ZNgJdxhNx0D1x3UxIvPUR4eRXIC9Br6yHAy9WE3BwWuO5mJF56ifDyGpAXoNfWS4CXXxByc0Tgunch8dJbhJfXgbwAvbbeArxcQ8jN0YHr3pXESx8RXt4A8gL02voI8DKekJtjAte9G4mXviK8rAXyAvTa+grwci0hN8cHrrs5iZd+Iry8CeQF6LX1E+DlOkJuTgxc9+4kXvqL8PJ3IC9Ar62/AC8TCLk5JXDde5B4GSDCy1tAXoBe2wABXiYScnNa4LqrSLwMFOFlHZAXoNc2UICX6wm5GRS47hYkXgaL8PI2kBeg1zZYgJcbCLk5K3Dde5J4GSLCyz+AvAC9tiECvEwi5OacwHW3JPEyVISXd4C8AL22oQK8TCbk5rzAdbci8TJMhJf1QF6AXtswAV5uJORmeOC6W5N4GSHCy7tAXoBe2wgBXn5JyM0Fgevei8TLSBFe3gPyAvTaRgrwchMhNxcFrntvEi+jRHjZAOQF6LWNEuBlCiE3Fweuuw2Jl9EivGwE8gL02kYL8HIzITeXBa67LYmXMSK8vA/kBei1jRHg5VeE3FweuO59SLyMFeHlAyAvQK9trAAvtxByc1Xguvcl8TJOhJcPgbwAvbZxArxMJeTmmsB1tyPxMl6El01AXoBe23gBXm4l5GZC4Lrbk3iZKMLLR0BegF7bRAFebiPkZlLguvcj8TJZhJd/AnkBem2TBXiZRsjNTYHr3p/EyxQRXj4G8gL02qYI8HI7ITe3BK47IfEyVYSXzUBegF7bVAFe7iDkZlrguo3Ey+0ivGwB8gL02pD9V54uo77XZ39MNc9N27y0PZq2P6VtftoWpO2xtP05bQvTtihtj6ftL2lbnLYlaXsibX9N29K0LUvbk2l7Km3L07YibU+nzd2j3d132t1L190f1N3z0N3Hzd2byt1vx91DxN0Xwf3Wu/v9avebvO53Rt1vJ7rfg3O/ceV+t8f9Fon7fQX3nXH3PVj33T73fSX3HQx3Xbm7VtZd/+euaXLXabhzz+58mjtH4I57umM5bv/UbXO77Qg3Njq/mXn6Fy5PHW5tg1vWbW3CHoeGp8v4F2EcylXidJflOSqckP3K6FtkH7BqLEHXiC7wN2k4HyIE9M7ANxB+m2r+A0H3dJENhFJcMA3otbH6rxTcf8OBy6oF9ILBitPq8oJm5e7Axwg3eNci6J4hMkaUAXMJ9NqQ/Ufe+LFseV/FjZ+ySk7OPzOYJzWbzN+7qSk05QKDeTlhUKuIeyRWIQBl7dD3SNwhy+6ELfN7A9/aOJh0yHKmyNZGJXDgBHptM7+CeyR1BFZilYSV2KzAxwg3eNch6L5fZIyoC8wl0Gu7P+6RSGz81GXtkaCDXg8YdOD5FgOeb6GtGOoRBsj6wOC42tzK319mNqH3bP2Nqpr2QQOBjYIGBO+3I3jvllmVXyZjB6onYUfiwcA3jtzO050E3bNFNo62B/IJ9NqA/UcbN7YnjBsNCeNGQ/K4cRiBn4cDHzcOIx14mSMybjQCjhtAr23OV/DAyw6Bb2O5MeIbBFbmCmxbMHTPExkjdgTmEui1zRO4/vpwQm7mC/DC0L1AhJfGQF6AXtsCAV6OIORmoQAvDN2LRHhpAuQF6LUtEuClNyE3iwV4YeheIsLLTkBegF7bEgFejiTkZqkALwzdy0R42RnIC9BrWybAy1GE3CwX4IWhe4UIL02BvAC9thUCvBxNyM2zArwwdK8U4aUZkBeg17ZSgJc+hNy8IMALQ/cqEV52AfIC9NpWCfDyTUJuXhLghaF7tQgvuwJ5AXptqwV4+RYhN2sEeGHoflWEl92AvAC9tlcFeDmGkJs3BHhh6F4rwktzIC9Ar22tAC99Cbl5S4AXhu51IrzsDuQF6LWtE+DlWEJu3hHghaF7vQgvewB5AXpt6wV4OY6Qmw0CvDB0bxThpQrIC9Br2yjAy/GE3HwowAtD9yYRXloAeQF6bZsEeOlHyM3HArwwdG8W4WVPIC9Ar22zAC8nMH7Pd5/weWHoLtlHg5eWyO9l4TRbSeC5cbx8m5CbMgFeGLrLRXhpBeQF6LWVC/ByIiE3lQK8MHTXEeGlNZAXoNdWR4CX/oTc1BfghaG7gQgvewF5AXptDQR4OYmQm4YCvDB0NxLhZW8gL0CvrZEALycTctNYgBeG7iYivLQB8gL02poI8HIKITdNBXhh6G4mwktbIC9Ar62ZAC8DCLnZTYAXhu7mIrzsA+QF6LU1F+DlO4TcVAnwwtDdQoSXfYG8AL22FgK8nErITSsBXhi6W4vw0g7IC9Bray3Ay2mE3LQR4IWhu60IL+2BvAC9trYCvAwk5KadAC8M3e1FeNkPyAvQa2svwMvphNwkArwwdJsIL/sDeQF6bSbAyxmE3HQS4IWhu7MILwmQF6DX1lmAl0GE3HQR4IWhu6sILwbkBei1dRXgZTAhN4cI8MLQ3U2Elw5AXoBeWzcBXs4k5Ka7AC8M3T1EeOkI5AXotSH7j3zjXdpNbVsK1NgJeeNdVaPaCNTYORqV2LUl4dd4QDQqsQkCRh0YjUrsegGjukSjEpskYFTXaFRiNwoYdVA0KrGbBIw6OBqV2M0CRh0SjUrsFgGjukWjErtVwKivRaMSmyZg1NejUYndIWBU92hUYncKGNUjGpXYXQJG9YxGJXa3gFGHRqMSu0fAqMOiUYndK2BUr2hUYvcJGPWNaFRiswSMOjwaldgDAkYdEY1K7EEBo3pHoxJ7SMCoI6NRiT0sYNRR0ajEHhEw6uhoVGJzBYzqE41K7FEBo74ZjUpsvoBR34pGJfaYgFHHRKMSWyhgVN9oVGKPCxh1bDQqscUCRh0XjUrsCQGjjo9GJbZUwKh+0ajEnhQw6oRoVGLLBYz6djQqsacFjDoxGpXYswJG9Y9GJfacgFEnRaMSe0HAqJOjUYm9KGDUKdGoxF4SMGpANCqxlwWM+k40KrE1AkadGo1K7DUBo06LRiX2hoBRA6NRib0pYNTp0ajE3hIw6oxoVGJvCxg1KBqV2DsCRg2ORiX2roBRZ0ajEtsgYNR3o1GJvS9g1FnRqMQ+FDBqSDQqsY8EjPpeNCqxjwWMOjsaldgWAaPOiUYllisNv8ah0ajESgWMOjcalViZgFHfj0YlViFg1HnRqMQqBYwaFo1KrK6AUT+IRiVWX8CoH1bia/xkQt9/azjw/lu3tsEt67Y2nA5E998IYP892Ba3rNltsf2HBmR67Vxuh8rPLremfhwmct+7H1XilnUDkLvDAr9f4kXpMi7O4XPzDbLumtbndP+IwMvhJF5Kwb4D/bHDA/c6HbpzFxGWe6QA25cQdB8lknGgP4bU7PxIh55/rwNHpW1L2n6S//vT/F83nZ8foyq9/rkk/3/3v2y+Cypzuer6sqaeXwpc1kjgNl4tL9/+hGZpdA7rfzb9OO2L8vzjiiL1Z1OtIo8rvfm2ALUWfm5hLQ2L1PkZD7oDi2GY+eNK/HIvBG6EsnRfWAn3iLbyGknYQLuo8r8zkI+qZiAf5Q3kPyky38XZcvPzuSNNPyUP+MgsXwwc8L9Mn4+ups9He31+STV9fonX55cWmW90fr5L8/O5ui7Le8MYXy4iMDGmMvCxIK3vYoLun4Wu2+Uqh9f988B1u7FtDMHvbwa+w+bGjZ8RdH9L5CDe5cD1BNBrQ/af67NSrw/RO73D02XUA/ajO6g8HLDNeOanpsGfPgtTs2Vb4Qt+/47N135F5dYdrIoi/Z9NJd5rbp3fs+B/2d8S7/09vfcUm6fkc5ZTr0gdDYu8Rtu5ysSOrdxasHt+hRcg9CCXBRQ9yB0b+OCegYTWfVyYg3tSUKeNBe5QXAFc1vHbqP+Smk0GzLcBM2M16b/qVgroHVpk/q4ErmDdMhg7DlcyDp7kwh5j3bqlE0H3iYGvW/5IOvvfX2TH4Sogj0CvrX/guXG8dCbk5pTAdc8l8TJAhJdxQF6AXtsAAV4OIOTmtMB1zyPxMlCEl6uBvAC9toECvBxIyM2gwHU/SuJlsAgvvwDyAvTaBgvw0oWQm7MC1/0nEi9DRHi5BsgL0GsbIsBLV0Juzglc93wSL0NFeBkP5AXotQ0V4OUgQm7OC1z3AhIvw0R4uRbIC9BrGybAy8GE3AwPXPdjJF5GiPByHZAXoNc2QoCXQwi5uSBw3X8m8TJShJcJQF6AXttIAV66Mc7TBq57IYmXUSK8TATyAvTaRgnw8jVCbi4OXPciEi+jRXi5HsgL0GsbLcDL1wm5uSxw3Y+TeBkjwssNQF6AXtsYAV66E3JzeeC6/0LiZawIL5OAvAC9trECvPQg5OaqwHUvJvEyToSXyUBegF7bOAFeehJyc03gupeQeBkvwsuNQF6AXtt4AV4OJeRmQuC6nyDxMlGEl18CeQF6bRMFeDmMkJtJgev+K4mXySK83ATkBei1TRbgpRchNzcFrnspiZcpIrxMAfIC9NqmCPDyDUJubglc9zISL1NFeLkZyAvQa5sqwMvhhNxMC1z3kyRebhfh5VdAXoBe2+0CvBxByM2dget+isTLdBFebgHyAvTapgvw0puQm7sD172cxMsMEV6mAnkBem0zBHg5kpCbewPXvYLEy0wRXm4F8gL02mYK8HIUITezAtf9NImX+0V4uQ3IC9Bru1+Al6MJuXkwcN3PkHiZLcLLNCAvQK9ttgAvfQi5eThw3c+SeJkjwsvtQF6AXtscAV6+ScjN3MB1ryTxMk+ElzuAvAC9tnkCvHyLkJv5get+jsTLAhFefg3kBei1LRDg5RhCbhYGrvt5Ei+LRHi5E8gL0GtbJMBLX0JuFgeu+wUSL0tEeJkO5AXotS0R4OVYQm6WBq57FYmXZSK83AXkBei1LRPg5ThCbpYHrvtFEi8rRHj5DZAXoNe2QoCX4wm5eTZw3X8j8bJShJe7gbwAvbaVArz0I+TmhcB1v0TiZZUILzOAvAC9tlUCvJxAyM1LgeteTeJltQgv9wB5AXptqwV4+TYhN2sC1/0yiZdXRXj5LZAXoNf2qgAvJxJy80bgul8h8bJWhJd7gbwAvba1Arz0J+TmrcB1ryHxsk6El5lAXoBe2zoBXk4i5OadwHW/SuJlvQgv9wF5AXpt6wV4OZmQmw2B636NxMtGEV5+B+QF6LVtFODlFEJuPgxc9+skXjaJ8DILyAvQa9skwMsAQm4+Dlz3GyReNovwcj+QF6DXtlmAl+8QcpPbN2zda0m8lOyrwcsDQF6AXltJ4LlxvJxKyE1Z4LrfJPFSLsLL74G8AL22cgFeTiPkpjJw3X8n8VJHhJcHgbwAvbY6ArwMJOSmfuC63yLx0kCEl9lAXoBeWwMBXk4n5KZh4LrXkXhpJMLLQ0BegF5bIwFeziDkpnHgut8m8dJEhJc/AHkBem1NBHgZRMhN08B1/4PESzMRXh4G8gL02poJ8DKYkJvdAtf9DomX5iK8zAHyAvTamgvwciYhN1WB615P4qWFCC+PAHkBem0tBHj5LiE3rQLX/S6Jl9YivPwRyAvQa2stwMtZhNy0CVz3eyRe2orwMhfIC9BrayvAyxBCbtoFrnsDiZf2IrzMA/IC9NraC/DyPUJuksB1byTxYiK8PArkBei1mQAvZxNy0ylw3e+TeOkswsufgLwAvbbOArycQ8hNl8B1f0DipasIL/OBvAC9tq4CvAwl5OaQwHV/SOKlmwgvC4C8AL22bgK8nEvITffAdW8i8dJDhJfHgLwAvbYeArx8n5CbwwLX/RGJl14ivPwZyAvQa+slwMt5hNwcEbjuf5J46S3Cy0IgL0CvrbcAL8MIuTk6cN0fk3jpI8LLIiAvQK+tjwAvPyDk5pjAdW8m8dJXhJfHgbwAvba+Arz8kJCb4wPXvYXESz8RXv4C5AXotSH7rzxdRgOvz65KNY9L29Vp+0Xarknb+LRdm7br0jYhbRPTdn3abkjbpLRNTtuNaftl2m5K25S03Zy2X6XtlrRNTdutabstbe4e7e6+0+5euu7+oO6eh+4+bu7eVO5+O+4eIu6+CO633t3vV7vf5HW/M+p+O9H9Hpz7jSv3uz3ut0jc7yu474y778G67/a57yu572C468rdtbLu+j93TZO7TsOde3bn09w5Anfc0x3LcfunbpvbbUe4sdH5zczTYlyeOhyL+42gDscF/ntDF6XLWEwYh5bg/EjK8hwVTsh+ZfQtsg9YNT6BrhFd4AVpgT8nBPTEwDcQLko1X07Q3V9kA+GvwA0EoNfG6r9ScP9dBFzWUqAXFFbSZfyVwMopgY8RbvBeStA9QGSMWAbMJdBrQ/YfeePHsuV9FTd+llVycv6ZwTyp2WT+3k1NoXlSYDB/kjCoPRX3SOwpASiXh75H4g5ZNiAE9LTAtzYqKzmHLAeKbG2sAA6cQK9t4Fdwj+RpgZXYCgIrgwIfI9zg/TRB92CRMeIZYC6BXtvguEcisfHzDGuPBB30Z4FBB55vMeD5FtqK4VnCALkSGBxXm1v5+8vMJvSe7Qrgnu1zAhsFzxG8f57gvVtmVX6ZjB2o7Qn9cFbgG0du52kEQfcQkY2jF4B8Ar02YP/Rxo0XCLlZRRg3VpHHjUaEfjgn8HGjEenAy1CRceNF4LgB9NqGfgUPvPwt8G0sN0bsSGDlPIFtC4buYSJjxEvAXAK9tmEC1183JuRmuAAvDN0jRHhZDeQF6LWNEOClCSE3FwjwwtA9UoSXl4G8AL22kQK87ETIzUUCvDB0jxLh5RUgL0CvbZQALzsTcnOxAC8M3aNFeFkD5AXotY0W4KUpITeXCfDC0D1GhJdXgbwAvbYxArw0I+TmcgFeGLrHivDyGpAXoNc2VoCXXQi5uUqAF4bucSK8vA7kBei1jRPgZVdCbq4R4IWhe7wIL28AeQF6beMFeNmNkJsJArwwdE8U4WUtkBeg1zZRgJfmhNxMEuCFoXuyCC9vAnkBem2TBXjZnZCbmwR4YeieIsLL34G8AL22KQK87EHIzS0CvDB0TxXh5S0gL0CvbaoAL1WE3EwT4IWh+3YRXtYBeQF6bbcL8NKCkJs7BXhh6J4uwsvbQF6AXtt0AV72JOTmbgFeGLpniPDyDyAvQK9thgAvLQm5uVeAF4bumSK8vAPkBei1zRTgpRUhN7MEeGHovl+El/VAXoBe2/0CvLQm5OZBAV4YumeL8PIukBeg1zZbgJe9CLl5WIAXhu45Iry8B+QF6LXNEeBlb0Ju5grwwtA9T4SXDUBegF7bPAFe2hByM1+AF4buBSK8bATyAvTaFgjw0paQm4UCvDB0LxLh5X0gL0CvbZEAL/sQcrNYgBeG7iUivHwA5AXotS0R4GVfQm6WCvDC0L1MhJcPgbwAvbZlAry0I+RmuQAvDN0rRHjZBOQF6LWtEOClPSE3zwrwwtC9UoSXj4C8AL22lQK87EfIzQsCvDB0rxLh5Z9AXoBe2yoBXvYn5OYlAV4YuleL8PIxkBeg17ZagJeEkJs1ArwwdL8qwstmIC9Ar+1VAV6MkJs3BHhh6F4rwssWIC9Ar22tAC8dCLl5S4AXhu51Irz8C8gL0GtbJ8BLR0Ju3hHghaF7vQgvuTq4vgR6bcj+I994l3ZT25YCNZbUAdaoalQbgRpLo1GJXVsSfo21olGJTRAwqiwaldj1AkaVR6MSmyRgVEU0KrEbBYyqHY1K7CYBoyqjUYndLGBUnWhUYrcIGFU3GpXYrQJG1YtGJTZNwKj60ajE7hAwqkE0KrE7BYzaLhqV2F0CRm0fjUrsbgGjGkajErtHwKhG0ajE7hUwaodoVGL3CRi1YzQqsVkCRjWORiX2gIBRTaJRiT0oYNRO0ajEHhIwaudoVGIPCxjVNBqV2CMCRjWLRiU2V8CoXaJRiT0qYNSu0ajE5gsYtVs0KrHHBIxqHo1KbKGAUbtHoxJ7XMCoPaJRiS0WMKoqGpXYEwJGtYhGJbZUwKg9o1GJPSlgVMtoVGLLBYxqFY1K7GkBo1pHoxJ7VsCovaJRiT0nYNTe0ajEXhAwqk00KrEXBYxqG41K7CUBo/aJRiX2soBR+0ajElsjYFS7aFRirwkY1T4aldgbAkbtF41K7E0Bo/aPRiX2loBRSTQqsbcFjLJoVGLvCBjVIRqV2LsCRnWMRiW2QcCoTtGoxN4XMKpzNCqxDwWMOiAaldhHAkYdGI1K7GMBo7pEoxLbImBU12hUYrnS8Gs8KBqVWKmAUQdHoxIrEzDqkGhUYhUCRnWLRiVWKWDU16JRidUVMOrr0ajE6gsY1b0OvsZPJvT9t3oA77917D64ZR23D6cD0f3XE9h/ZwHvXzYk8Pve/agyl/sb4b53G0Tue3doHdyyDgdytyHw3FyWLuPyHD4375N117Q+p9tlBr3cD0i8lIJ9B/pjHwTuddt0GZcRlvuRANtXEHT/UyTjQH8Mqdn5ka6q/70OHJO2LWn7Wf7vz/N/3XRYfoyq9Prnivz/3f+y+XrVyeWq68uaen4lcFnfAG7j1fLy7U9olsbmsP5n0+FpX5TnH1cUqT+bahV5XOnNtwWotfBzC2tpWKTOz3jQHVgMw8zD6+CXewRwI5Sl+4g6cI9oK69vEDbQetf57wzkR1YzkB/pDeRHFZnv8vx8R+Xnc0eajiYP+Mgs9wEO+F+mz79ZTZ9/0+vzb1XT59/y+vyYIvONzc93TH4+V1ffvDeM8aU3gYlj64Q9FjjNfQi6jwtctxsDr8zhdR8fuG43th1L8HtL4Dtsbtw4jqD7XyIH8foB1xNArw3Zf67PSr0+RO/0XpQu49lK3PLcQeUegG3GMz81Df70WZiaLdsKX/D794R87d+us3UHq6JI/2dTifeaW+f3LPhf9rfEe39P7z3F5in5nOXUK1JHwyKv0XauMrEn1NlasHv+bQ9E9CCXBRQ9yJW2C3twz0BC664F1p1NNRzck4I67QTgDsW3gcsq20b9l9RsMmC+DZgZq0n/VbdSQO/QIvN3InBDxS2DseNwImGsuSwX9hjr1i0lBN2Vga9briKd/a8T5rrlM3X2B/II9NrqBJ4bx0spgZf6geseR+KlgQgvJwF5AXptDQR4qUXgpWHguq8m8dJIhJeTgbwAvbZGAryUEXhpHLjuX5B4aSLCyylAXoBeWxMBXsoJvDQNXPc1JF6aifAyAMgL0GtrJsBLBYGX3QLXPZ7ES3MRXr4D5AXotTUX4KU2gZeqwHVfS+KlhQgvpwJ5AXptLQR4qSTw0ipw3deReGktwstpQF6AXltrAV7qEHhpE7juCSRe2orwMhDIC9BrayvAS10CL+0C1z2RxEt7EV5OB/IC9NraC/BSj8BLErju60m8mAgvZwB5AXptJsBLfQIvnQLXfQOJl84ivAwC8gL02joL8NKAwEuXwHVPIvHSVYSXwUBegF5bVwFetiPwckjguieTeOkmwsuZQF6AXls3AV62J/DSPXDdN5J46SHCy3eBvAC9th4CvDQk8HJY4Lp/SeKllwgvZwF5AXptvQR4aUTg5YjAdd9E4qW3CC9DgLwAvbbeArzsQODl6MB1TyHx0keEl+8BeQF6bX0EeNmRwMsxgeu+mcRLXxFezgbyAvTa+grw0pjAy/GB6/4ViZd+IrycA+QF6LX1E+ClCYGXEwPXfQuJl/4ivAwF8gL02voL8LITgZdTAtc9lcTLABFezgXyAvTaBgjwsjOBl9MC130riZeBIrx8H8gL0GsbKMBLUwIvgwLXfRuJl8EivJwH5AXotQ0W4KUZgZezAtc9jcTLEBFehiHvWgfkZYgAL7sQeDkncN23k3gZKsLLD4C8AL22oQK87Erg5bzAdd9B4mWYCC8/BPIC9NqGCfCyG4GX4YHr/jWJlxEivAwH8gL02kYI8NKcwMsFgeu+k8TLSBFeRgB5AXptIwV42Z3Ay0WB655O4mWUCC8/AvIC9NpGCfCyB4GXiwPXfReJl9EivJwP5AXotY0W4KWKcR+PwHX/hsTLGBFeLgDyAvTaxgjw0oLAy+WB676bxMtYEV5GAnkBem1jBXjZk8DLVYHrnkHiZZwILz8G8gL02sYJ8NKSwMs1geu+h8TLeBFeLgTyAvTaxgvw0orAy4TAdf+WxMtEEV4uAvIC9NomCvDSmsDLpMB130viZbIIL6OAvAC9tskCvOxF4OWmwHXPJPEyRYSXnwB5AXptUwR42ZvAyy2B676PxMtUEV5+CuQF6LVNFeClDYGXaYHr/h2Jl9tFeLkYyAvQa7tdgJe2BF7uDFz3LBIv00V4GQ3kBei1TRfgZR8CL3cHrvt+Ei8zRHi5BMgL0GubIcDLvgRe7g1c9wMkXmaK8HIpkBeg1zZTgJd2BF5mBa779yRe7hfh5TIgL0Cv7X4BXtoTeHkwcN0PkniZLcLLGCAvQK9ttgAv+xF4eThw3bNJvMwR4eVnQF6AXtscAV72J/AyN3DdD5F4mSfCy8+BvAC9tnkCvCQEXuYHrvsPJF4WiPByOZAXoNe2QIAXI/CyMHDdD5N4WSTCy1ggL0CvbZEALx0IvCwOXPccEi9LRHi5AsgL0GtbIsBLRwIvSwPX/QiJl2UivFwJ5AXotS0T4KUTgZflgev+I4mXFSK8XAXkBei1rRDgpTOBl2cD1z2XxMtKEV7GAXkBem0rBXg5gMDLC4HrnkfiZZUIL1cDeQF6basEeDmQwMtLget+lMTLahFefgHkBei1rRbgpQuBlzWB6/4TiZdXRXi5BsgL0Gt7VYCXrgRe3ghc93wSL2tFeBkP5AXota0V4OUgAi9vBa57AYmXdSK8XAvkBei1rRPg5WACL+8ErvsxEi/rRXi5DsgL0GtbL8DLIQReNgSu+88kXjaK8DIByAvQa9sowEs3Ai8fBq57IYmXTSK8TATyAvTaNgnw8jUCLx8HrnsRiZfNIrxcD+QF6LVtFuDl6wRecu3D1v04iZeS9hq83ADkBei1lQSeG8dLdwIvZYHr/guJl3IRXiYBeQF6bcj+K0+XsZ3XZ/1TzSel7eS0nZK2AWn7TtpOTdtpaRuYttPTdkbaBqVtcNrOTNt303ZW2oak7XtpOztt56RtaNrOTdv303Ze2tw92t19p929dN39Qd09D9193Ny9qdz9dtw9RNx9Edxvvbvfr3a/yet+Z9T9dqL7PTj3G1fud3vcb5G431dw3xl334N13+1z31dy38Fw15W7a2Xd9X/umiZ3nYY79+zOp7lzBO64pzuW4/ZP3Ta3245wY6Pzm5mnybg8dSjFbWN0qBX49spl6TImE8bfG3F+JGV5jgonZL8y+hbZB6waf4muEV1gr7TA4wkBrQx8A6F3qrkfQXcdkQ2Em4AbCECvjdV/peD+uwy4rCnInZscZyV2E4GV+oGPEW7wnkLQ3UBkjLgZmEug14bsP/LGj2XL+ypu/Nxch5PzzwzmSc0m8/duagrNrwQG818RBrVb4h6J3SIA5dTQ90jcIcvnCIfuGga+tbGCdMiykcjWxq3AgRPotTX6Cu6R3CawEruVsBJrHPgY4Qbv2wi6m4iMEdOAuQR6bU3iHonExs801h4JOui3A4MOPN9iwPMttBXD7YQB8g5gcFxtbuXvLzOb0Hu2twL3bH8tsFHwa4L3dxK8d8usyi+TsQP1AmFHomngG0du56knwf9mIhtH04F8Ar02YP/Rxo3phNzcRRg37iKPGy8Sxo3dAh83XiQdeGkuMm78BjhuAL225l/BAy93B76N5caIlwisVAlsWzB0txAZI2YAcwn02loIXH+9mpCbVgK8MHS3FuHlHiAvQK+ttQAvLxNy00aAF4butiK8/BbIC9BrayvAyyuE3LQT4IWhu70IL/cCeQF6be0FeFlDyE0iwAtDt4nwMhPIC9BrMwFeXiXkppMALwzdnUV4uQ/IC9Br6yzAy2uE3HQR4IWhu6sIL78D8gL02roK8PI6ITeHCPDC0N1NhJdZQF6AXls3AV7eIOSmuwAvDN09RHi5H8gL0GvrIcDLWkJuDhPghaG7lwgvDwB5AXptvQR4eZOQmyMEeGHo7i3Cy++BvAC9tt4CvPydkJujBXhh6O4jwsuDQF6AXlsfAV7eIuTmGAFeGLr7ivAyG8gL0GvrK8DLOkJujhfghaG7nwgvDwF5AXpt/QR4eZuQmxMFeGHo7i/Cyx+AvAC9tv4CvPyDkJtTBHhh6B4gwsvDQF6AXtsAAV7eIeTmNAFeGLoHivAyB8gL0GsbKMDLekJuBgnwwtA9WISXR4C8AL22wQK8vEvIzVkCvDB0DxHh5Y9AXoBe2xABXt4j5OYcAV4YuoeK8DIXyAvQaxsqwMsGQm7OE+CFoXuYCC/zgLwAvbZhArxsJORmuAAvDN0jRHh5FMgL0GsbIcDL+4TcXCDAC0P3SBFe/gTkBei1jRTg5QNCbi4S4IWhe5QIL/OBvAC9tlECvHxIyM3FArwwdI8W4WUBkBeg1zZagJdNhNxcJsALQ/cYEV4eA/IC9NrGCPDyESE3lwvwwtA9VoSXPwN5AXptYwV4+SchN1cJ8MLQPU6El4VAXoBe2zgBXj4m5OYaAV4YuseL8LIIyAvQaxsvwMtmQm4mCPDC0D1RhJfHgbwAvbaJArxsIeRmkgAvDN2TRXj5C5AXoNc2WYCXfxFyc5MALwzdU0R4WQzkBei1TRHgJce4e7wALwzdU0V4WQLkBei1IfuPfONd2k1tWwrU+ATyxruqRrURqPGv0ajEri0Jv8al0ah0117AqGXRqMSuFzDqyWhUuvMvYNRT0ajEbhQwank0Kj08IGDUimhUYjcLGPV0NCo9gCBg1DPRqMRuFTDq2WhUYtMEjFoZjUrsDgGjnotGJXangFHPR6MSu0vAqBeiUYndLWDUqmhUYvcIGPViNCqxewWM+ls0KrH7BIx6KRqV2CwBo1ZHoxJ7QMCol6NRiT0oYNQr0ajEHhIwak00KrGHBYx6NRqV2CMCRr0WjUpsroBRr0ejEntUwKg3olGJzRcwam00KrHHBIx6MxqV2EIBo/4ejUrscQGj3opGJbZYwKh10ajEnhAw6u1oVGJLBYz6RzQqsScFjHonGpXYcgGj1kejEntawKh3o1GJPStg1HvRqMSeEzBqQzQqsRcEjNoYjUrsRQGj3o9GJfaSgFEfRKMSe1nAqA+jUYmtETBqUzQqsdcEjPooGpWe5hYw6p/RqPTsqYBRH0ej0pNyAkZtjkal53oEjNoSjUpPIQgY9a9oVHpkWsCoXN1olG0QMKokGpUeRxMwqjQalR6eETCqVjQq3esXMKosGpXuTAoYVR6NSvdRBIyqiEalm76l4ddYOxqVblEJGFUZjUpX1AJG1YlGpeO/gFF1o1HpsCJgVL1oVJpWAaPqR6PSThAwqkFdfI2fTOj7b21XF7iV1w54aKcdpwPR/bc9sP+aAu9f1izw+94dmp5euptw37tpIve9a1gXt6wP9sX5Mi3w3FyVLuOaHD43d5B117Q+p9tlBr3cX5N4KQX7DvTHfh24123TZVxFWO5dAmxfS9D9G5GMA/0xpGbnh7tNbbYOHJe2LWm7Ov/3F/m/bmqUH6Mqvf65Nv9/979svh3q5nLV9WVNPb8OuKwdgdt4tbx8+xOapfE5rP/Z1Djti/L844oi9WdTrSKPK735tgC1Fn5uYS0Ni9T5GQ+6A4thmNm4Ln65TYAboSzdTerCPaKtvHYkbKDtVPe/M5DvXM1AvrM3kDctMt81+fma5udzR5qakQd8ZJZ3AQ74X6bPd62mz3f1+ny3avp8N6/PmxeZb3x+vub5+Vxdu+e9YYwvOxGY2KNu2GOB07wLQXdV4LrdGHhdDq+7ReC63di2B8HvewLfYXPjRhVB929FDuLtCVxPAL02ZP+5Piv1+hC903tZuozbcd81MHdQeTvANuOZn5oGf/osTM2WbYUv+P3bMl97q7pbd7AqivR/NpV4r7l1fs+C/2V/S7z39/TeU2yeks9ZTr0idTQs8hpt5yoT27Lu1oLd81YeiOhBLgsoepC7L/DBPQMJrft3YQ7uSUGd1hK4Q9EKuKxZ26j/kppNBsy3ATNjNem/6lYK6B1aZP5aAzdU3DIYOw6tCWPNVbmwx1i3bnmCsG55MPB1S3/S2f/ZIjsOewF5BHptswPPjePlr4TcPBy47pNIvMwR4WVvIC9Ar22OAC9LCbmZG7juk0m8zBPhpQ2QF6DXNk+Al2WE3MwPXPcpJF4WiPDSFsgL0GtbIMDLk4TcLAxc9wASL4tEeNkHyAvQa1skwMtThNwsDlz3d0i8LBHhZV8gL0CvbYkAL8sJuVkauO5TSbwsE+GlHZAXoNe2TICXFYTcLA9c92kkXlaI8NIeyAvQa1shwMvThNw8G7jugSReVorwsh+QF6DXtlKAl2cIuXkhcN2nk3hZJcLL/kBegF7bKgFeniXk5qXAdZ9B4mW1CC8JkBeg17ZagJeVhNysCVz3IBIvr4rwYkBegF7bqwK8PEfIzRuB6x5M4mWtCC8dgLwAvba1Arw8T8jNW4HrPpPEyzoRXjoCeQF6besEeHmBkJt3Atf9XRIv60V46QTkBei1rRfgZRUhNxsC130WiZeNIrx0BvIC9No2CvDyIiE3HwauewiJl00ivBwA5AXotW0S4OVvhNx8HLju75F42SzCy4FAXoBe22YBXl4i5Ca3X9i6zybxUrKfBi9dkN93xmm2ksBz43hZTchNWeC6zyHxUi7CS1cgL0CvrVyAl5cJuakMXPdQEi91RHg5CMgL0GurI8DLK4Tc1A9c97kkXhqI8HIwkBeg19ZAgJc1hNw0DFz390m8NBLh5RAgL0CvrZEAL68SctM4cN3nkXhpIsJLNyAvQK+tiQAvrxFy0zRw3cNIvDQT4eVryLvWAXlpJsDL64Tc7Ba47h+QeGkuwsvXgbwAvbbmAry8QchNVeC6f0jipYUIL92BvAC9thYCvKwl5KZV4LqHk3hpLcJLDyAvQK+ttQAvbxJy0yZw3SNIvLQV4aUnkBeg19ZWgJe/E3LTLnDdPyLx0l6El0OBvAC9tvYCvLxFyE0SuO7zSbyYCC+HAXkBem0mwMs6Qm46Ba77AhIvnUV46QXkBei1dRbg5W1CbroErnskiZeuIrx8A8gL0GvrKsDLPwi5OSRw3T8m8dJNhJfDgbwAvbZuAry8Q8hN98B1X0jipYcIL0cAeQF6bT0EeFlPyM1hgeu+iMRLLxFeegN5AXptvQR4eZeQmyMC1z2KxEtvEV6OBPIC9Np6C/DyHiE3Rweu+yckXvqI8HIUkBeg19ZHgJcNhNwcE7jun5J46SvCy9FAXoBeW18BXjYScnN84LovJvHST4SXPkBegF5bPwFe3ifk5sTAdY8m8dJfhJdvAnkBem39BXj5gJCbUwLXfQmJlwEivHwLyAvQaxsgwMuHhNycFrjuS0m8DBTh5RggL0CvbaAAL5sIuRkUum4SL4NFeOkL5AXotQ0W4OUjQm7OClz3GBIvQ0R4ORbIC9BrGyLAyz8JuTkncN0/I/EyVISX44C8AL22oQK8fEzIzXmB6/45iZdhIrwcD+QF6LUNE+BlMyE3wwPXfTmJlxEivPQD8gL02kYI8LKFkJsLAtc9lsTLSBFeTgDyAvTaRgrw8i9Cbi4KXPcVJF5GifDybSAvQK9tlAAvubr43FwcuO4rSbyMFuHlRCAvQK9ttAAvJQReLgtc91UkXsaI8NIfyAvQaxsjwEspgZfLA9c9jsTLWBFeTgLyAvTaxgrwUovAy1WB676axMs4EV5OBvIC9NrGCfBSRuDlmsB1/4LEy3gRXk4B8gL02sYL8FJO4GVC4LqvIfEyUYSX/8fe+8DbVOX///fi6vrbJYoZZiiKotZbFEVdYqKYYSZFURRFURRFUSmKoiiKoiiKoiiKohBFUYiiKIqiKIqi0G+v+d377aT78XjM475eM+v1aJ3HYz2IY7df6/l6rr33Oeee3R7oC5C1jRLwpTDBl9GB5x5B8mWMiC+XAn0BsrYxAr4cQfBlbOC5HyD5Mk7El8uAvgBZ2zgBXzIJvowPPPeDJF8miPjSAegLkLVNEPClCMGXiYHnHknyZZKILx2BvgBZ2yQBX4oSfJkceO5RJF+miPhyOdAXIGubIuBLMYIvUwPP/RDJl2kivlwB9AXI2qYJ+FKc4Mv0wHM/TPJlhogvnYC+AFnbDAFfShB8mRl47tEkX2aJ+NIZ6AuQtSHnLyPZxpEpc3Z8kvmEZFRLRvVknJiMk5JRIxk1k3FyMk5JhkuGJaNWMk5NRu1k1EnGack4PRl1k1EvGWck48xk1E9Gg2T4e7T/+77TyfD3B/X3PPT3cfP3pvL32/H3EPH3RfDf9e6/v9p/J6//nlH/3Yn+++D8d1z57+3x30Xiv1/B/8y4/zlY/7N9/ueV/M9g+M+V+8/K+s//+c80+c9p+Pee/ftp/j0C/7qnfy3HX5/6c25/HuHXRs+b2acrcX2q9UJN3LZerBn2OjQ02caVhPX3KhwPVyjHo0MfyHllzC1yDlj72AW9j+gdLJ3sYGVCQWcHfoJwdJL5WELuOSInCF2BJwhA1saavwLg+RsK3NbVQBYMV3zWrgRX5ga+RvjF+2pC7nkia8Q1wF4CWRty/sgnP5a7vT/iyc81RTk9/91i7vL3sNSrm3x/85TAYt6NsKh1j1ck1l1AymtDvyLxL1k+TXjpbn7gZxtPkF6yXCBytnEdcOEEsrYFf8Arkh4CB7HrCAexRYGvEX7x7kHIvVhkjegJ7CWQtS2OVyQSJz89WVck6KJfDyw68P0WA77fQjswXE9YIG8AFsfvmz/4p24z94G+sr0OeGXbS+CkoBeBfW8Ce7/NSjnbZFxATSFcSCwJ/OTIXzwdSeC/VOTk6Eagn0DWBpw/2rpxI6E3NxHWjZvI68azhHVjWeDrxrOkF16Wi6wbfYDrBpC1Lf8DvvDSN/BzLL9GTCO4skLg3IKRe6XIGnEzsJdA1rZS4PPXzxF6s1rAF0buNSK+3AL0Bcja1gj48jyhN2sFfGHkXifiSz+gL0DWtk7Al+mE3qwX8IWRe4OIL/2BvgBZ2wYBX2YQerNRwBdG7k0ivtwK9AXI2jYJ+PICoTebBXxh5N4i4sttQF+ArG2LgC8vEnqzVcAXRu5tIr7cDvQFyNq2Cfgyk9Cb7QK+MHLvEPFlANAXIGvbIeDLLEJvdgr4wsi9S8SXO4C+AFnbLgFfXiL0ZreAL4zce0R8uRPoC5C17RHw5WVCb/YK+MLIvU/El4FAX4CsbZ+AL7MJvdkv4Asj9wERXwYBfQGytgMCvswh9CbtlPB9YeROP0XDl7uQn2vEZbb0wHvjfXmF0JtCAr4wcmeI+HI30Bcga8sQ8OVVQm8yBXxh5C4i4stgoC9A1lZEwJe5hN4UF/CFkbuEiC9DgL4AWVsJAV/mEXqTJeALI3cpEV/uAfoCZG2lBHx5jdCbMgK+MHKXFfHlXqAvQNZWVsCX1wm9KSfgCyN3eRFfhgJ9AbK28gK+zCf0poKAL4zcFUV8GQb0BcjaKgr4soDQm0oCvjByVxbx5T6gL0DWVlnAl4WE3lQR8IWRu6qIL/cDfQGytqoCvrxB6E01AV8YuauL+DIc6AuQtVUX8GURoTc1BHxh5K4p4ssIoC9A1lZTwJfFhN44AV8YuU3ElweAvgBZmwn48iahN7UFfGHkriPiy4NAX4CsrY6AL28RelNXwBdG7noivowE+gJkbfUEfFlC6E19AV8YuRuI+DIK6AuQtTUQ8GUpoTfZAr4wcjcU8eUhoC9A1tZQwJe3Cb1pLOALI3cTEV8eBvoCZG1NBHx5h9CbpgK+MHI3E/FlNNAXIGtrJuDLMkJvmgv4wsjdQsSXMUBfgKythYAvywm9aSngCyN3KxFfHgH6AmRtyPkj33iXdlPb4wT28VHkjXdVQVUT2MexEZSzB9LD38dxEZSzkQKgHougnD0kAOrxCMrZaAFQ4yMoZ48IgJoQQSVnVAKgnoigkgO1AKgnI6hk/RcANTGCSpYVAVCTIqikrQKgnoqgkkkQAPV0BOVssgCoyRGUs2cEQE2JoJK34ARAPRNBOXtOANSzEZSz6QKgpkZQzl4QADUtgnI2UwDUcxGUs5cEQD0fQTmbLQBqegTl7BUBUDMiKGdzBUC9EEE5e00A1IsRlLP5AqBmRlDOFgqAmhVBOVskAOqlCMrZmwKgXo6gnC0RADU7gnL2tgCoORGUs2UCoF6JoJy9KwDq1QjK2QoBUHMjKGerBEDNi6CcrRYA9VoE5ewDAVCvR1DO1gqAmh9BOftIANSCCMrZegFQCyMoZ58IgHojgnK2UQDUogjK2WcCoBZHUM42C4B6M4Jy9oUAqLciKGdbBUAtiaCcfSUAamkE5Wy7AKi3Iyhn3wiAeieCcrZTANSyCMrZdwKglkdQznYLgHo3gnL2gwCo9yIoZ3sFQK2IoJz9JABqZQTlbL8AqFURlLODAqDej6CcpRUQ+KRUBOWsgACoNRGUs0ICoD6IoJwVFgD1YQTlLFMA1NoIyllRAVDrIihnxQVAfVQUv4//fqDvv/Ux8P5bL9TEbevFmpwJRM/feuD8LTkZ+M71ydj5QwuSlcxb36K/325+eVxwikZvNhTFbetpoHfo+UP3ZmSyjdFp+N5cSM6d3/3zuTcQfLmI5EsBMHcgH7socNbVk22MJGz3YgG3HyHkvkSk40A+hszseWSm/XoMHJWMg8l4KOfXh3N+9Y9PctaozJT5eSTn7/3f5T7v06JpaYeby/wyfxS4rY3Ac7yCKf1OfaBdGpOG5Z/72JTMRUbO7wvnsf+5j4J5/D4z5XkHgVkP/f8eui9Zeezn7xhkA3eGAXNTUcKPiQBPQlm5PysKZ0Q7eG0knKB9XvR/s5BvPsxCvjllId+Sx/NG5zxvS87z/CtNX5AXfGSXvwQu+P/JnG89zJxvTZnzbYeZ820pc/5VHs8bk/O8r3Ke5/fr6xw2jPXlc4IT24uGvRb4zF8Scu8IPLdfAx9Nw+f+JvDcfm3bTuB9aeAXbH7d2EHIfZnIi3jfAo8TQNaGnD8/ZwVS5hB90Ts02cb1wHn0Lyp/DDhnvPI3j86/fRcmf9u2Q/8gdX535uz7rqK/XmAVzmP+cx/pKX/mj/mNDvm73F/TU/59o5R/k9dz0v+P7RTLYz+y8vgz2sVVbtidRX/dYf/fu1IKhF7kcguKXuQuD3xxzxUJnfuKMBd3d8h+2k7gBcUu4LY6/Zfmz+XvYcB+G7Azlp/5O9xBAX1Bi+zfd8ADrN8G48LhO8JaMzIt7DXWH1seJeTuEvix5XjSu/9dRS4cvgf6CGRtXQPvjfdlLKE33QLPfQLJl+4ivuwG+gJkbd0FfBlH6E2PwHNXI/nSU8SXPUBfgKytp4AvjxF60yvw3NVJvvQW8eUHoC9A1tZbwJfHCb3pE3juE0m+9BXx5UegL0DW1lfAl/GE3vQLPPdJJF/6i/iyF+gLkLX1F/BlAqE3tweeuwbJlwEivuwD+gJkbQMEfHmC0JuBgeeuSfJlkIgvPwF9AbK2QQK+PEnozeDAc59M8mWIiC8/A30BsrYhAr5MJPRmaOC5TyH5MkzEl/1AX4CsbZiAL5MIvRkeeG5H8mWEiC8HgL4AWdsIAV+eYnwOKPDcRvJllIgvB4G+AFnbKAFfnib0ZnTguWuRfBkj4ssvQF+ArG2MgC+TCb0ZG3juU0m+jBPxxf/kCmougaxtnIAvUwi9GR947tokXyaI+JIO9AXI2iYI+PIMoTcTA89dh+TLJBFfCgB9AbK2SQK+PEvozeTAc59G8mWKiC8Fgb4AWdsUAV+mEnozNfDcp5N8mSbiSyGgL0DWNk3Al2mE3kwPPHddki8zRHzJAPoCZG0zBHx5jtCbmYHnrkfyZZaIL4WBvgBZ2ywBX54n9GZ24LnPIPkyR8SXI4C+AFnbHAFfphN6Mzfw3GeSfJkn4ksm0Bcga5sn4MsMQm/mB567PsmXBSK+FAH6AmRtCwR8eYHQm0WB525A8mWxiC9Fgb4AWdtiAV9eJPRmSeC5zyL5slTEl2JAX4CsbamALzMJvVkWeO6zSb4sF/GlONAXIGtbLuDLLEJvVgSeO5vky0oRX0oAfQGytpUCvrxE6M3qwHM3JPmyRsSXkkBfgKxtjYAvLxN6szbw3I1IvqwT8eVIoC9A1rZOwJfZhN6sDzz3OSRfNoj4kgX0BcjaNgj4MofQm42B525M8mWTiC+lgL4AWdsmAV9eIfRmc+C5m5B82SLiS2mgL0DWtkXAl1cJvdkaeO6/kXzZJuLLUUBfgKxtm4Avcwm92R547nNJvuwQ8aUM0Bcga9sh4Ms8Qm92Bp67KcmXXSK+lAX6AmRtuwR8eY3Qm92B525G8mWPiC9HA30BsrY9Ar68TujN3sBzn0fyZZ+IL8cAfQGytn0Cvswn9GZ/4LnPJ/lyQMSXckBfgKztgIAvCwi9SXNh525O8iXdafhSHugLkLWlB94b78tCQm8KBZ67BcmXDBFf/gT0BcjaMgR8eYPQm8zAc/+d5EsREV/+DPQFyNqKCPiyiNCb4oHn/gfJlxIivlQA+gJkbSUEfFlM6E1W4LlbknwpJeJLRaAvQNZWSsCXNwm9KRN47lYkX8qK+PIXoC9A1lZWwJe3CL0pF3juf5J8KS/iy1+BvgBZW3kBX5YQelMh8Nz/IvlSUcSXSkBfgKytooAvSwm9qRR47gtIvlQW8aUy0Bcga6ss4MvbhN5UCTx3a5IvVUV8ORboC5C1VRXw5R1Cb6oFnvtCki/VRXw5DugLkLVVF/BlGaE3NQLPfRHJl5oivlQB+gJkbTUFfFlO6I0LPHcbki8m4ktVoC9A1mYCvrxL6E3twHO3JflSR8SX44G+AFlbHQFf3iP0pm7guS8m+VJPxJcTgL4AWVs9AV9WEHpTP/Dcl5B8aSDiSzWgL0DW1kDAl5WE3mQHnrsdyZeGIr5UB/oCZG0NBXxZRehN48Bztyf50kTElxOBvgBZWxMBX94n9KZp4LkvJfnSTMSXk4C+AFlbMwFfVhN60zzw3JeRfGkh4ksNoC9A1tZCwJc1hN60DDx3B5IvrUR8qQn0BcjaWgn48gGhNxcEnrsjyZfWIr6cDPQFyNpaC/jyIaE3bQLPfTnJl7YivpwC9AXI2toK+LKW0Jt2gee+guRLexFfHNAXIGtrL+DLOkJvOgSeuxPJl44ivhjQFyBr6yjgy0eE3nQKPHdnki+dRXypBfQFyNqQ85eRbCMrZc6+T3jvTsaeZPyQjB+TsTcZ+5LxUzJ+Tsb+ZBxIxsFk/JKMtGSe0pNRIBkFk1EoGRnJKJyMI5KRmYwiySiaDH+Pdn/faX8vXX9/UH/PQ38fN39vKn+/HX8PEX9fBP9d7/77q/138vrvGfXfnei/D85/x5X/3h7/XST++xX8z4z7n4P1P9vnf17J/wyG/1y5/6ys//yf/0yT/5yGf+/Zv5/m3yPwr3v613L89ak/5/bnEX5t9LyZfToV16dal+O+47TWFYF/X+pIP/fFCJ/fxfFwhXI8OvSBnFfG3CLngLWPddD7iN7BT5NF8BvCgbJL4CcInyeZvyXk7ipygnAa8AQByNpY81cAPH8jgds6Hfnlymmcg9hphINYt8DXCL94n07I3V1kjagL7CWQtSHnj3zyY7nb+yOe/NQtxun57xZzl7+HpV7d5PsnZgQW83qERe2MeEViZwhIeWboVyT+JctehDPzHoGfbVxHesmyp8jZRn3gwglkbT3/gFckDQQOYvUJB7Fega8RfvFuQMjdW2SNOAvYSyBr6x2vSCROfs5iXZGgi342sOjA91sM+H4L7cBwNmGBzAYWx++bP/inbjP3gb6yrQ+8sm0ocFLQkMC+EYG932alnG0yLqBuJFxI9An85MhfPK0n5O4rcnJ0DtBPIGsDzh9t3TiHsG40JqwbjcnrRh+CP/0CXzf6kF546S+ybjQBrhtA1tb/D/jCy98CP8fya8TNBFduFzi3YOQeILJGnAvsJZC1DQi8N96XWwi9GSjgCyP3IBFfmgJ9AbK2QQK+9CP0ZrCAL4zcQ0R8aQb0Bcjahgj40p/Qm6ECvjByDxPx5TygL0DWNkzAl1sJvRku4Asj9wgRX84H+gJkbSMEfLmN0JuRAr4wco8S8aU50Bcgaxsl4MvthN6MFvCFkXuMiC8tgL4AWdsYAV8GEHozVsAXRu5xIr78HegLkLWNE/DlDkJvxgv4wsg9QcSXfwB9AbK2CQK+3EnozUQBXxi5J4n40hLoC5C1TRLwZSChN5MFfGHkniLiSyugL0DWNkXAl0GE3kwV8IWRe5qIL/8E+gJkbdMEfLmL0JvpAr4wcs8Q8eVfQF+ArG2GgC93E3ozU8AXRu5ZIr5cAPQFyNpmCfgymNCb2QK+MHLPEfGlNdAXIGubI+DLEEJv5gr4wsg9T8SXC4G+AFnbPAFf7iH0Zr6AL4zcC0R8uQjoC5C1LRDw5V5CbxYJ+MLIvVjElzZAX4CsbbGAL0MJvVki4Asj91IRX9oCfQGytqUCvgwj9GaZgC+M3MtFfLkY6AuQtS0X8OU+Qm9WCPjCyL1SxJdLgL4AWdtKAV/uJ/RmtYAvjNxrRHxpB/QFyNrWCPgynNCbtQK+MHKvE/GlPdAXIGtbJ+DLCEJv1gv4wsi9QcSXS4G+AFnbBgFfHiD0ZqOAL4zcm0R8uQzoC5C1bRLw5UFCbzYL+MLIvUXElw5AX4CsbYuALyMJvdkq4Asj9zYRXzoCfQGytm0Cvowi9Ga7gC+M3DtEfLkc6AuQte0Q8OUhQm92CvjCyL1LxJcrgL4AWdsuAV8eJvRmt4AvjNx7RHzpBPQFyNr2CPgymtCbvQK+MHLvE/GlM9AXIGvbJ+DLGEJv9gv4wsh9QMSXK4G+AFnbAQFfHiH0Js3C94WRO900fLkKeV8iXGZDzh/5xrv/jw+6m8cJ7GMX5I13VUFVE9jHrhGUswfSw9/HqyMoZyMFQF0TQTl7SABUtwjK2WgBUN0jKGePCIC6NoJyNlYA1HURlLPHBED1iKCcjRcA1TOCcvaEAKjrIyhnEwVA3RBBOXtKAFSvCMrZZAFQvSMoZ88IgLoxgnI2VQDUTRGUs+cEQPWJoJxNFwDVN4Jy9oIAqJsjKGczBUDdEkE5e0kAVL8IytlsAVD9IyhnrwiAujWCcjZXANRtEZSz1wRA3R5BOZsvAGpABOVsoQCoOyIoZ4sEQN0ZQTl7UwDUwAjK2RIBUIMiKGdvC4C6K4JytkwA1N0RlLN3BUANjqCcrRAANSSCcrZKANQ9EZSz1QKg7o2gnH0gAGpoBOVsrQCoYRGUs48EQN0XQTlbLwDq/gjK2ScCoIZHUM42CoAaEUE5+0wA1AMRlLPNAqAejKCcfSEAamQE5WyrAKhREZSzrwRAPRRBOdsuAOrhCMrZNwKgRkdQznYKgBoTQTn7TgDUIxGUs90CoB6NoJz9IABqbATlbK8AqHERlLOfBEA9FkE52y8A6vEIytlBAVDjIyhnaQXC38cJEZSzAgKgnoignBUSAPVkBOWssACoiRGUs0wBUJMiKGdFBUA9FUE5Ky4A6uli+H389wN9/63JwPtvXX4KbltXnMKZQPT8TQHOXx+H21Zfh50/tCAbiqal/a3Y77ebXx6FRO5790wx3LYuAnpXKPD7JY5NtjE+Dd+bwuTc+d0/n/sZgi9HkHwpAOYO5GNHBM66erKNsYTtFhVw+wlC7mIiHQfyMWRmzyMz7ddj4LhkHEzGYzm/Pp7zq388m7NGZabMzxM5f+//Lvd5U4ulpR1uLvPL/EngtqYBz/EKpvQ79QF/2TkNyz/38VwyFxk5vy+cx/7nPgrm8fvMlOcdBGY99P976L5k5bGfv2OQDdwZBszniuG3+zzwJJSV+/licEa0g9c0wgna9GL/m4V8xmEW8hkpC/kLeTxvfM7zXsh5nn+l6UXygo/s8kzggv+fzPmsw8z5rJQ5f+kwc/5Sypy/nMfzJuQ87+Wc5/n9mp3DhrG+TCc4MadY2GuBzzyTkPuVwHP7NfDJNHzuVwPP7de2OQTeJQO/YPPrxiuE3EeKvIg3F3icALI25Pz5OSuQMofoi96RyTbOBs6jf1F5MuCc8crfPDr/9l2Y/G3bDv2D1Pmdl7PvrxX79QKrcB7zn/tIT/kzf8xvdMjf5f6anvLvG6X8m7yek/5/bKdYHvuRlcef0S6ucsPOK/brDvv/fi2lQPCfqk37/wuKXuRKB76454qEzn1UmIu7O2Q/bR7wguI14LbK/Jfmz+XvYcB+G7Azlp/5O9xBAX1Bi+zf68ADrN8G48LhdcJaMzYt7DXWH1u6EHKXC/zY8j3p3f/yIhcO84E+Allb+cB7433pSuhNhcBz7yb5UlHElwVAX4CsraKAL1cTelMp8Nx7SL5UFvFlIdAXIGurLODLNYTeVAk89w8kX6qK+PIG0Bcga6sq4Es3Qm+qBZ77R5Iv1UV8WQT0Bcjaqgv40p3QmxqB595L8qWmiC+Lgb4AWVtNAV+uJfTGBZ57H8kXE/HlTaAvQNZmAr5cR+hN7cBz/0TypY6IL28BfQGytjoCvvQg9KZu4Ll/JvlST8SXJUBfgKytnoAvPQm9qR947v0kXxqI+LIU6AuQtTUQ8OV6Qm+yA899gORLQxFf3gb6AmRtDQV8uYHQm8aB5z5I8qWJiC/vAH0BsrYmAr70IvSmaeC5fyH50kzEl2VAX4CsrZmAL70JvWkeeG7/kxsMX1qI+LIc6AuQtbUQ8OVGQm9aBp47neRLKxFf3gX6AmRtrQR8uYnQmwsCz12A5EtrEV/eA/oCZG2tBXzpQ+hNm8BzFyT50lbElxVAX4Csra2AL30JvWkXeO5CJF/ai/iyEugLkLW1F/DlZkJvOgSeO4PkS0cRX1YBfQGyto4CvtxC6E2nwHMXJvnSWcSX94G+AFlbZwFf+hF60yXw3EeQfOkq4stqoC9A1tZVwJf+hN50Czx3JsmX7iK+rAH6AmRt3QV8uZXQmx6B5y5C8qWniC8fAH0BsraeAr7cRuhNr8BzFyX50lvElw+BvgBZW28BX24n9KZP4LmLkXzpK+LLWqAvQNbWV8CXAYTe9As8d3GSL/1FfFkH9AXI2voL+HIHoTe3B567BMmXASK+fAT0BcjaBgj4ciehNwMDz12S5MsgEV8+BvoCZG2DBHwZSOjN4MBzH0nyZYiIL+uBvgBZ2xABXwYRejM08NxZJF+GifiyAegLkLUNE/DlLkJvhgeeuxTJlxEivnwC9AXI2kYI+HI3oTcjA89dmuTLKBFfPgX6AmRtowR8GUzozejAcx9F8mWMiC8bgb4AWdsYAV+GMO4TFXjuMiRfxon4sgnoC5C1jRPw5R5Cb8YHnrssyZcJIr58BvQFyNomCPhyL6E3EwPPfTTJl0kivnwO9AXI2iYJ+DKU0JvJgec+huTLFBFfNgN9AbK2KQK+DCP0ZmrgucuRfJkm4ssWoC9A1jZNwJf7CL2ZHnju8iRfZoj48gXQFyBrmyHgy/2E3swMPPefSL7MEvHlS6AvQNY2S8CX4YTezA48959JvswR8WUr0Bcga5sj4MsIQm/mBp67AsmXeSK+bAP6AmRt8wR8eYDQm/mB565I8mWBiC9fAX0BsrYFAr48SOjNosBz/4Xky2IRX74G+gJkbYsFfBlJ6M2SwHP/leTLUhFftgN9AbK2pQK+jCL0ZlnguSuRfFku4ssOoC9A1rZcwJeHCL1ZEXjuyiRfVor48g3QFyBrWyngy8OE3qwOPPexJF/WiPjyLdAXIGtbI+DLaEJv1gae+ziSL+tEfNkJ9AXI2tYJ+DKG0Jv1geeuQvJlg4gvu4C+AFnbBgFfHiH0ZmPguauSfNkk4st3QF+ArG2TgC+PEnqzOfDcx5N82SLiy/dAX4CsbYuAL2MJvdkaeO4TSL5sE/FlN9AXIGvbJuDLOEJvtgeeuxrJlx0ivuwB+gJkbTsEfHmM0JudgeeuTvJll4gvPwB9AbK2XQK+PE7oze7Ac59I8mWPiC8/An0BsrY9Ar6MJ/Rmb+C5TyL5sk/El71AX4CsbZ+ALxMIvdkfeO4aJF8OiPiyD+gLkLUdEPDlCUJv0mqFnbsmyZf0Whq+/AT0Bcja0gPvjfflSUJvCgWe+2SSLxkivvwM9AXI2jIEfJlI6E1m4LlPIflSRMSX/UBfgKytiIAvkwi9KR54bkfypYSILweAvgBZWwkBX54i9CYr8NxG8qWUiC8Hgb4AWVspAV+eJvSmTOC5a5F8KSviyy9AX4CsDTl/Gck2SqXM2fwk84JkLEzGG8lYlIzFyXgzGW8lY0kylibj7WS8k4xlyViejHeT8V4yViRjZTJWJeP9ZKxOxppkfJCMD5Ph79Hu7zvt76Xr7w/q73no7+Pm703l77fj7yHi74vgv+vdf3+1/05e/z2j/rsT/ffB+e+48t/b47+LxH+/gv+Zcf9zsP5n+/zPK/mfwfCfK/eflfWf//OfafKf0/DvPfv30/x7BP51T/9ajr8+9efc/jzCr42eN7NPacVh3GqVxr1GWuuowF9vHes3UpzwuiOOhyuU49GhD+S8MuYWOQesfSyA3kf0Dk5NFo5XCQfKcoGfIExPMs8l5C4vcoJQEFdMA7I21vwVAM/fWOC2CgFZMFzxWQsSDmIVAl8j/OJdiJC7osgakQHsJZC1IeePfPJjudv7I578ZBTn9Px3i7nL38NSr27yK01hgcW8MGFROyJekdgRAlJmhn5F4l+ybEg4M68U+NlGfdJLlpVFzjaKABdOIGur/Ae8IikqcBArQjiIVQl8jfCLd1FC7qoia0QxYC+BrK1qvCKROPkpxroiQRe9OLDowPdbDPh+C+3AUJywQJYAFsfvmz/4p24z94G+si0CvLItKXBSUJLA/kgCe7/NSjnbZFxAnUO4kKgW+MmRv3iaQshdXeTkKAvoJ5C1AeePtm5kEdaNUoR1oxR53WhC8KdG4OtGE9ILLzVF1o3SwHUDyNpq/gFfeDkq8HMsv0acS3DFCZxbMHKbyBpRBthLIGszgc9fNyX0praAL4zcdUR8KQv0Bcja6gj40ozQm7oCvjBy1xPx5WigL0DWVk/Al/MIvakv4AsjdwMRX44B+gJkbQ0EfDmf0JtsAV8YuRuK+FIO6AuQtTUU8KU5oTeNBXxh5G4i4kt5oC9A1tZEwJcWhN40FfCFkbuZiC9/AvoCZG3NBHz5O6E3zQV8YeRuIeLLn4G+AFlbCwFf/kHoTUsBXxi5W4n4UgHoC5C1tRLwpSWhNxcI+MLI3VrEl4pAX4CsrbWAL60IvWkj4Asjd1sRX/4C9AXI2toK+PJPQm/aCfjCyN1exJe/An0Bsrb2Ar78i9CbDgK+MHJ3FPGlEtAXIGvrKODLBYTedBLwhZG7s4gvlYG+AFlbZwFfWhN600XAF0buriK+HAv0Bcjaugr4ciGhN90EfGHk7i7iy3FAX4CsrbuALxcRetNDwBdG7p4ivlQB+gJkbT0FfGlD6E0vAV8YuXuL+FIV6AuQtfUW8KUtoTd9BHxh5O4r4svxQF+ArK2vgC8XE3rTT8AXRu7+Ir6cAPQFyNr6C/hyCaE3twv4wsg9QMSXakBfgKxtgIAv7Qi9GSjgCyP3IBFfqgN9AbK2QQK+tCf0ZrCAL4zcQ0R8ORHoC5C1DRHw5VJCb4YK+MLIPUzEl5OAvgBZ2zABXy4j9Ga4gC+M3CNEfKkB9AXI2kYI+NKB0JuRAr4wco8S8aUm0Bcgaxsl4EtHQm9GC/jCyD1GxJeTgb4AWdsYAV8uJ/RmrIAvjNzjRHw5BegLkLWNE/DlCkJvxgv4wsg9QcQXB/QFyNomCPjSidCbiQK+MHJPEvHFgL4AWdskAV86E3ozWcAXRu4pIr7UAvoCZG1TBHy5ktCbqQK+MHJPE/HlVKAvQNY2TcCXqwi9mS7gCyP3DBFfagN9AbI25PyRb7xLu6ntcQL7WAd5411VUNUE9vG0CMrZA+nh7+PpEVRyOiIAqm4E5ewhAVD1IqjkzUsBUGdEUM4eEQB1ZgSVvL0pAKp+BOXsMQFQDSKo5A1QAVBnRVDOnhAAdXYElbxFKgAqO4Jy9pQAqIYRVPImqgCoRhGUs2cEQJ0TQSVvswqAahxBOXtOAFSTCCp5I1YA1N8iKGcvCIA6N4JyNlMAVNMIytlLAqCaRVDOZguAOi+CcvaKAKjzIyhncwVANY+gnL0mAKpFBOVsvgCov0dQzhYKgPpHBOVskQColhGUszcFQLWKoJwtEQD1zwjK2dsCoP4VQTlbJgDqggjK2bsCoFpHUM5WCIC6MIJytkoA1EURlLPVAqDaRFDOPhAA1TaCcrZWANTFEZSzjwRAXRJBOVsvAKpdBOXsEwFQ7SMoZxsFQF0aQTn7TADUZRGUs80CoDpEUM6+EADVMYJytlUA1OURlLOvBEBdEUE52y4AqlME5ewbAVCdIyhnOwVAXRlBOftOANRVEZSz3QKgukRQzn4QANU1gnK2VwDU1RGUs58EQF0TQTnbLwCqWwTl7KAAqO4RlLO0AuHv47URlLMCAqCui6CcFRIA1SOCclZYAFTPCMpZpgCo6yMoZ0UFQN0QQTkrLgCqV3H8Pv77gb7/Vm/g/bdKG25bRxlnAtHzdyNw/qoB719WPfD73j1TLC3tqOK/325+ecwUue/dTcVx2zoC6N3MwHszMdnG5DR8b14i5873fcWTbdxE8OVlki8FwNyBfOzlwFlXT7YxkbDdVwTcfoaQ+1WRjgP5GDKz55GZ9usxcFIyDibjqZxfn8751T/65KxRmSnz80zO3/u/y31e3+JpaYeby/wyfxa4rZuB53gFU/qd+kC7NCUNyz/3cUsyFxk5vy+cx/7nPgrm8fvMlOcdBGY99P976L5k5bGfv2OQDdwZBsxbiuO32w94EsrK3a84nBHt4HUz4QStf/H/zUJ+62EW8ltTFvLb8nje5Jzn3ZbzPP9K0+3kBR/Z5QHABf8/mfM7DjPnd6TM+Z2HmfM7U+Z8YB7Pm5LzvIE5z/P7NSiHDWN96U9w4q7iYa8FPvMAQu67A8/t18Bn0/C5Bwee269tdxF4vxb4BZtfN+4m5H5d5EW8IcDjBJC1IefPz1mBlDlEX/SOTbZRHDiP/kXl3oBzxit/8+j823dh8rdtO/QPUuf3npx9v7f4rxdYhfOY/9xHesqf+WN+o0P+LvfX9JR/3yjl3+T1nPT/YzvF8tiPrDz+jHZxlRv2nuK/7rD/73tTCoRe5HILil7kFga+uOeKhM79RpiLuztkP+0e4AXFvcBtLfovzZ/L38OA/TZgZyw/83e4gwL6ghbZv6HAA6zfBuPCYShhrZmYFvYa648tdQi5lwR+bJlPevd/qciFwzCgj0DWtjTw3nhfTiP0ZlnguReQfFku4st9QF+ArG25gC+nE3qzIvDcC0m+rBTx5X6gL0DWtlLAl7qE3qwOPPcbJF/WiPgyHOgLkLWtEfClHqE3awPPvYjkyzoRX0YAfQGytnUCvpxB6M36wHMvJvmyQcSXB4C+AFnbBgFfziT0ZmPgud8k+bJJxJcHgb4AWdsmAV/qE3qzOfDcb5F82SLiy0igL0DWtkXAlwaE3mwNPPcSki/bRHwZBfQFyNq2CfhyFqE32wPPvZTkyw4RXx4C+gJkbTsEfDmb0Judged+m+TLLhFfHgb6AmRtuwR8ySb0Znfgud8h+bJHxJfRQF+ArG2PgC8NCb3ZG3juZSRf9on4MgboC5C17RPwpRGhN/sDz72c5MsBEV8eAfoCZG0HBHw5h9CbtFPDzv0uyZf0UzV8eRT58wK4zJYeeG+8L40JvSkUeO73SL5kiPgyFugLkLVlCPjShNCbzMBzryD5UkTEl3FAX4CsrYiAL38j9KZ44LlXknwpIeLLY0BfgKythIAv5xJ6kxV47lUkX0qJ+PI40Bcgaysl4EtTQm/KBJ77fZIvZUV8GQ/0Bcjaygr40ozQm3KB515N8qW8iC8TgL4AWVt5AV/OI/SmQuC515B8qSjiyxNAX4CsraKAL+cTelMp8NwfkHypLOLLk0BfgKytsoAvzQm9qRJ47g9JvlQV8WUi0Bcga6sq4EsLQm+qBZ57LcmX6iK+TAL6AmRt1QV8+TuhNzUCz72O5EtNEV+eAvoCZG01BXz5B6E3LvDcH5F8MRFfngb6AmRtJuBLS0Jvagee+2OSL3VEfJkM9AXI2uoI+NKK0Ju6gedeT/KlnogvU4C+AFlbPQFf/knoTf3Ac28g+dJAxJdngL4AWVsDAV/+RehNduC5PyH50lDEl2eBvgBZW0MBXy4g9KZx4Lk/JfnSRMSXqUBfgKytiYAvrQm9aRp47o0kX5qJ+DIN6AuQtTUT8OVCQm+aB557E8mXFiK+PAf0BcjaWgj4chGhNy0Dz/0ZyZdWIr48D/QFyNpaCfjShtCbCwLP/TnJl9YivkwH+gJkba0FfGlL6E2bwHNvJvnSVsSXGUBfgKytrYAvFxN60y7w3FtIvrQX8eUFoC9A1tZewJdLCL3pEHjuL0i+dBTx5UWgL0DW1lHAl3aE3nQKPPeXJF86i/gyE+gLkLV1FvClPaE3XQLPvZXkS1cRX2YBfQGytq4CvlxK6E23wHNvI/nSXcSXl4C+AFlbdwFfLiP0pkfgub8i+dJTxJeXgb4AWVtPAV86EHrTK/DcX5N86S3iy2ygL0DW1lvAl46E3vQJPPd2ki99RXyZA/QFyNr6CvhyOaE3/QLPvYPkS38RX14B+gJkbf0FfLmC0JvbA8/9DcmXASK+vAr0BcjaBgj40onQm4GB5/6W5MsgEV/mAn0BsrZBAr50JvRmcOC5d5J8GSLiyzygL0DWNkTAlysJvRkaeO5dJF+GifjyGtAXIGsbJuDLVYTeDA8893ckX0aI+PI60Bcgaxsh4EsXQm9GBp77e5Ivo0R8mQ/0BcjaRgn40pXQm9GB595N8mWMiC8LgL4AWdsYAV+uJvRmbOC595B8GSfiy0KgL0DWNk7Al2sIvRkfeO4fSL5MEPHlDaAvQNY2QcCXboTeTAw8948kXyaJ+LII6AuQtU0S8KU7oTeTA8+9l+TLFBFfFgN9AbK2KQK+XEvozdTAc+8j+TJNxJc3gb4AWds0AV+uI/RmeuC5fyL5MkPEl7eAvgBZ2wwBX3oQejMz8Nw/k3yZJeLLEqAvQNY2S8CXnoTezA48936SL3NEfFkK9AXI2uYI+HI9oTdzA899gOTLPBFf3gb6AmRt8wR8uYHQm/mB5z5I8mWBiC/vAH0BsrYFAr70IvRmUeC5fyH5sljEl2VAX4CsDTl/Gck2SqfM2bAk833JuD8Zw5MxIhkPJOPBZIxMxqhkPJSMh5MxOhljkvFIMh5NxthkjEvGY8l4PBnjkzEhGU8k48lkTEyGv0e7v++0v5euvz+ov+ehv4+bvzeVv9+Ov4eIvy+C/653//3V/jt5/feM+u9O9N8H57/jyn9vj/8uEv/9Cv5nxv3Pwfqf7fM/r+R/BsN/rtx/VtZ//s9/psl/TsO/9+zfT/PvEfjXPf1rOf761J9z+/MIvzZ63sw+Lcf1qdbCWrhtvVEr7HVoYrKN5YR16F0cD1cox6NDH8h5Zcwtcg5Y+/geeh/RO9g32cHBhIIuCfwEoX+SeQgh91KRE4QVwBMEIGtjzV8B8PxNBG5rJZAFwxWfdQXBlWWBrxF+8V5JyL1cZI1YBewlkLUh54988mO52/sjnvysKs7p+e8Wc5e/h6Ve3eRXmvcFFvP3CYva6nhFYqsFpFwT+hWJf8myJKGgKwI/2yhSnPOS5UqRs40PgAsnkLWt/ANekXwocBD7gHEQC3yN8Iv3h4Tca0TWiLXAXgJZ25p4RSJx8rOWdUWCLvo6YNGB77cY8P0W2oFhHWGB/AhYHL9v/uCfus3cB/rK9gPgle3HAicFHxPYryew99uslLNNxgVUFmEe1gZ+cuQvnm4k5F4ncnK0AegnkLUB54+2bmwg9OYTwrrxCXndKM1YPwNfN0qTXnjZILJufApcN4CsbcMf8IWXjYGfY/k1ogzBlY0C5xaM3JtE1ohNwF4CWdsmgc9flyX0ZrOAL4zcW0R8+QzoC5C1bRHw5WhCb7YK+MLIvU3El8+BvgBZ2zYBX44h9Ga7gC+M3DtEfNkM9AXI2nYI+FKO0JudAr4wcu8S8WUL0Bcga9sl4Et5Qm92C/jCyL1HxJcvgL4AWdseAV/+ROjNXgFfGLn3ifjyJdAXIGvbJ+DLnwm92S/gCyP3ARFftgJ9AbK2AwK+VCD0Jq12+L4wcqfX1vBlG/J9QVxmSw+8N96XioTeFBLwhZE7Q8SXr4C+AFlbhoAvfyH0JlPAF0buIiK+fA30Bcjaigj48ldCb4oL+MLIXULEl+1AX4CsrYSAL5UIvckS8IWRu5SILzuAvgBZWykBXyoTelNGwBdG7rIivnwD9AXI2soK+HIsoTflBHxh5C4v4su3QF+ArK28gC/HEXpTQcAXRu6KIr7sBPoCZG0VBXypQuhNJQFfGLkri/iyC+gLkLVVFvClKqE3VQR8YeSuKuLLd0BfgKytqoAvxxN6U03AF0bu6iK+fA/0Bcjaqgv4cgKhNzUEfGHkriniy26gL0DWVlPAl2qE3jgBXxi5TcSXPUBfgKzNBHypTuhNbQFfGLnriPjyA9AXIGurI+DLiYTe1BXwhZG7nogvPwJ9AbK2egK+nEToTX0BXxi5G4j4shfoC5C1NRDwpQahN9kCvjByNxTxZR/QFyBrayjgS01CbxoL+MLI3UTEl5+AvgBZWxMBX04m9KapgC+M3M1EfPkZ6AuQtTUT8OUUQm+aC/jCyN1CxJf9QF+ArK2FgC+O0JuWAr4wcrcS8eUA0Bcga2sl4IsRenOBgC+M3K1FfDkI9AXI2loL+FKL0Js2Ar4wcrcV8eUXoC9A1tZWwJdTCb1pJ+ALI3d7EV/SSuDmEsja2gv4UpvQmw4CvjBydxTxJR3oC5C1IeePfONd2k1tjxPYxwIlgPuoCqqawD4WjKCcPZAe/j4WiqCcjRQAlRFBOXtIAFThCMrZaAFQR0RQzh4RAJUZQSWXzAKgikRQzh4TAFU0gnI2XgBUsQjK2RMCoIpHUM4mCoAqEUE5e0oAVMkIytlkAVBHRlDOnhEAlRVBOZsqAKpUBOXsOQFQpSMoZ9MFQB0VQTl7QQBUmQjK2UwBUGUjKGcvCYA6OoJyNlsA1DERlLNXBECVi6CczRUAVT6CcvaaAKg/RVDO5guA+nME5WyhAKgKEZSzRQKgKkZQzt4UAPWXCMrZEgFQf42gnL0tAKpSBOVsmQCoyhGUs3cFQB0bQTlbIQDquAjK2SoBUFUiKGerBUBVjaCcfSAA6vgIytlaAVAnRFDOPhIAVS2CcrZeAFT1CMrZJwKgToygnG0UAHVSBOXsMwFQNSIoZ5sFQNWMoJx9IQDq5AjK2VYBUKdEUM6+EgDlIihn2wVAWQTl7BsBULUiKGc7BUCdGkE5+04AVO0IytluAVB1IihnPwiAOi2CcrZXANTpEZSznwRA1Y2gnO0XAFUvgnJ2UADUGRGUs7QC4e/jmRGUswICoOpHUM4KCYBqEEE5KywA6qwIylmmAKizIyhnRQVAZUdQzooLgGpYAr+P/36g77/VCHj/rYW1cNt6oxZnAtHzdw5w/taeitvWulOx84cW5KbiaWkbCfe96yRy37vGJXDbehnoXafA75c4NdnG9DR8b64k587v/vncvjPo7V5F8qUAmDuQj10VOOvqyTamErZ7tYDbLxByXyPScSAfQ2b2PDLTfj0GTkvGwWQ8l/Pr8zm/+keTnDUqM2V+Xsj5e/93uc/7W4m0tMPNZX6Zvwjc1rnAc7yCKf1OfaBdmpGG5Z/7aJrMRUbO7wvnsf+5j4J5/D4z5XkHgVkP/f8eui9Zeezn7xhkA3eGAbNpCfx2mwFPQlm5m5WAM6IdvM4lnKCdV+J/s5Cff5iF/PyUhbx5Hs+bnvO85jnP8680tSAv+Mgu/x244P8nc/6Pw8z5P1LmvOVh5rxlypy3yuN5M3Ke1yrneX6//pnDhrG+nEdw4l8lwl4LfOa/E3JfEHhuvwa+mIbP3Trw3H5t+xeB97WBX7D5deMCQu7rRF7EuxB4nACyNuT8+TkrkDKH6Iveick21hXHbc+/qNwIcM545W8enX/7Lkz+tm2H/kHq/F6Us+9tSvx6gVU4j/nPfaSn/Jk/5jc65O9yf01P+feNUv5NXs9J/z+2UyyP/cjK489oF1e5YS8q8esO+/9ukyIiepHLLSh6kbs+8MU9VyR07hvCXNzdIftpFwEvKNoAt9XrvzR/Ln8PA/bbgJ2x/Mzf4Q4K6AtaZP/aAk9U/DYYFw5tCWvN1LSw11h/bClAyN0n8GPLMNK7/31FLhwuBvoIZG19A++N96UgwZd+gee+j+RLfxFfLgH6AmRt/QV8KUTw5fbAc99P8mWAiC/tgL4AWdsAAV8yCL4MDDz3cJIvg0R8aQ/0BcjaBgn4Upjgy+DAc48g+TJExJdLgb4AWdsQAV+OIPgyNPDcD5B8GSbiy2VAX4CsbZiAL5kEX4YHnvtBki8jRHzpAPQFyNpGCPhShODLyMBzjyT5MkrEl45AX4CsbZSAL0UJvowOPPcoki9jRHy5HOgLkLWNEfClGMGXsYHnfojkyzgRX64A+gJkbeMEfClO8GV84LkfJvkyQcSXTkBfgKxtgoAvJQi+TAw892iSL5NEfOkM9AXI2iYJ+FKS4MvkwHOPIfkyRcSXK4G+AFnbFAFfjmR8zjTw3I+QfJkm4stVQF+ArG2agC9ZBF+mB577UZIvM0R86QL0BcjaZgj4Uorgy8zAc48l+TJLxJeuQF+ArG2WgC+lCb7MDjz3OJIvc0R8uRroC5C1zRHw5SiCL3MDz/0YyZd5Ir5cA/QFyNrmCfhShuDL/MBzP07yZYGIL92AvgBZ2wIBX8oSfFkUeO7xJF8Wi/jSHegLkLUtFvDlaIIvSwLPPYHky1IRX64F+gJkbUsFfDmG4MuywHM/QfJluYgv1wF9AbK25QK+lCP4siLw3E+SfFkp4ksPoC9A1rZSwJfyBF9Wh56b5MsaEV96An0BsrY1Ar78ieDL2sBzTyL5sk7El+uRd60D+rJOwJc/E3xZH3jup0i+bBDx5QagL0DWtkHAlwoEXzYGnvtpki+bRHzpBfQFyNo2CfhSkeDL5sBzTyb5skXEl95AX4CsbYuAL38h+LI18NxTSL5sE/HlRqAvQNa2TcCXvxJ82R547mdIvuwQ8eUmoC9A1rZDwJdKBF92Bp77WZIvu0R86QP0Bcjadgn4Upngy+7Ac08l+bJHxJe+QF+ArG2PgC/HEnzZG3juaSRf9on4cjPQFyBr2yfgy3EEX/YHnvs5ki8HRHy5BegLkLUdEPClCsGXtDph536e5Et6HQ1f+iHv94fLbOmB98b7UpXgS6HAc08n+ZIh4kt/oC9A1pYh4MvxBF8yA889g+RLERFfbgX6AmRtRQR8OYHgS/HAc79A8qWEiC+3AX0BsrYSAr5UI/iSFXjuF0m+lBLx5XagL0DWVkrAl+oEX8oEnnsmyZeyIr4MAPoCZG1lBXw5keBLucBzzyL5Ul7ElzuAvgBZW3kBX04i+FIh8NwvkXypKOLLnUBfgKytooAvNQi+VAo898skXyqL+DIQ6AuQtVUW8KUmwZcqgeeeTfKlqogvg4C+AFlbVQFfTib4Ui3w3HNIvlQX8eUuoC9A1lZdwJdTCL7UCDz3KyRfaor4cjfQFyBrqyngiyP44gLP/SrJFxPxZTDQFyBrMwFfjOBL7cBzzyX5UkfElyFAX4CsrY6AL7UIvtQNPPc8ki/1RHy5B+gLkLXVE/DlVIIv9QPP/RrJlwYivtwL9AXI2hoI+FKb4Et24LlfJ/nSUMSXoUBfgKytoYAvdQi+NA4893ySL01EfBkG9AXI2poI+HIawZemgedeQPKlmYgv9wF9AbK2ZgK+nE7wpXnguReSfGkh4sv9QF+ArK2FgC91Cb60DDz3GyRfWon4MhzoC5C1tRLwpR7BlwsCz72I5EtrEV9GAH0BsrbWAr6cQfClTeC5F5N8aSviywNAX4Csra2AL2cSfGkXeO43Sb60F/HlQaAvQNbWXsCX+gRfOgSe+y2SLx1FfBkJ9AXI2joK+NKA4EunwHMvIfnSWcSXUUBfgKyts4AvZxF86RJ47qUkX7qK+PIQ0Bcga+sq4MvZBF+6BZ77bZIv3UV8eRjoC5C1dRfwJZvgS4/Ac79D8qWniC+jgb4AWVtPAV8aEnzpFXjuZSRfeov4MgboC5C1IecvI9nGUSlzdnGS+ZJktEtG+2RcmozLktEhGR2TcXkyrkhGp2R0TsaVybgqGV2S0TUZVyfjmmR0S0b3ZFybjOuS0SMZPZPh79Hu7zvt76Xr7w/q73no7+Pm703l77fj7yHi74vgv+vdf3+1/05e/z2j/rsT/ffB+e+48t/b47+LxH+/gv+Zcf9zsP5n+/zPK/mfwfCfK/eflfWf//OfafKf0/DvPfv30/x7BP51T/9ajr8+9efc/jzCr42eN7NPj+D6VOt63D0aat0Q+n2okm08Qlh/H8XxcIVyPDr0gZxXxtwi54C1j2PR+4jewb8lO9iaUNA+gZ8gnJdkvpCQu6/ICcI44AkCkLWx5q8AeP6mArf1GJAFwxWfdRzBlX6BrxF+8X6MkLu/yBrxOLCXQNaGnD/yyY/lbu+PePLzeAlOz3+3mLv8PSz16ia/0owXWMzHExa1CfGKxCYISPlE6Fck/iXLjwkv3d0e+NnGB6SXLAeInG08CVw4gaxtwB/wimSiwEHsScJBbGDga4RfvCcScg8SWSMmAXsJZG2D4hWJxMnPJNYVCbroTwGLDny/xYDvt9AODE8RFsingcXx++YP/qnbzH2gr2yfBF7ZThY4KZhMYD+FwN5vs1LONhkXUBsIFxKDAz858hdP5xD4DxE5OXoG6CeQtQHnj7ZuPEPozbOEdeNZ8rrxKWHdGBr4uvEp6YWXYSLrxlTgugFkbcP+gC+8TAv8HMuvEZsIrgwXOLdg5B4hskY8B+wlkLWNEPj89WeE3owU8IWRe5SIL88DfQGytlECvnxO6M1oAV8YuceI+DId6AuQtY0R8GUzoTdjBXxh5B4n4ssMoC9A1jZOwJcthN6MF/CFkXuCiC8vAH0BsrYJAr58QejNRAFfGLknifjyItAXIGubJODLl4TeTBbwhZF7iogvM4G+AFnbFAFfthJ6M1XAF0buaSK+zAL6AmRt0wR82UbozXQBXxi5Z4j48hLQFyBrmyHgy1eE3swU8IWRe5aILy8DfQGytlkCvnxN6M1sAV8YueeI+DIb6AuQtc0R8GU7oTdzBXxh5J4n4sscoC9A1jZPwJcdhN7MF/CFkXuBiC+vAH0BsrYFAr58Q+jNIgFfGLkXi/jyKtAXIGtbLODLt4TeLBHwhZF7qYgvc4G+AFnbUgFfdhJ6s0zAF0bu5SK+zAP6AmRtywV82UXozQoBXxi5V4r48hrQFyBrWyngy3eE3qwW8IWRe42IL68DfQGytjUCvnxP6M1aAV8YudeJ+DIf6AuQta0T8GU3oTfrBXxh5N4g4ssCoC9A1rZBwJc9hN5sFPCFkXuTiC8Lgb4AWdsmAV9+IPRms4AvjNxbRHx5A+gLkLVtEfDlR0Jvtgr4wsi9TcSXRUBfgKxtm4Avewm92S7gCyP3DhFfFgN9AbK2HQK+7CP0ZqeAL4zcu0R8eRPoC5C17RLw5SdCb3YL+MLIvUfEl7eAvgBZ2x4BX34m9GavgC+M3PtEfFkC9AXI2vYJ+LKf0Jv9Ar4wch8Q8WUp0Bcgazsg4MsBQm/STgvfF0bu9NM0fHkb+b3euMyWHnhvvC8HCb0pJOALI3eGiC/vAH0BsrYMAV9+IfQmU8AXRu4iIr4sA/oCZG1FBHxJI9z7p7iAL4zcJUR8WQ70BcjaSgj4kk7oTZaAL4zcpUR8eRfoC5C1IeePfONd2k1tjxPYx/eQN95VBVVNYB9XRFDOHkgPfx9XRlDORgqAWhVBOXtIANT7EZSz0QKgVkdQzh4RALUmgnI2VgDUBxGUs8cEQH0YQTkbLwBqbQTl7AkBUOsiqORlXQFQH0VQzp4SAPVxBOVssgCo9RGUs2cEQG2IoJxNFQD1SQTl7DkBUJ9GUM6mC4DaGEE5e0EA1KYIytlMAVCfRVDOXhIA9XkE5Wy2AKjNEZSzVwRAbYmgnM0VAPVFBOXsNQFQX0ZQzuYLgNoaQTlbKABqWwTlbJEAqK8iKGdvCoD6OoJytkQA1PYIytnbAqB2RFDOlgmA+iaCcvauAKhvIyhnKwRA7YygnK0SALUrgnK2WgDUdxGUsw8EQH0fQTlbKwBqdwTl7CMBUHsiKGfrBUD9EEE5+0QA1I8RlLONAqD2RlDOPhMAtS+CcrZZANRPEZSzLwRA/RxBOdsqAGp/BJW8zS0A6kAElbx7KgDqYASVvCknAOqXCCp5r0cAVFrJCMq+EwCVHkElr0wLgCoQQSUveAqAKhhBJa+jCYAqFEElL88IgMqIoJKrfgFQhSOo5GJSANQREVRyjVIg/H3MjKCSU18BUEUiqOSMSgBU0QgqOVALgCoWQSXrvwCo4hFUsqwIgCoRQSVtFQBVsiR+H//9QN9/60jcjtr1tXHbuqE2ZwLR85cFnL/BwPuVDwn8fuWNk/cBpxHue1dG5L53pUritnUV0Lsygd8vcWayjdlp+N4cTc6d3/3zuX1n0Ns9huRLATB3IB87JnDW1ZNtzCRs908Cbr9CyP1nkY4D+Rgys+eRmfbrMXBWMg4m46WcX1/O+dU/SuesUZkp8/NKzt/7v8t93lEl09ION5f5Zf4qcFtlgOd4BVP6nfpAuzQnDcs/91E2mYuMnN8XzmP/cx8F8/h9ZsrzDgKzHvr/PXRfsvLYz98xyAbuDANm2ZL47R4NPAll5T66JJwR7eBVhnGCVvJ/s5CXO8xCXi5lIS+fx/Nm5zyvfM7z/CtNfyIv+Mgu/xm44P8nc17hMHNeIWXOKx5mziumzPlf8njenJzn/SXneX6//prDhrG+HENwolLJsNcCn/nPhNyVA8/t18BX0/C5jw08t1/bKhF4/yXwCza/blQm5P6ryIt4xwGPE0DWhpw/P2cFUuYQfdE7NdnGU7gfCjH/ovKRgHPGK3/z6Pzbd2Hyt2079A9S57dKzr5XLfnrBVbhPOY/95Ge8mf+mN/okL/L/TU95d83Svk3eT0n/f/YTrE89iMrjz+jXVzlhq1S8tcd9v9dNUVE9CKXW1D4QS3wxT1XJHTu48Jc3N0h+2lVgBcUVYHbqvJfmj+Xv4cB+23Azlh+5u9wBwX0BS2yf8cDT1T8NhgXDscT1pqZaWGvsf7Y8h7h2FIt8GPLxaR3/6uLXDicAPQRyNqqB94b78sKQm9qBJ77EpIvNUV8qQb0Bcjaagr4spLQGxd47nYkX0zEl+pAX4CszQR8WUXoTe3Ac7cn+VJHxJcTgb4AWVsdAV/eJ/SmbuC5LyX5Uk/El5OAvgBZWz0BX1YTelM/8NyXkXxpIOJLDaAvQNbWQMCXNYTeZAeeuwPJl4YivtQE+gJkbQ0FfPmA0JvGgefuSPKliYgvJwN9AbK2JgK+fEjoTdPAc19O8qWZiC+nAH0BsrZmAr6sJfSmeeC5ryD50kLEFwf0BcjaWgj4so7Qm5aB5+5E8qWViC8G9AXI2loJ+PIRoTcXBJ67M8mX1iK+1AL6AmRtrQV8+ZjQmzaB576S5EtbEV9OBfoCZG1tBXxZT+hNu8BzX0Xypb2IL7WBvgBZW3sBXzYQetMh8NxdSL50FPGlDtAXIGvrKODLJ4TedAo8d1eSL51FfDkN6AuQtXUW8OVTQm+6BJ77apIvXUV8OR3oC5C1dRXwZSOhN90Cz30NyZfuIr7UBfoCZG3dBXzZROhNj8BzdyP50lPEl3pAX4CsraeAL58RetMr8NzdSb70FvHlDKAvQNbWW8CXzwm96RN47mtJvvQV8eVMoC9A1tZXwJfNhN70Czz3dSRf+ov4Uh/oC5C19RfwZQuhN7cHnrsHyZcBIr40APoCZG0DBHz5gtCbgYHn7knyZZCIL2cBfQGytkECvnxJ6M3gwHNfT/JliIgvZyPvWgf0ZYiAL1sJvRkaeO4bSL4ME/ElG+gLkLUNE/BlG6E3wwPP3YvkywgRXxoCfQGythECvnxF6M3IwHP3JvkySsSXRkBfgKxtlIAvXxN6Mzrw3DeSfBkj4ss5QF+ArG2MgC/bCb0ZG3jum0i+jBPxpTHQFyBrGyfgyw5Cb8YHnrsPyZcJIr40AfoCZG0TBHz5htCbiYHn7kvyZZKIL38D+gJkbZMEfPmW0JvJgee+meTLFBFfzgX6AmRtUwR82UnozdTAc99C8mWaiC9Ngb4AWds0AV92EXozPfDc/Ui+zBDxpRnQFyBrmyHgy3eE3swMPHd/ki+zRHw5D+gLkLXNEvDle0JvZgee+1aSL3NEfDkf6AuQtc0R8GU3oTdzA899G8mXeSK+NAf6AmRt8wR82UPozfzAc99O8mWBiC8tgL4AWdsCAV9+IPRmUeC5B5B8WSziy9+BvgBZ22IBX34k9GZJ4LnvIPmyVMSXfwB9AbK2pQK+7CX0Zlngue8k+bJcxJeWQF+ArG25gC/7CL1ZEXjugSRfVor40groC5C1rRTw5SdCb1YHnnsQyZc1Ir78E+gLkLWtEfDlZ0Jv1gae+y6SL+tEfPkX0Bcga1sn4Mt+Qm/WB577bpIvG0R8uQDoC5C1bRDw5QChNxsDzz2Y5MsmEV9aA30BsrZNAr4cJPRmc+C5h5B82SLiy4VAX4CsbYuAL78QerM18Nz3kHzZJuLLRUBfgKxtm4AvaSXxvdkeeO57Sb7sEPGlDdAXIGvbIeBLOsGXnYHnHkryZZeIL22BvgBZ2y4BXwoQfNkdeO5hJF/2iPhyMdAXIGvbI+BLQYIvewPPfR/Jl30ivlwC9AXI2vYJ+FKI4Mv+wHPfT/LlgIgv7YC+AFnbAQFfMgi+pJ0edu7hJF/ST9fwpT3QFyBrSw+8N96XwgRfCgWeewTJlwwRXy4F+gJkbRkCvhxB8CUz8NwPkHwpIuLLZUBfgKytiIAvmQRfigee+0GSLyVEfOkA9AXI2koI+FKE4EtW4LlHknwpJeJLR6AvQNZWSsCXogRfygSeexTJl7IivlwO9AXI2soK+FKM4Eu5wHM/RPKlvIgvVwB9AbK28gK+FCf4UiHw3A+TfKko4ksnoC9A1lZRwJcSBF8qBZ57NMmXyiK+dAb6AmRtlQV8KUnwpUrguceQfKkq4suVQF+ArA05fxnJNsqkzNkJSeZqyaiejBOTcVIyaiSjZjJOTsYpyXDJsGTUSsapyaidjDrJOC0ZpyejbjLqJeOMZJyZjPrJaJCMs5Lx73u0J8PfS9ffH9Tf89Dfx83fm8rfb8ffQ8TfF8F/17v//mr/nbz+e0b9dyf674Pz33Hlv7fHfxeJ/34F/zPj/udg/c/2+Z9X8j+D4T9X7j8r6z//5z/T5D+n4d979u+n+fcI/Oue/rUcf33qz7n9eYRfGz1vZp+uwvWp1rG4z3jUOi7wz4vMTLZxFWH97YLj4QrleHToAzmvjLlFzgFrH7ui9xG9g0clO3gsoaDVAj9BOCbJfBwhd3WRE4SrgScIQNbGmr8C4PmbCdzWNcgPl6VxDmJXE1ypEfga4Rfvawi5a4qsEd2AvQSyNuT8kU9+LHd7f8STn24lOT3/3WLu8vew1Kub/ErTXWAx705Y1K6NVyR2rYCU14V+ReJfspxMeOnOBX628STpJUsTOdvoAVw4gazN/oBXJD0FDmI9CAex2oGvEX7x7knIXUdkjbge2Esga6sTr0gkTn6uZ12RoIt+A7DowPdbDPh+C+3AcANhgewFLI7fN3/wT91m7gN9ZdsDeGXbW+CkoDeB/Y0E9n6blXK2ybiAeoZwIVE38JMjf/GUReBfT+Tk6Cagn0DWBpw/2rpxE6E3fQjrRh/yujGVsG7UD/0zcqQXXhqIrBt9gesGkLU1+AO+8HJz4OdYfo14juBKtsC5BSN3Q5E14hZgL4GsrWHox5ZkG88TetNYwBdG7iYivvQD+gJkbU0EfJlO6E1TAV8YuZuJ+NIf6AuQtTUT8GUGoTfNBXxh5G4h4sutQF+ArK2FgC8vEHrTUsAXRu5WIr7cBvQFyNpaCfjyIqE3Fwj4wsjdWsSX24G+AFlbawFfZhJ600bAF0butiK+DAD6AmRtbQV8mUXoTTsBXxi524v4cgfQFyBray/gy0uE3nQQ8IWRu6OIL3cCfQGyto4CvrxM6E0nAV8YuTuL+DIQ6AuQtXUW8GU2oTddBHxh5O4q4ssgoC9A1tZVwJc5hN50E/CFkbu7iC93AX0BsrbuAr68QuhNDwFfGLl7ivhyN9AXIGvrKeDLq4Te9BLwhZG7t4gvg4G+AFlbbwFf5hJ600fAF0buviK+DAH6AmRtfQV8mUfoTT8BXxi5+4v4cg/QFyBr6y/gy2uE3twu4Asj9wARX+4F+gJkbQMEfHmd0JuBAr4wcg8S8WUo0Bcgaxsk4Mt8Qm8GC/jCyD1ExJdhQF+ArG2IgC8LCL0ZKuALI/cwEV/uA/oCZG3DBHxZSOjNcAFfGLlHiPhyP9AXIGsbIeDLG4TejBTwhZF7lIgvw4G+AFnbKAFfFhF6M1rAF0buMSK+jAD6AmRtYwR8WUzozVgBXxi5x4n48gDQFyBrGyfgy5uE3owX8IWRe4KILw8CfQGytgkCvrxF6M1EAV8YuSeJ+DIS6AuQtU0S8GUJoTeTBXxh5J4i4ssooC9A1jZFwJelhN5MFfCFkXuaiC8PAX0BsrZpAr68TejNdAFfGLlniPjyMNAXIGubIeDLO4TezBTwhZF7logvo4G+AFnbLAFflhF6M1vAF0buOSK+jAH6AmRtcwR8WU7ozVwBXxi554n48gjQFyBrmyfgy7uE3swX8IWRe4GIL48CfQGyNuT8kW+8S7up7XEC+zgWeeNdVVDVBPZxXATl7IH08PfxsQjK2UgBUI9HUM4eEgA1PoJyNloA1IQIytkjAqCeiKCSU18BUE9GUMkZlQCoiRFUcqAWADUpgkrWfwFQT0VQybIiAOrpCCppqwCoyRFUMgkCoKZEUM6eEQD1TASVvPUoAOrZCMrZcwKgpkZQzqYLgJoWQTl7QQDUcxGUs5kCoJ6PoJy9JABqegTlbLYAqBkRlLNXBEC9EEE5mysA6sUIytlrAqBmRlDO5guAmhVBOVsoAOqlCMrZIgFQL0dQzt4UADU7gnK2RADUnAjK2dsCoF6JoJwtEwD1agTl7F0BUHMjKGcrBEDNi6CcrRIA9VoE5Wy1AKjXIyhnHwiAmh9BOVsrAGpBBOXsIwFQCyMoZ+sFQL0RQTn7RADUogjK2UYBUIsjKGefCYB6M4JytlkA1FsRlLMvBEAtiaCcbRUAtTSCcvaVAKi3Iyhn2wVAvRNBOftGANSyCMrZTgFQyyMoZ98JgHo3gnK2WwDUexGUsx8EQK2IoJztFQC1MoJy9pMAqFURlLP9AqDej6CcHRQAtTqCcpZWIPx9XBNBOSsgAOqDCMpZIQFQH0ZQzgoLgFobQTnLFAC1LoJyVlQA1EcRlLPiAqA+Lonfx38/0PffWg+8/9axp+G2ddxpnAlEz98G4PzVBd6/rF7g970rlczbzSV/v9388lgkct+7T0ritnUM0LtFgfdmbrKN+Wn43rxJzp3v+74m2/iE4MtbJF8KgLkD+dhbgbOunmxjLmG7bwu4vZCQ+x2RjgP5GDKz55GZ9usxcF4yDibjtZxfX8/51T8+zVmjMlPmZ2HO3/u/y33expJpaYeby/wyfwO4rU3Ac7yCKf1OfcB/VC8Nyz/38VkyFxk5vy+cx/7nPgrm8fvMlOcdBGY99P976L5k5bGfv2OQDdwZBszPSuK3+znwJJSV+/OScEa0g9cmwgna5pL/m4V8y2EW8i0pC/kXeTxvfs7zvsh5nn+l6Uvygo/s8lbggv+fzPm2w8z5tpQ5/+owc/5Vypx/ncfzFuQ87+uc5/n92p7DhrG+bCY4saNk2GuBz7yVkPubwHP7NfCNNHzubwPP7de2HQTe7wZ+webXjW8Iud8TeRFvJ/A4AWRtyPnzc1YgZQ7RF70zk23cAJxH/6LyesA545W/eXT+7bsw+du2HfoHqfO7K2ffvyv56wVW4TzmP/eRnvJn/pjf6JC/y/01PeXfN0r5N3k9J/3/2E6xPPYjK48/o11c5YbdVfLXHfb//V1KgdCLXG5B0YvcqsAX91yR0LnfD3Nxd4fsp+0CXlB8B9zW6v/S/Ln8PQzYbwN2xvIzf4c7KKAvaJH9+x54gPXbYFw4fE9Ya+amhb3G+mPLWELutYEfW04gvfu/TuTCYTfQRyBrWxd4b7wv4wi9WR947mokXzaI+LIH6AuQtW0Q8OUxQm82Bp67OsmXTSK+/AD0BcjaNgn48jjjTbzAc59I8mWLiC8/An0BsrYtAr6MJ/Rma+C5TyL5sk3El71AX4CsbZuALxMIvdkeeO4aJF92iPiyD+gLkLXtEPDlCUJvdgaeuybJl10ivvwE9AXI2nYJ+PIkoTe7A899MsmXPSK+/Az0Bcja9gj4MpHQm72B5z6F5Ms+EV/2A30BsrZ9Ar5MIvRmf+C5HcmXAyK+HAD6AmRtBwR8eYrQm7S6Yec2ki/pdTV8OYj8vA0us6UH3hvvy9OE3hQKPHctki8ZIr78AvQFyNoyBHyZTOhNZuC5TyX5UkTEl7QjcXMJZG1FBHyZQuhN8cBz1yb5UkLEl3SgL0DWVkLAl2cIvckKPHcdki+lRHwpAPQFyNpKCfjyLKE3ZQLPfRrJl7IivhQE+gJkbWUFfJlK6E25wHOfTvKlvIgvhYC+AFlbeQFfphF6UyHw3HVJvlQU8SUD6AuQtVUU8OU5Qm8qBZ67HsmXyiK+FAb6AmRtlQV8eZ7QmyqB5z6D5EtVEV+OAPoCZG1VBXyZTuhNtcBzn0nypbqIL5lAX4CsrbqALzMIvakReO76JF9qivhSBOgLkLXVFPDlBUJvXOC5G5B8MRFfigJ9AbI2E/DlRUJvagee+yySL3VEfCkG9AXI2uoI+DKT0Ju6gec+m+RLPRFfigN9AbK2egK+zCL0pn7gubNJvjQQ8aUE0Bcga2sg4MtLhN5kB567IcmXhiK+lAT6AmRtDQV8eZnQm8aB525E8qWJiC9HAn0BsrYmAr7MJvSmaeC5zyH50kzElyygL0DW1kzAlzmE3jQPPHdjki8tRHwpBfQFyNpaCPjyCqE3LQPP3YTkSysRX0oDfQGytlYCvrxK6M0Fgef+G8mX1iK+HAX0BcjaWgv4MpfQmzaB5z6X5EtbEV/KAH0Bsra2Ar7MI/SmXeC5m5J8aS/iS1mgL0DW1l7Al9cIvekQeO5mJF86ivhyNNAXIGvrKODL64TedAo893kkXzqL+HIM0Bcga+ss4Mt8Qm+6BJ77fJIvXUV8KQf0Bcjaugr4soDQm26B525O8qW7iC/lgb4AWVt3AV8WEnrTI/DcLUi+9BTx5U9AX4CsraeAL28QetMr8Nx/J/nSW8SXPwN9AbK23gK+LCL0pk/guf9B8qWviC8VgL4AWVtfAV8WE3rTL/DcLUm+9BfxpSLQFyBr6y/gy5uE3tweeO5WJF8GiPjyF6AvQNY2QMCXtwi9GRh47n+SfBkk4stfgb4AWdsgAV+WEHozOPDc/yL5MkTEl0pAX4CsbYiAL0sJvRkaeO4LSL4ME/GlMtAXIGsbJuDL24TeDA88d2uSLyNEfDkW6AuQtY0Q8OUdQm9GBp77QpIvo0R8OQ7oC5C1jRLwZRmhN6MDz30RyZcxIr5UAfoCZG1jBHxZTujN2MBztyH5Mk7El6pAX4CsbZyAL+8SejM+8NxtSb5MEPHleKAvQNY2QcCX9wi9mRh47otJvkwS8eUEoC9A1jZJwJcVhN5MDjz3JSRfpoj4Ug3oC5C1TRHwZSWhN1MDz92O5Ms0EV+qA30BsrZpAr6sIvRmeuC525N8mSHiy4lAX4CsbYaAL+8TejMz8NyXknyZJeLLSUBfgKxtloAvqwm9mR147stIvswR8aUG0Bcga5sj4MsaQm/mBp67A8mXeSK+1AT6AmRt8wR8+YDQm/mB5+5I8mWBiC8nA30BsrYFAr58SOjNosBzX07yZbGIL6cAfQGytsUCvqwl9GZJ4LmvIPmyVMQXB/QFyNqWCviyjtCbZYHn7kTyZbmILwb0Bcjalgv48hGhNysCz92Z5MtKEV9qAX0BsraVAr58TOjN6sBzX0nyZY2IL6cCfQGyNuT8ZSTbKJsyZ7sT3nuS8UMyfkzG3mTsS8ZPyfg5GfuTcSAZB5PxSzLSkjlKT0aBZBRMRqFkZCSjcDKOSEZmMooko2gyiiXD36Pd33fa30vX3x/U3/PQ38fN35vK32/H30PE3xfBf9e7//5q/528/ntG/Xcn+u+D899x5b+3x38Xif9+Bf8z4/7nYP3P9vmfV/I/g+E/V+4/K+s//+c/0+Q/p+Hfe/bvp/n3CPzrnv61HH996s+5/XmEXxs9b2afauP6VGvV6bhtvX962OvQ3GQbfu7Q61AdHA9XKMejQx/IeWXMLXIOWPt4Gnof0Tu4MVkIvyUcKNcGfoKwOcm8k5B7ncgJwunAEwQga2PNXwHw/M0FbqsukAXDFZ/1dMJBbH3ga4RfvOsScm8QWSPqAXsJZG3I+SOf/Fju9v6IJz/1juT0/HeLucvfw1KvbvIrzRkCi/kZhEXtzHhFYmcKSFk/9CsS/5Jlb8KZ+cbAzzZ6kF6y3CRyttEAuHACWdumP+AVyVkCB7EGhIPY5sDXCL94n0XIvUVkjTgb2Esga9sSr0gkTn7OZl2RoIueDSw68P0WA77fQjswZBMWyIbA4vh98wf/1G3mPtBXtg2AV7aNBE4KGhHYn0Ng77dZKWebjAuomwgXElsDPznyF08bCLm3iZwcNQb6CWRtwPmjrRuNCetGE8K60YS8bvQl+LM98HWjL+mFlx0i68bfgOsGkLXt+AO+8HJu4OdYfo24heDKToFzC0buXSJrRFNgL4GsbZfA56/7EXqzW8AXRu49Ir40A/oCZG17BHzpT+jNXgFfGLn3ifhyHtAXIGvbJ+DLrYTe7BfwhZH7gIgv5wN9AbK2AwK+3EboTVq98H1h5E6vp+FLc+R1NS6zpQfeG+/L7YTeFBLwhZE7Q8SXFkBfgKwtQ8CXAYTeZAr4wshdRMSXvwN9AbK2IgK+3EHoTXEBXxi5S4j48g+gL0DWVkLAlzsJvckS8IWRu5SILy2BvgBZWykBXwYSelNGwBdG7rIivrQC+gJkbWUFfBlE6E05AV8YucuL+PJPoC9A1lZewJe7CL2pIOALI3dFEV/+BfQFyNoqCvhyN6E3lQR8YeSuLOLLBUBfgKytsoAvgwm9qSLgCyN3VRFfWgN9AbK2qgK+DCH0ppqAL4zc1UV8uRDoC5C1VRfw5R5Cb2oI+MLIXVPEl4uAvgBZW00BX+4l9MYJ+MLIbSK+tAH6AmRtJuDLUEJvagv4wshdR8SXtkBfgKytjoAvwwi9qSvgCyN3PRFfLgb6AmRt9QR8uY/Qm/oCvjByNxDx5RKgL0DW1kDAl/sJvckW8IWRu6GIL+2AvgBZW0MBX4YTetNYwBdG7iYivrQH+gJkbU0EfBlB6E1TAV8YuZuJ+HIp0Bcga2sm4MsDhN40F/CFkbuFiC+XAX0BsrYWAr48SOhNSwFfGLlbifjSAegLkLW1EvBlJKE3Fwj4wsjdWsSXjkBfgKyttYAvowi9aSPgCyN3WxFfLgf6AmRtbQV8eYjQm3YCvjBytxfx5QqgL0DW1l7Al4cJvekg4Asjd0cRXzoBfQGyto4Cvowm9KaTgC+M3J1FfOkM9AXI2joL+DKG0JsuAr4wcncV8eVKoC9A1tZVwJdHCL3pJuALI3d3EV+uAvoCZG3dBXx5lNCbHgK+MHL3FPGlC9AXIGtDzh/5xru0m9oeJ7CPXZE33lUFVU1gH6+OoJw9kB7+Pl4TQTkbKQCqWwTl7CEBUN0jKGejBUBdG0E5e0QA1HURlLOxAqB6RFDOHhMA1TOCcjZeANT1EZSzJwRA3RBBOZsoAKpXBOXsKQFQvSMoZ5MFQN0YQTl7RgDUTRGUs6kCoPpEUM6eEwDVN4JyNl0A1M0RlLMXBEDdEkE5mykAql8E5ewlAVD9IyhnswVA3RpBOXtFANRtEZSzuQKgbo+gnL0mAGpABOVsvgCoOyIoZwsFQN0ZQTlbJABqYATl7E0BUIMiKGdLBEDdFUE5e1sA1N0RlLNlAqAGR1DO3hUANSSCcrZCANQ9EZSzVQKg7o2gnK0WADU0gnL2gQCoYRGUs7UCoO6LoJx9JADq/gjK2XoBUMMjKGefCIAaEUE52ygA6oEIytlnAqAejKCcbRYANTKCcvaFAKhREZSzrQKgHoqgnH0lAOrhCMrZdgFQoyMoZ98IgBoTQTnbKQDqkQjK2XcCoB6NoJztFgA1NoJy9oMAqHERlLO9AqAei6Cc/SQA6vEIytl+AVDjIyhnBwVATYignKUVCH8fn4ignBUQAPVkBOWskACoiRGUs8ICoCZFUM4yBUA9FUE5KyoA6ukIyllxAVCTj8Tv478f6PtvTQHef2vV6bhtvX86ZwLR8/cMcP621sVta1td7PzBP/NZMi3t3CN/v9388uglct+7Z4/EbestoHe9Ar9f4qJkG0vS8L25kZw7v/vncz9L8OUmki8FwNyBfOymwFlXT7axiLDdmwXcfpuQ+xaRjgP5GDKz55GZ9usxcHEyDibjzZxf38r51T+m5qxRmSnz83bO3/u/y33etCPT0g43l/ll/g5wW88Bz/EKpvQ79YF2aWkaln/u4/lkLjJyfl84j/3PfRTM4/eZKc87CMx66P/30H3JymM/f8cgG7gzDJjPH0n4nm7gSSgr9/Qj4YxoB6/nCCdoM4783yzkLxxmIX8hZSF/MY/nLcl53os5z/OvNM0kL/jILs8CLvj/yZy/dJg5fyllzl8+zJy/nDLns/N43tKc583OeZ7frzk5bBjrywyCE68cGfZa4DPPIuR+NfDcfg18Jw2fe27guf3a9gqB962BX7D5deNVQu7bRF7Emwc8TgBZG3L+/JwVSJlD9EXvXL8t4Dz6F5WnAM4Zr/zNo/Nv34XJ37bt0D9Ind/Xcvb99SN/vcAqnMf85z7SU/7MH/MbHfJ3ub+mp/z7Rin/Jq/npP8f2ymWx35k5fFntIur3LCvHfnrDvv/fj2lQOhFLreg6EXujsAX91yR0LnvDHNxd4fsp70GvKB4Hbitgf+l+XP5exiw3wbsjOVn/g53UEBf0CL7Nx94gPXbYFw4zCesNYvSwl5j/bGlKyH34MCPLbtJ7/4PEblwWAD0EcjahgTeG+/L1YTeDA089x6SL8NEfFkI9AXI2oYJ+HINoTfDA8/9A8mXESK+vAH0BcjaRgj40o3Qm5GB5/6R5MsoEV8WAX0BsrZRAr50J/RmdOC595J8GSPiy2KgL0DWNkbAl2sJvRkbeO59JF/GifjyJtAXIGsbJ+DLdYTejA88908kXyaI+PIW0Bcga5sg4EsPQm8mBp77Z5Ivk0R8WQL0BcjaJgn40pPQm8mB595P8mWKiC9Lgb4AWdsUAV+uJ/RmauC5D5B8mSbiy9tAX4CsbZqALzcQejM98NwHSb7MEPHlHaAvQNY2Q8CXXoTezAw89y8kX2aJ+LIM6AuQtc0S8KU3oTezA8+ddiTHlzkiviwH+gJkbXMEfLmR0Ju5gedOJ/kyT8SXd4G+AFnbPAFfbiL0Zn7guQuQfFkg4st7QF+ArG2BgC99GD/HEHjugiRfFov4sgLoC5C1LRbwpS+hN0sCz12I5MtSEV9WAn0BsralAr7cTOjNssBzZ5B8WS7iyyqgL0DWtlzAl1sIvVkReO7CJF9WivjyPtAXIGtbKeBLP0JvVgee+wiSL2tEfFkN9AXI2tYI+NKf0Ju1gefOJPmyTsSXNUBfgKxtnYAvtxJ6sz7w3EVIvmwQ8eUDoC9A1rZBwJfbCL3ZGHjuoiRfNon48iHQFyBr2yTgy+2E3mwOPHcxki9bRHxZC/QFyNq2CPgygNCbrYHnLk7yZZuIL+uAvgBZ2zYBX+4g9GZ74LlLkHzZIeLLR0BfgKxth4AvdxJ6szPw3CVJvuwS8eVjoC9A1rZLwJeBhN7sDjz3kSRf9oj4sh7oC5C17RHwZRChN3sDz51F8mWfiC8bgL4AWds+AV/uIvRmf+C5S5F8OSDiyydAX4Cs7YCAL3cTepN2Rti5S5N8ST9Dw5dPkffLwGW29MB7430ZTOhNocBzH0XyJUPEl41AX4CsLUPAlyGE3mQGnrsMyZciIr5sAvoCZG1FBHy5h9Cb4oHnLkvypYSIL58BfQGythICvtxL6E1W4LmPJvlSSsSXz4G+AFlbKQFfhhJ6Uybw3MeQfCkr4stmoC9A1lZWwJdhhN6UCzx3OZIv5UV82QL0Bcjaygv4ch+hNxUCz12e5EtFEV++APoCZG0VBXy5n9CbSoHn/hPJl8oivnwJ9AXI2ioL+DKc0Jsqgef+M8mXqiK+bAX6AmRtVQV8GUHoTbXAc1cg+VJdxJdtQF+ArK26gC8PEHpTI/DcFUm+1BTx5SugL0DWVlPAlwcJvXGB5/4LyRcT8eVroC9A1mYCvowk9KZ24Ln/SvKljogv24G+AFlbHQFfRhF6Uzfw3JVIvtQT8WUH0Bcga6sn4MtDhN7UDzx3ZZIvDUR8+QboC5C1NRDw5WFCb7IDz30syZeGIr58C/QFyNoaCvgymtCbxoHnPo7kSxMRX3YCfQGytiYCvowh9KZp4LmrkHxpJuLLLqAvQNbWTMCXRwi9aR547qokX1qI+PId0Bcga2sh4MujhN60DDz38SRfWon48j3QFyBrayXgy1hCby4IPPcJJF9ai/iyG+gLkLW1FvBlHKE3bQLPXY3kS1sRX/YAfQGytrYCvjxG6E27wHNXJ/nSXsSXH4C+AFlbewFfHif0pkPguU8k+dJRxJcfgb4AWVtHAV/GE3rTKfDcJ5F86Sziy16gL0DW1lnAlwmE3nQJPHcNki9dRXzZB/QFyNq6CvjyBKE33QLPXZPkS3cRX34C+gJkbd0FfHmS0Jsegec+meRLTxFffgb6AmRtPQV8mUjoTa/Ac59C8qW3iC/7gb4AWVtvAV8mEXrTJ/DcjuRLXxFfDgB9AbK2vgK+PEXoTb/AcxvJl/4ivhwE+gJkbf0FfHma0JvbA89di+TLABFffgH6AmRtAwR8mUzozcDAc59K8mWQiC9pWbi5BLI25PxlJNs4OmXOFiS8FybjjWQsSsbiZLyZjLeSsSQZS5PxdjLeScayZCxPxrvJeC8ZK5KxMhmrkvF+MlYnY00yPkjGh8lYmwx/j3Z/32l/L11/f1B/z0N/Hzd/byp/vx1/DxF/XwT/Xe/++6v9d/L67xn1353ovw/Of8eV/94e/10k/vsV/M+M+5+D9T/b539eyf8Mhv9cuf+srP/8n/9Mk/+chn/v2b+f5t8j8K97+tdy/PWpP+f25xF+bfS8mX1Kx/Wp1h24e8zVujPw+9Ut8tvMwq9DBXA8XKEcjw59IOeVMbfIOWDtY0H0PqJ3cFqyeMwlHCgHB36CMCPJPI+Qe4jICUIh4AkCkLWx5q8AeP4WAbeVAWTBcMVnLUQ4iA0NfI3wi3cGIfcwkTWiMLCXQNaGnD/yyY/lbu+PePJTOIvT898t5i5/D0u9usmvNEcILOZHEBa1zHhFYpkCUhYJ/YrEv2TZiHBmPjzws40GpJcsR4icbRQFLpxA1jbiD3hFUkzgIFaUcBAbGfga4RfvYoTco0TWiOLAXgJZ26h4RSJx8lM8i9NzeNFLAIsOfL/FgO+30A4MJQgLZElgcfy++YN/6jZzH+gr26LAK9sjBU4KjiSwzyKw99uslLNNxgVUY8KFxOjAT478xdMzhNxjRE6OSgH9BLI24PzR1o1ShHWjNGHdKE1eN/5G8Gds4OvG30gvvIwTWTeOAq4bQNY27g/4wkuZwM+x/BrRlODKeIFzC0buCSJrRFlgL4GsbYLA56+bEXozUcAXRu5JIr4cDfQFyNomCfhyHqE3kwV8YeSeIuLLMUBfgKxtioAv5xN6M1XAF0buaSK+lAP6AmRt0wR8aU7ozXQBXxi5Z4j4Uh7oC5C1zRDwpQWhNzMFfGHkniXiy5+AvgBZ2ywBX/5O6M1sAV8YueeI+PJnoC9A1jZHwJd/EHozV8AXRu55Ir5UAPoCZG3zBHxpSejNfAFfGLkXiPhSEegLkLUtEPClFaE3iwR8YeReLOLLX4C+AFnbYgFf/knozRIBXxi5l4r48legL0DWtlTAl38RerNMwBdG7uUivlQC+gJkbcsFfLmA0JsVAr4wcq8U8aUy0Bcga1sp4EtrQm9WC/jCyL1GxJdjgb4AWdsaAV8uJPRmrYAvjNzrRHw5DugLkLWtE/DlIkJv1gv4wsi9QcSXKkBfgKxtg4AvbQi92SjgCyP3JhFfqgJ9AbK2TQK+tCX0ZrOAL4zcW0R8OR7oC5C1bRHw5WJCb7YK+MLIvU3ElxOAvgBZ2zYBXy4h9Ga7gC+M3DtEfKkG9AXI2nYI+NKO0JudAr4wcu8S8aU60Bcga9sl4Et7Qm92C/jCyL1HxJcTgb4AWdseAV8uJfRmr4AvjNz7RHw5CegLkLXtE/DlMkJv9gv4wsh9QMSXGkBfgKztgIAvHQi9STszfF8YudPP1PClJvJ78XCZLT3w3nhfOhJ6U0jAF0buDBFfTgb6AmRtGQK+XE7oTaaAL4zcRUR8OQXoC5C1FRHw5QpCb4oL+MLIXULEFwf0BcjaSgj40onQmywBXxi5S4n4YkBfgKytlIAvnQm9KSPgCyN3WRFfagF9AbK2sgK+XEnoTTkBXxi5y4v4cirQFyBrKy/gy1WE3lQQ8IWRu6KIL7WBvgBZW0UBX7oQelNJwBdG7soivtQB+gJkbcj5I9949//xQXfzOIF9PC0LuI+qoKoJ7OPpEZSzB9LD38e6EZSzkQKg6kVQzh4SAHVGBOVstACoMyMoZ48IgKofQTkbKwCqQQTl7DEBUGdFUM7GC4A6O4Jy9oQAqOwIytlEAVANIyhnTwmAahRBOZssAOqcCMrZMwKgGkdQzqYKgGoSQTl7TgDU3yIoZ9MFQJ0bQTl7QQBU0wjK2UwBUM0iKGcvCYA6L4JyNlsA1PkRlLNXBEA1j6CczRUA1SKCcvaaAKi/R1DO5guA+kcE5WyhAKiWEZSzRQKgWkVQzt4UAPXPCMrZEgFQ/4qgnL0tAOqCCMrZMgFQrSMoZ+8KgLowgnK2QgDURRGUs1UCoNpEUM5WC4BqG0E5+0AA1MURlLO1AqAuiaCcfSQAql0E5Wy9AKj2EZSzTwRAXRpBOdsoAOqyCMrZZwKgOkRQzjYLgOoYQTn7QgDU5RGUs60CoK6IoJx9JQCqUwTlbLsAqM4RlLNvBEBdGUE52ykA6qoIytl3AqC6RFDOdguA6hpBOftBANTVEZSzvQKgromgnP0kAKpbBOVsvwCo7hGUs4MCoK6NoJylFQh/H6+LoJwVEADVI4JyVkgAVM8IyllhAVDXR1DOMgVA3RBBOSsqAKpXBOWsuACo3ln4ffz3A33/rRtxO2p31MNt6856nAlEz99NwPkbfQZuW2POwM4fWpBnj0xLK5P1++3ml0cVkfve9ckCdhDoXZXA75e4LNnGijR8b44n587v/vncfQi+nEDypQCYO5CPnRA46+rJNpYRtnuigNurCLlPEuk4kI8hM3semWm/HgOXJ+NgMt7N+fW9nF/9o2/OGpWZMj+rcv7e/13u827OSks73Fzml/n7wG3dAjzHK5jS79QH2qWVaVj+uY9+yVxk5Py+cB77n/somMfvM1OedxCY9dD/76H7kpXHfv6OQTZwZxgw+2Xht9sfeBLKyt0/C86IdvC6hXCCdmvW/2Yhv+0wC/ltKQv57Xk8b0XO827PeZ5/pWkAecFHdvkO4IL/n8z5nYeZ8ztT5nzgYeZ8YMqcD8rjeStznjco53l+v+7KYcNYX24lOHF3Vthrgc98ByH34MBz+zXw/TR87iGB5/Zr290E3icHfsHm143BhNyniLyIdw/wOAFkbcj583NWIGUO0Re9i5JtlADOo39R+UbAOeOVv3l0/u27MPnbth36B6nze2/Ovg/N+vUCq3Ae85/7SE/5M3/Mb3TI3+X+mp7y7xul/Ju8npP+f2ynWB77kZXHn9EurnLD3pv16w77/x6aUiD0IpdbUPQiVyvwxT1XJHTuU8Nc3N0h+2n3Ai8ohgK3Vfu/NH8ufw8D9tuAnbH8zN/hDgroC1pk/4YBD7B+G4wLh2GEtWZZWthrrD+2nEbIXTfwY8sC0rv/9UQuHO4D+ghkbfUC74335XRCb+oHnnshyZcGIr7cD/QFyNoaCPhSl9Cb7MBzv0HypaGIL8OBvgBZW0MBX+oRetM49NwkX5qI+DIC6AuQtTUR8OUMQm+aBp57McmXZiK+PAD0Bcjamgn4ciahN80Dz/0myZcWIr48CPQFyNpaCPhSn9CbloHnfovkSysRX0YCfQGytlYCvjQg9OaCwHMvIfnSWsSXUUBfgKyttYAvZxF60ybw3EtJvrQV8eUhoC9A1tZWwJezCb1pF3jut0m+tBfx5WGgL0DW1l7Al2xCbzoEnvsdki8dRXwZDfQFyNo6CvjSkNCbTqH/5DPJl84ivowB+gJkbZ0FfGlE6E2XwHMvJ/nSVcSXR4C+AFlbVwFfziH0plvgud8l+dJdxJdHgb4AWVt3AV8aE3rTI/Dc75F86Sniy1igL0DW1lPAlyaE3vQKPPcKki+9RXwZB/QFyNp6C/jyN0Jv+gSeeyXJl74ivjwG9AXI2voK+HIuoTf9As+9iuRLfxFfHgf6AmRt/QV8aUroze2B536f5MsAEV/GA30BsrYBAr40I/RmYOC5V5N8GSTiywSgL0DWNkjAl/MIvRkceO41JF+GiPjyBNAXIGsbIuDL+YTeDA089wckX4aJ+PIk0Bcgaxsm4EtzQm+GB577Q5IvI0R8mQj0BcjaRgj40oLQm5GB515L8mWUiC+TgL4AWdsoAV/+TujN6MBzryP5MkbEl6eAvgBZ2xgBX/5B6M3YwHN/RPJlnIgvTwN9AbK2cQK+tCT0ZnzguT8m+TJBxJfJQF+ArG2CgC+tCL2ZGHju9SRfJon4MgXoC5C1TRLw5Z+E3kwOPPcGki9TRHx5BugLkLVNEfDlX4TeTA089yckX6aJ+PIs0Bcga5sm4MsFhN5MDzz3pyRfZoj4MhXoC5C1zRDwpTWhNzMDz72R5MssEV+mAX0BsrZZAr5cSOjN7MBzbyL5MkfEl+eAvgBZ2xwBXy4i9GZu4Lk/I/kyT8SX54G+AFnbPAFf2hB6Mz/w3J+TfFkg4st0oC9A1rZAwJe2hN4sCjz3ZpIvi0V8mQH0BcjaFgv4cjGhN0sCz72F5MtSEV9eAPoCZG1LBXy5hNCbZYHn/oLky3IRX14E+gJkbcsFfGlH6M2KwHN/SfJlpYgvM4G+AFnbSgFf2hN6szrw3FtJvqwR8WUW0Bcga1sj4MulhN6sDTz3NpIv60R8eQnoC5C1rRPw5TJCb9YHnvsrki8bRHx5GegLkLVtEPClA6E3GwPP/TXJl00ivswG+gJkbZsEfOlI6M3mwHNvJ/myRcSXOUBfgKxti4AvlxN6szXw3DtIvmwT8eUVoC9A1rZNwJcrCL3ZHnjub0i+7BDx5VWgL0DWtkPAl06E3uwMPPe3JF92ifgyF+gLkLXtEvClM6E3uwPPvZPkyx4RX+YBfQGytj0CvlxJ6M3ewHPvIvmyT8SX14C+AFnbPgFfriL0Zn/gub8j+XJAxJfXgb4AWdsBAV+6EHqTVj/s3N+TfEmvr+HLfKAvQNaWHnhvvC9dCb0pFHju3SRfMkR8WQD0BcjaMgR8uZrQm8zAc+8h+VJExJeFQF+ArK2IgC/XEHpTPPDcP5B8KSHiyxtAX4CsrYSAL90IvckKPPePJF9KifiyCOgLkLWVEvClO6E3ZQLPvZfkS1kRXxYDfQGytrICvlxL6E25wHPvI/lSXsSXN4G+AFlbeQFfriP0pkLguX8i+VJRxJe3gL4AWVtFAV96EHpTKfDcP5N8qSziyxKgL0DWVlnAl56E3lQJPPd+ki9VRXxZCvQFyNqqCvhyPaE31QLPfYDkS3URX94G+gJkbdUFfLmB0Jsagec+SPKlpogv7wB9AbK2mgK+9CL0xgWe+xeSLybiyzKgL0DWZgK+9Cb0pnbgudOyOL7UEfFlOdAXIGtDzl9Gso1jUubsviTz/ckYnowRyXggGQ8mY2QyRiXjoWQ8nIzRyRiTjEeS8WgyxiZjXDIeS8bjyRifjAnJeCIZTyZjYjImJcPfo93fd9rfS9ffH9Tf89Dfx83fm8rfb8ffQ8TfF8F/17v//mr/nbz+e0b9dyf674Pz33Hlv7fHfxeJ/34F/zPj/udg/c/2+Z9X8j+D4T9X7j8r6z//5z/T5D+n4d979u+n+fcI/Oue/rUcf33qz7n9eYRfGz1vZp/exfWpVi3cZ9RrnRr4592XJdt4l7AOvYfj4QrleHToAzmvjLlFzgFrH1eg9xG9gzcnOziEUNC6gZ8g3JpkvoeQu57ICcJK4AkCkLWx5q8AeP6WAbe1CsiC4YrPupLgSv3A1wi/eK8i5G4gska8D+wlkLUh54988mO52/sjnvy8n8Xp+e8Wc5e/h6Ve3eT7m9kFFvPVhEVtTbwisTUCUn4Q+hWJf8nySEJBswM/2yhKesmyocjZxofAhRPI2hr+Aa9I1gocxD4kuNI48DXCL95rCbmbiKwR64C9BLK2JvGKROLkZ10Wp+fwon8ELDrw/RYDvt9COzB8RFggPwYWx++bP/inbjP3gb6y/RB4Zbte4KRgPYH9BgJ7v81KOdtkXECVIsxD08BPjvzF002E3M1ETo4+AfoJZG3A+aOtG58QevMpYd34lLxuHEWYh+aBrxtHkV54aSGybmwErhtA1tbiD/jCy6bAz7H8GlGW4EpLgXMLRu5WImvEZ8BeAllbK4HPXx9N6M0FAr4wcrcW8eVzoC9A1tZawJdjCL1pI+ALI3dbEV82A30Bsra2Ar6UI/SmnYAvjNztRXzZAvQFyNraC/hSntCbDgK+MHJ3FPHlC6AvQNbWUcCXPxF600nAF0buziK+fAn0BcjaOgv48mdCb7oI+MLI3VXEl61AX4CsrauALxUIvekm4Asjd3cRX7YBfQGytu4CvlQk9KaHgC+M3D1FfPkK6AuQtfUU8OUvhN70EvCFkbu3iC9fA30BsrbeAr78ldCbPgK+MHL3FfFlO9AXIGvrK+BLJUJv+gn4wsjdX8SXHUBfgKytv4AvlQm9uV3AF0buASK+fAP0BcjaBgj4ciyhNwMFfGHkHiTiy7dAX4CsbZCAL8cRejNYwBdG7iEivuwE+gJkbUMEfKlC6M1QAV8YuYeJ+LIL6AuQtQ0T8KUqoTfDBXxh5B4h4st3QF+ArG2EgC/HE3ozUsAXRu5RIr58D/QFyNpGCfhyAqE3owV8YeQeI+LLbqAvQNY2RsCXaoTejBXwhZF7nIgve4C+AFnbOAFfqhN6M17AF0buCSK+/AD0BcjaJgj4ciKhNxMFfGHkniTiy49AX4CsbZKALycRejNZwBdG7ikivuwF+gJkbVMEfKlB6M1UAV8YuaeJ+LIP6AuQtU0T8KUmoTfTBXxh5J4h4stPQF+ArG2GgC8nE3ozU8AXRu5ZIr78DPQFyNpmCfhyCqE3swV8YeSeI+LLfqAvQNY2R8AXR+jNXAFfGLnnifhyAOgLkLXNE/DFCL2ZL+ALI/cCEV8OAn0BsrYFAr7UIvRmkYAvjNyLRXz5BegLkLUtFvDlVEJvlgj4wsi9VMSXtFK4uQSytqUCvtQm9GaZgC+M3MtFfEkH+gJkbcsFfKlD6M0KAV8YuVeK+FIA6AuQtSHnj3zj3f/HB93N4wT2sWAp4D6qgqomsI+FIihnD6SHv48ZEZSzkQKgCkdQzh4SAHVEBOVstACozAjK2SMCoIpEUM7GCoAqGkE5e0wAVLEIytl4AVDFIyhnTwiAKhFBOZsoAKpkBOXsKQFQR0ZQziYLgMqKoJw9IwCqVATlbKoAqNIRlLPnBEAdFUE5my4AqkwE5ewFAVBlIyhnMwVAHR1BOXtJANQxEZSz2QKgykVQzl4RAFU+gnI2VwDUnyIoZ68JgPpzBOVsvgCoChGUs4UCoCpGUM4WCYD6SwTl7E0BUH+NoJwtEQBVKYJy9rYAqMoRlLNlAqCOjaCcvSsA6rgIytkKAVBVIihnqwRAVY2gnK0WAHV8BOXsAwFQJ0RQztYKgKoWQTn7SABU9QjK2XoBUCdGUM4+EQB1UgTlbKMAqBoRlLPPBEDVjKCcbRYAdXIE5ewLAVCnRFDOtgqAchGUs68EQFkE5Wy7AKhaEZSzbwRAnRpBOdspAKp2BOXsOwFQdSIoZ7sFQJ0WQTn7QQDU6RGUs70CoOpGUM5+EgBVL4Jytl8A1BkRlLODAqDOjKCcpRUIfx/rR1DOCgiAahBBOSskAOqsCMpZYQFQZ0dQzjIFQGVHUM6KCoBqGEE5Ky4AqlEp/D7++4G+/9Y5wPtv1ToT+D7RmZwJRM9fY+D8NQXev6xZ4Pe965OVlrYp6/fbzS+P1SL3vWtSCretE4DerQ68N6uTbaxNw/fmA3LufPc62YbvDHq7H5J8KQDmDuRjHwbOunqyjdWE7X4k4PZHhNwfi3QcyMeQmT2PzLRfj4FrknEwGR/k/Pphzq/+8becNSozZX4+yvl7/3e5zzu3VFra4eYy38yB22oKPMcrmNLv1AfapXVpWP65j2bJXGTk/L5wHvuf+yiYx+8zU553EJj10P/vofuSlcd+/o5BNnBnGDCblcJv9zzgSSgr93ml4IxoB6+mhBO080v9bxby5odZyJunLOQt8nje2pzntch5nn+l6e/kBR/Z5X8AF/z/ZM5bHmbOW6bMeavDzHmrlDn/Zx7PW5fzvH/mPM/v179y2DDWl/MJTlxQKuy1wGf+ByF368Bz+zXw4zR87gsDz+3XtgsIvD8J/ILNrxutCbk/FXkR7yLgcQLI2pDz5+esQMocoi96lyXb+CgLtz3/ovI5gHPGK3/z6Pzbd2Hyt2079A9S57dNzr63LfXrBVbhPOY/95Ge8mf+mN/okL/L/TU95d83Svk3eT0n/f/YTrE89iMrjz+jXVzlhm1T6tcd9v/dNkVE9CKXW1D0IvdZ4It7rkjo3J+Hubi7Q/bT2gAvKNoCt7X5vzR/Ln8PA/bbgJ2x/Mzf4Q4K6AtaZP8uBp6o+G0wLhwuJqw1q9PCXmP9saUgIffWwI8t95He/d8mcuFwCdBHIGvbFnhvvC+FCL5sDzz3/SRfdoj40g7oC5C17RDwJYPgy87Acw8n+bJLxJf2QF+ArG2XgC+FCb7sDjz3CJIve0R8uRToC5C17RHw5QiCL3sDz/0AyZd9Ir5cBvQFyNr2CfiSSfBlf+C5HyT5ckDElw5AX4Cs7YCAL0UIvqQ1CDv3SJIv6Q00fOmIfL0al9nSA++N96UowZdCgeceRfIlQ8SXy4G+AFlbhoAvxQi+ZAae+yGSL0VEfLkC6AuQtRUR8KU4wZfiged+mORLCRFfOgF9AbK2EgK+lCD4khV47tEkX0qJ+NIZ6AuQtZUS8KUkwZcygeceQ/KlrIgvVwJ9AbK2sgK+HEnwpVzguR8h+VJexJergL4AWVt5AV+yCL5UCDz3oyRfKor40gXoC5C1VRTwpRTBl0qB5x5L8qWyiC9dgb4AWVtlAV9KE3ypEnjucSRfqor4cjXQFyBrqyrgy1EEX6oFnvsxki/VRXy5BugLkLVVF/ClDMGXGoHnfpzkS00RX7oBfQGytpoCvpQl+OICzz2e5IuJ+NId6AuQtZmAL0cTfKkdeO4JJF/qiPhyLdAXIGurI+DLMQRf6gae+wmSL/VEfLkO6AuQtdUT8KUcwZf6ged+kuRLAxFfegB9AbK2BgK+lCf4kh147okkXxqK+NIT6AuQtTUU8OVPBF8aB557EsmXJiK+XA/0Bcjamgj48meCL00Dz/0UyZdmIr7cgLxrHdCXZgK+VCD40jzw3E+TfGkh4ksvoC9A1tZCwJeKBF9aBp57MsmXViK+9Ab6AmRtrQR8+QvjhimB555C8qW1iC83An0BsrbWAr78leBLm8BzP0Pypa2ILzcBfQGytrYCvlQi+NIu8NzPknxpL+JLH6AvQNbWXsCXygRfOgSeeyrJl44ivvQF+gJkbR0FfDmW4EunwHNPI/nSWcSXm4G+AFlbZwFfjiP40iXw3M+RfOkq4sstQF+ArK2rgC9VCL50Czz38yRfuov40g/oC5C1dRfwpSrBlx6B555O8qWniC/9gb4AWVtPAV+OJ/jSK/DcM0i+9Bbx5VagL0DW1lvAlxMIvvQJPPcLJF/6ivhyG9AXIGvrK+BLNYIv/QLP/SLJl/4ivtwO9AXI2voL+FKd4MvtgeeeSfJlgIgvA4C+AFnbAAFfTiT4MjDw3LNIvgwS8eUOoC9A1jZIwJeTCL4MDjz3SyRfhoj4cifQFyBrGyLgSw2CL0MDz/0yyZdhIr4MBPoCZG3DBHypSfBleOC5Z5N8GSHiyyCgL0DWNkLAl5MJvowMPPccki+jRHy5C+gLkLWNEvDlFIIvowPP/QrJlzEivtwN9AXI2sYI+OIIvowNPPerJF/GifgyGOgLkLWNE/DFCL6MDzz3XJIvE0R8GQL0BcjaJgj4Uovgy8TAc88j+TJJxJd7gL4AWdskAV9OJfgyOfDcr5F8mSLiy71AX4CsbYqAL7UJvkwNPPfrJF+mifgyFOgLkLVNE/ClDsGX6YHnnk/yZYaIL8OAvgBZ2wwBX04j+DIz8NwLSL7MEvHlPqAvQNY2S8CX0wm+zA4890KSL3NEfLkf6AuQtc0R8KUuwZe5ged+g+TLPBFfhgN9AbK2eQK+1CP4Mj/w3ItIviwQ8WUE0Bcga1sg4MsZBF8WBZ57McmXxSK+PAD0BcjaFgv4cibBlyWB536T5MtSEV8eBPoCZG1LBXypT/BlWeC53yL5slzEl5FAX4CsbbmALw0IvqwIPPcSki8rRXwZBfQFyNpWCvhyFsGX1YHnXkryZY2ILw8BfQGytjUCvpxN8GVt4LnfJvmyTsSXh4G+AFnbOgFfsgm+rA889zskXzaI+DIa6AuQtW0Q8KUhwZeNoecm+bJJxJcxQF+ArG2TgC+NCL5sDjz3cpIvW0R8eQToC5C1IecvI9lGuZQ5uyTJ3C4Z7ZNxaTIuS0aHZHRMxuXJuCIZnZLRORlXJuOqZHRJRtdkXJ2Ma5LRLRndk3FtMq5LRo9k9EzG9cnw92j3953299L19wf19zz093Hz96by99vx9xDx90Xw3/Xuv7/afyev/55R/92J/vvg/Hdc+e/t8d9F4r9fwf/MuP85WP+zff7nlfzPYPjPlfvPyvrP//nPNPnPafj3nv37af49Av+6p38tx1+f+nNufx7h10bPm9mnR3F9qvVZfdy2Pq8f9jq0OtnGo4yfb8fxcIVyPDr0gZxXxtwi54C1j+PQ+4jewXOTHbyQUNCtgZ8gnJ9kvoiQe5vICcJjwBMEIGtjzV8B8PytBm7rcSALhis+62MEV7YHvkb4xftxQu4dImvEeGAvgawNOX/kkx/L3d4f8eRnfClOz3+3mLv8PSz16ibf3ygjsJhPICxqT8QrEntCQMonQ78i8S9Zrie8dLcz8LOND0kvWe4SOduYCFw4gaxt1x/wimSSwEFsIuEgtjvwNcIv3pMIufeIrBFPAXsJZG174hWJxMnPU6wrEnTRnwYWHfh+iwHfb6EdGJ4mLJCTgcXx++YP/qnbzH2gr2wnAq9spwicFEwhsH+GwN5vs1LONhkXUJ8QLiT2Bn5y5C+eGhP47xM5OXoW6CeQtQHnj7ZuPEvozVTCujGVvG5sJKwb+wNfNzaSXng5ILJuTAOuG0DWduAP+MLLc4GfY/k14jOCK2lnhX9uwcidfpbGGvE8spe4zJYeeG+8L58TelNIwBdG7gwRX6YDfQGytgwBXzYTepMp4AsjdxERX2YAfQGytiICvmwh9Ka4gC+M3CVEfHkB6AuQtZUQ8OULQm+yBHxh5C4l4suLQF+ArK2UgC9fEnpTRsAXRu6yIr7MBPoCZG1lBXzZSuhNOQFfGLnLi/gyC+gLkLWVF/BlG6E3FQR8YeSuKOLLS0BfgKytooAvXxF6U0nAF0buyiK+vAz0BcjaKgv48jWhN1UEfGHkririy2ygL0DWVlXAl+2E3lQT8IWRu7qIL3OAvgBZW3UBX3YQelNDwBdG7poivrwC9AXI2moK+PINoTdOwBdGbhPx5VWgL0DWZgK+fEvoTW0BXxi564j4MhfoC5C11RHwZSehN3UFfGHkrifiyzygL0DWVk/Al12E3tQX8IWRu4GIL68BfQGytgYCvnxH6E22gC+M3A1FfHkd6AuQtTUU8OV7Qm8aC/jCyN1ExJf5QF+ArK2JgC+7Cb1pKuALI3czEV8WAH0BsrZmAr7sIfSmuYAvjNwtRHxZCPQFyNpaCPjyA6E3LQV8YeRuJeLLG0BfgKytlYAvPxJ6c4GAL4zcrUV8WQT0BcjaWgv4spfQmzYCvjBytxXxZTHQFyBrayvgyz5Cb9oJ+MLI3V7ElzeBvgBZW3sBX34i9KaDgC+M3B1FfHkL6AuQtXUU8OVnQm86CfjCyN1ZxJclQF+ArK2zgC/7Cb3pIuALI3dXEV+WAn0BsrauAr4cIPSmm4AvjNzdRXx5G+gLkLV1F/DlIKE3PQR8YeTuKeLLO0BfgKytp4AvvxB600vAF0bu3iK+LAP6AmRtvQV8SSPcy6SPgC+M3H1FfFkO9AXI2voK+JJO6E0/AV8YufuL+PIu0Bcga+sv4EsBQm9uF/CFkXuAiC/vAX0Bsjbk/JFvvPv/+KC7eZzAPq5A3nhXFVQ1gX1cGUE5eyA9/H1cFUE5GykA6v0IytlDAqBWR1DORguAWhNBOXtEANQHEZSzsQKgPoygnD0mAGptBOVsvACodRGUsycEQH0UQTmbKADq4wjK2VMCoNZHUM4mC4DaEEE5e0YA1CcRlLOpAqA+jaCcPScAamME5Wy6AKhNEZSzFwRAfRZBOZspAOrzCMrZSwKgNkdQzmYLgNoSQTl7RQDUFxGUs7kCoL6MoJy9JgBqawTlbL4AqG0RlLOFAqC+iqCcLRIA9XUE5exNAVDbIyhnSwRA7YignL0tAOqbCMrZMgFQ30ZQzt4VALUzgnK2QgDUrgjK2SoBUN9FUM5WC4D6PoJy9oEAqN0RlLO1AqD2RFDOPhIA9UME5Wy9AKgfIyhnnwiA2htBOdsoAGpfBOXsMwFQP0VQzjYLgPo5gnL2hQCo/RGUs60CoA5EUM6+EgB1MIJK3uYWAPVLBJW8eyoAKq10BGU7BUClR1DJez0CoApEUMlbCAKgCkZQySvTAqAKRVDJC54CoDIiqOR1NAFQhSOo5OUZAVBHRFDJVb8AqMwIKrmYLBD+PhaJoJJrFAFQRSOo5NRXAFSxCCo5oxIAVTyCSg7UAqBKRFDJ+i8AqmQElSwrAqCOLI3fx38/0PffysLtqH1WH7etz+tzJhA9f6WA87e3AfBjcA2w84cWpEnyhu1zhPveDRS5713p0rhtfQj0bmDg90tcn2xjYxq+N3eRc+d3/3xu3xn0du8m+VIAzB3Ix+4OnHX1ZBvrCdu9R8Dtzwi57xXpOJCPITN7Hplpvx4DNyTjYDI+yfn105xf/eOonDUqM2V+Psv5e/93uc8rUzot7XBzmV/mnwO3VRZ4jlcwpd+pD7RLm9Kw/HMfRydzkZHz+8J57H/uo2Aev89Med5BYNZD/7+H7ktWHvv5OwbZwJ1hwDy6NH67xwBPQlm5jykNZ0Q7eJUlnKCVK/2/WcjLH2YhL5+ykP8pj+dtzHnen3Ke519p+jN5wUd2uQJwwf9P5rziYea8Ysqc/+Uwc/6XlDn/ax7P25TzvL/mPM/vV6UcNoz1pRzBicqlw14LfOYKhNzHBp7br4Gfp+FzHxd4br+2VSbwvi/wCza/bhxLyH2/yIt4VYDHCSBrQ86fn7MCKXOIvuhdnWzjadxP75h/UTkLcM545W8enX/7Lkz+tm2H/kHq/FbN2ffjS/96gVU4j/nPfaSn/Jk/5jc65O9yf01P+feNUv5NXs9J/z+2UyyP/cjK489oF1e5YauW/nWH/X8fnyIiepHLLSh6kXsg8MU9VyR07gfDXNzdIftpVYEXFMcDtzXyvzR/Ln8PA/bbgJ2x/Mzf4Q4K6AtaZP9OAJ6o+G0wLhxOIKw169PCXmP9sWUF4dgyOvBjyyWkd//HiFw4VAP6CGRtYwLvjfdlJaE3YwPP3Y7kyzgRX6oDfQGytnECvqwi9GZ84Lnbk3yZIOLLiUBfgKxtgoAv7xN6MzHw3JeSfJkk4stJQF+ArG2SgC+rCb2ZHHjuy0i+TBHxpQbQFyBrmyLgyxpCb6YGnrsDyZdpIr7UBPoCZG3TBHz5gNCb6YHn7kjyZYaILycDfQGythkCvnxI6M3MwHNfTvJllogvpwB9AbK2WQK+rCX0Znbgua8g+TJHxBcH9AXI2uYI+LKO0Ju5gefuRPJlnogvBvQFyNrmCfjyEaE38wPP3ZnkywIRX2oBfQGytgUCvnxM6M2iwHNfSfJlsYgvpwJ9AbK2xQK+rCf0Zkngua8i+bJUxJfaQF+ArG2pgC8bCL1ZFnjuLiRflov4UgfoC5C1LRfw5RNCb1YEnrsryZeVIr6cBvQFyNpWCvjyKaE3qwPPfTXJlzUivpwO9AXI2tYI+LKR0Ju1gee+huTLOhFf6gJ9AbK2dQK+bCL0Zn3gubuRfNkg4ks9oC9A1rZBwJfPCL3ZGHju7iRfNon4cgbQFyBr2yTgy+eE3mwOPPe1JF+2iPhyJtAXIGvbIuDLZkJvtgae+zqSL9tEfKkP9AXI2rYJ+LKF0JvtgefuQfJlh4gvDYC+AFnbDgFfviD0ZmfguXuSfNkl4stZQF+ArG2XgC9fEnqzO/Dc15N82SPiy9lAX4CsbY+AL1sJvdkbeO4bSL7sE/ElG3nXOqAv+wR82Ubozf7Ac/ci+XJAxJeGQF+ArO2AgC9fEXqTdnbYuXuTfEk/W8OXRsjvm8VltvTAe+N9+ZrQm0KB576R5EuGiC/nAH0BsrYMAV+2E3qTGXjum0i+FBHxpTHQFyBrKyLgyw5Cb4oHnrsPyZcSIr40AfoCZG0lBHz5htCbrMBz9yX5UkrEl78BfQGytlICvnxL6E2ZwHPfTPKlrIgv5wJ9AbK2sgK+7CT0plzguW8h+VJexJemQF+ArK28gC+7CL2pEHjufiRfKor40gzoC5C1VRTw5TtCbyoFnrs/yZfKIr6cB/QFyNoqC/jyPaE3VQLPfSvJl6oivpwP9AXI2qoK+LKb0Jtqgee+jeRLdRFfmgN9AbK26gK+7CH0pkbguW8n+VJTxJcWQF+ArK2mgC8/EHrjAs89gOSLifjyd6AvQNZmAr78SOhN7cBz30HypY6IL/8A+gJkbXUEfNlL6E3dwHPfSfKlnogvLYG+AFlbPQFf9hF6Uz/w3ANJvjQQ8aUV0Bcga2sg4MtPhN5kB557EMmXhiK+/BPoC5C1NRTw5WdCbxoHnvsuki9NRHz5F9AXIGtrIuDLfkJvmgae+26SL81EfLkA6AuQtTUT8OUAoTfNA889mORLCxFfWgN9AbK2FgK+HCT0pmXguYeQfGkl4suFQF+ArK2VgC+/EHpzQeC57yH50lrEl4uAvgBZW2sBX9JK43vTJvDc95J8aSviSxugL0DW1lbAl3SCL+0Czz2U5Et7EV/aAn0Bsrb2Ar4UIPjSIfDcw0i+dBTx5WKgL0DW1lHAl4IEXzoFnvs+ki+dRXy5BOgLkLV1FvClEMGXLoHnvp/kS1cRX9oBfQGytq4CvmQQfOkWeO7hJF+6i/jSHugLkLV1F/ClMMGXHoHnHkHypaeIL5cCfQGytp4CvhxB8KVX4LkfIPnSW8SXy4C+AFlbbwFfMgm+9Ak894MkX/qK+NIB6AuQtfUV8KUIwZd+geceSfKlv4gvHYG+AFlbfwFfihJ8uT3w3KNIvgwQ8eVyoC9A1jZAwJdiBF8GBp77IZIvg0R8uQLoC5C1DRLwpTjBl8GB536Y5MsQEV86AX0BsrYhAr6UIPgyNPDco0m+DBPxpTPQFyBrGybgS0mCL8MDzz2G5MsIEV+uBPoCZG0jBHw5kuDLyMBzP0LyZZSIL1cBfQGyNuT8ZSTbKJ8yZ9WSzNWTcWIyTkpGjWTUTMbJyTglGS4ZloxayTg1GbWTUScZpyXj9GTUTUa9ZJyRjDOTUT8ZDZJxVjLO9vOZDH/faX8vXX9/UH/PQ38fN39vKn+/HX8PEX9fBP9d7/77q/138vrvGfXfnei/D85/x5X/3h7/XST++xX8z4z7n4P1P9vnf17J/wyG/1y5/6ys//yf/0yT/5yGf+/Zv5/m3yPwr3v613L89ak/5/bnEX5t9LyZfeqC61OtB3D3yK71YOD3216fbKMLYf3tiuPhCuV4dOgDOa+MuUXOAWsfr0bvI3oHyyQ7eByhoKMDP0Eol2SuQsg9RuQE4RrgCQKQtbHmrwB4/tYDt9UNyILhis96DcGVsYGvEX7x7kbIPU5kjegO7CWQtSHnj3zyY7nb+yOe/HQvzen57xZzl7+HpV7d5FeaawUW82sJi9p18YrErhOQskfoVyT+JcsphJfuxgd+tjGR9JLlBJGzjZ7AhRPI2ib8Aa9Irhc4iPUkHMQmBr5G+MX7ekLuSSJrxA3AXgJZ26R4RSJx8nMD64oEXfRewKID328x4PsttANDL8IC2RtYHL9v/uCfus3cB/rKtifwyvZGgZOCGwnsbyKw99uslLNNxgXUs4QLicmBnxz5i6dSBP5TRE6O+gD9BLI24PzR1o0+hN70JawbfcnrxjTCujE18HVjGumFl2ki68bNwHUDyNqm/QFfeLkl8HMsv0Y8T3BlusC5BSP3DJE1oh+wl0DWNkPg89fTCb2ZKeALI/csEV/6A30BsrZZAr7MIPRmtoAvjNxzRHy5FegLkLXNEfDlBUJv5gr4wsg9T8SX24C+AFnbPAFfXiT0Zr6AL4zcC0R8uR3oC5C1LRDwZSahN4sEfGHkXiziywCgL0DWtljAl1mE3iwR8IWRe6mIL3cAfQGytqUCvrxE6M0yAV8YuZeL+HIn0Bcga1su4MvLhN6sEPCFkXuliC8Dgb4AWdtKAV9mE3qzWsAXRu41Ir4MAvoCZG1rBHyZQ+jNWgFfGLnXifhyF9AXIGtbJ+DLK4TerBfwhZF7g4gvdwN9AbK2DQK+vErozUYBXxi5N4n4MhjoC5C1bRLwZS6hN5sFfGHk3iLiyxCgL0DWtkXAl3mE3mwV8IWRe5uIL/cAfQGytm0CvrxG6M12AV8YuXeI+HIv0Bcga9sh4MvrhN7sFPCFkXuXiC9Dgb4AWdsuAV/mE3qzW8AXRu49Ir4MA/oCZG17BHxZQOjNXgFfGLn3ifhyH9AXIGvbJ+DLQkJv9gv4wsh9QMSX+4G+AFnbAQFf3iD0xm8odF8YudOzNXwZjvxeCVxmQ88fw5dFhN4UEvCFkTsjW8OXEUBfgKwNPX/pBF8WE3qTKeALI3eRbA1fHgD6AmRt6Plj+PImoTfFBXxh5C6RreHLg0BfgKwNPX8MX94i9CZLwBdG7lLZGr6MBPoCZG3o+WP4soTQmzICvjByl83W8GUU0Bcga0PPH8OXpYTelBPwhZG7fLaGLw8BfQGyNvT8MXx5m9CbCgK+MHJXzNbw5WGgL0DWhp4/hi/vEHpTScAXRu7K2Rq+jAb6AmRt6Plj+LKM0JsqAr4wclfN1vBlDNAXIGtDzx/Dl+WE3lQT8IWRu3q2hi+PAH0Bsjb0/DF8eZfQmxoCvjBy18zW8OVRoC9A1oaeP4Yv7xF64wR8YeS2bA1fxgJ9AbI25PyRb7xLu6ntcQL7OA55411VUNUE9vGxCMrZA+nh7+PjEZSzkQKgxkdQzh4SADUhgnI2WgDUExGUs0cEQD0ZQTkbKwBqYgSVnPoKgJoUQSVnVAKgnoqgkgO1AKinI6hk/RcANTmCSpYVAVBTIqikrQKgnomgkkkQAPVsBOVsqgCoqRFU8l6pAKhpEZSz6QKgnougnL0gAOr5CMrZTAFQ0yMoZy8JgJoRQTmbLQDqhQjK2SsCoF6MoJzNFQA1M4Jy9poAqFkRlLP5AqBeiqCcLRQA9XIE5WyRAKjZEZSzNwVAzYmgnC0RAPVKBOXsbQFQr0ZQzpYJgJobQTl7VwDUvAjK2QoBUK9FUM5WCYB6PYJytloA1PwIytkHAqAWRFDO1gqAWhhBOftIANQbEZSz9QKgFkVQzj4RALU4gnK2UQDUmxGUs88EQL0VQTnbLABqSQTl7AsBUEsjKGdbBUC9HUE5+0oA1DsRlLPtAqCWRVDOvhEAtTyCcrZTANS7EZSz7wRAvRdBOdstAGpFBOXsBwFQKyMoZ3sFQK2KoJz9JADq/QjK2X4BUKsjKGcHBUCtiaCcpRUQ+ABOBOWsgACoDyMoZ4UEQK2NoJwVFgC1LoJylikA6qMIyllRAVAfR1DOiguAWl8av4//fqDvv7UBeP+tB87CbevBszgTiJ6/T4DzN/ls3LamnI2dP7QgpZN5u6X077ebXx61szV682lp3LbuBnqHnj/4B+aSbWxNw/fmNHLu/O6fz/0pwZfTszm+FABzB/IxdGY0k+rJNjYTtntGdvhuf0XIfWa2RseBfAyZ2fPITPv1GLglGQeT8UXOr1/m/OofG3PWqMyU+fkq5+/93+U+b1PptLTDzWV+mX8N3NZnwHO8gin9Tn2gXdqWhuWf+/g8mYuMnN8XzmP/cx8F8/h9ZsrzDgKzHvr/PXRfsvLYz98xyAbuDAPm56UJCy7wJJSVe3NpOCPaweszwgnaltL/m4X8i8Ms5F+kLORf5vG8rbnby3mef6VpK3nBR3Z5G3DB/0/m/KvDzPlXKXP+9WHm/OuUOd+ex/O25Txve87z/H7tyGHDWF+2EJz4pnTYa4HPvI2Q+9vAc/s18Os0fO6dgef2a9s3BN5nZYed268b3xJynw3OnftAv4i3C3icALI25Pz5OSuQMofoi971yTZ6AefRv6i8AXDOeOVvHp1/+y5M/rZth/5B6vx+l7Pv35f+9QKrcB7zn/tIT/kzf8xvdMjf5f6anvLvG6X8m7yek/5/bKdYHvuRlcef0S6ucsN+V/rXHfb//X1KgeBv5aX9/wVFL3KNssNe3HNFQuc+B5w795HPxd0dsp/2HfCC4nvgthr/l+bP5e9hwH4bsDOWn/k73EEBfUGL7N9u4AHWb4Nx4bCbsNZsTgt7jfXHlnGE3E2zw85djfTuf7PsII8tv9vPPUAfgawNPX8MXx4j9KZ54Lmrk3xpka3hyw9AX4CsDT1/DF8eJ/SmZeC5TyT50ipbw5cfgb4AWRt6/hi+jCf05oLAc59E8qV1toYve4G+AFkbev4Yvkwg9KZN4LlrkHxpm63hyz6gL0DWhp4/hi9PEHrTLvDcNUm+tM/W8OUnoC9A1oaeP4YvTxJ60yHw3CeTfOmYreHLz0BfgKwNPX8MXyYSetMp8NynkHzpnK3hy36gL0DWhp4/hi+TCL3pEnhuR/Kla7aGLweAvgBZG3r+GL48RehNt8BzG8mX7tkavhwE+gJkbej5Y/jyNKE3PQLPXYvkS89sDV9+AfoCZG3o+WP4MpnQm16B5z6V5EvvbA1f0o7CzSWQtaHnj+HLFEJv+gSeuzbJl77ZGr6kA30Bsjb0/DF8eYbQm36B565D8qV/toYvBYC+AFkbev4YvjxL6M3tgec+jeTLgGwNXwoCfQGyNvT8MXyZSujNwMBzn07yZVC2hi+FgL4AWRt6/hi+TCP0ZnDgueuSfBmSreFLBtAXIGtDzx/Dl+cIvRkaeO56JF+GZWv4UhjoC5C1oeeP4cvzhN4MDzz3GSRfRmRr+HIE0Bcga0PPH8OX6YTejAw895kkX0Zla/iSCfQFyNrQ88fwZQahN6MDz12f5MuYbA1figB9AbI29PwxfHmB0JuxgeduQPJlXLaGL0WBvgBZG3r+GL68SOjN+MBzn0XyZUK2hi/FgL4AWRt6/hi+zCT0ZmLguc8m+TIpW8OX4kBfgKwNPX8MX2YRejM58NzZJF+mZGv4UgLoC5C1oeeP4ctLhN5MDTx3Q5Iv07I1fCkJ9AXI2tDzx/DlZUJvpgeeuxHJlxnZGr4cCfQFyNrQ88fwZTahNzMDz30OyZdZ2Rq+ZAF9AbI29PwxfJlD6M3swHM3JvkyJ1vDl1JAX4CsDT1/DF9eIfRmbuC5m5B8mZet4UtpoC9A1oaeP4YvrxJ6Mz/w3H8j+bIgW8OXo4C+AFkbev4Yvswl9GZR4LnPJfmyOFvDlzJAX4CsDT1/DF/mEXqzJPDcTUm+LM3W8KUs0Bcga0PPH8OX1wi9WRZ47mYkX5Zna/hyNNAXIGtDzx/Dl9cJvVkReO7zSL6szNbw5RigL0DWhp4/hi/zCb1ZHXju80m+rMnW8KUc0Bcga0PPH8OXBYTerA08d3OSL+uyNXwpD/QFyNrQ88fwZSGhN+sDz92C5MuGbA1f/gT0Bcja0PPH8OUNQm82Bp777yRfNmVr+PJnoC9A1oaeP4Yviwi92Rx47n+QfNmSreFLBaAvQNaGnj+GL4sJvdkaeO6WJF+2ZWv4UhHoC5C1oeeP4cubhN5sDzx3K5IvO7I1fPkL0Bcga0PPH8OXtwi92Rl47n+SfNmVreHLX4G+AFkbev4Yviwh9GZ34Ln/RfJlT7aGL5WAvgBZG3r+GL4sJfRmb+C5LyD5si9bw5fKQF+ArA09fwxf3ib0Zn/guVuTfDmQreHLsUBfgKwNPX8MX94h9CatYdi5LyT5kt5Qw5fjgL4AWVt64L3xviwj9KZQ4LkvIvmSIeJLFaAvQNaWIeDLckJvMgPP3YbkSxERX6oCfQGytiICvrxL6E3xwHO3JflSQsSX44G+AFlbCQFf3iP0Jivw3BeTfCkl4ssJQF+ArK2UgC8rCL0pE3juS0i+lBXxpRrQFyBrKyvgy0pCb8oFnrsdyZfyIr5UB/oCZG3lBXxZRehNhcBztyf5UlHElxOBvgBZW0UBX94n9KZS4LkvJflSWcSXk4C+AFlbZQFfVhN6UyXw3JeRfKkq4ksNoC9A1lZVwJc1hN5UCzx3B5Iv1UV8qQn0Bcjaqgv48gGhNzUCz92R5EtNEV9OBvoCZG01BXz5kNAbF3juy0m+mIgvpwB9AbI2E/BlLaE3tQPPfQXJlzoivjigL0DWVkfAl3WE3tQNPHcnki/1RHwxoC9A1lZPwJePCL2pH3juziRfGoj4UgvoC5C1NRDw5WNCb7IDz30lyZeGIr6cCvQFyNoaCviyntCbxoHnvorkSxMRX2oDfQGyNuT8ZSTb+FPKnO1JeP+QjB+TsTcZ+5LxUzJ+Tsb+ZBxIxsFk/JKMtGR+0pNRIBkFk1EoGRnJKJyMI5KRmYwiySiajGLJKJ4Mf492f99pfy9df39Qf89Dfx83f28qf78dfw8Rf18E/13v/vur/Xfy+u8Z9d+d6L8Pzn/Hlf/eHv9dJP77FfzPjPufg/U/2+d/Xsn/DIb/XLn/rKz//J//TJP/nIZ/79m/n+bfI/Cve/rXcvz1qT/n9ucRfm30vJl9qoPrU61G2bhtnZMd9jq0OdmGnzv0OnQajocrlOPRoQ/kvDLmFjkHrH08Hb2P6B3clCyGOwkHyqaBnyBsSTLvIuRuJnKCUBd4ggBkbaz5KwCev83AbdVD/nB/GucgVpdwEGse+BrhF+96hNwtRNaIM4C9BLI25PyRT34sd3t/xJOfM47i9Px3i7nL38NSr27yK82ZAov5mYRFrX68IrH6AlI2CP2KxL9keSPhzLxl4GcbPUkvWbYSOds4C7hwAllbqz/gFcnZAgexswgHsQsCXyP84n02IXdrkTUiG9hLIGtrHa9IJE5+sllXJOiiNwQWvVE2blvA91toB4aGhAWyEbA4ft/8wT91m7kP9JXtWcAr23METgrOIbBvTGDvt1kpZ5uMC6g+hAuJNoGfHPmLp08IuduKnBw1AfoJZG3A+aOtG00I68bfCOvG38jrxs0Ef9oFvm7cTHrhpb3IunEucN0AsjbW/IX8wkvTwM+x/BrRj+BKB4FzC0bujiJrRDNgL4GsrWPgvfG+9Cf0ppOAL4zcnUV8OQ/oC5C1dRbw5VZCb7oI+MLI3VXEl/OBvgBZW1cBX24j9KabgC+M3N1FfGkO9AXI2roL+HI7oTc9BHxh5O4p4ksLoC9A1tZTwJcBhN70EvCFkbu3iC9/B/oCZG29BXy5g9CbPgK+MHL3FfHlH0BfgKytr4AvdxJ600/AF0bu/iK+tAT6AmRt/QV8GUjoze0CvjByDxDxpRXQFyBrGyDgyyBCbwYK+MLIPUjEl38CfQGytkECvtxF6M1gAV8YuYeI+PIvoC9A1jZEwJe7Cb0ZKuALI/cwEV8uAPoCZG3DBHwZTOjNcAFfGLlHiPjSGugLkLWNEPBlCKE3IwV8YeQeJeLLhUBfgKxtlIAv9xB6M1rAF0buMSK+XAT0Bcjaxgj4ci+hN2MFfGHkHifiSxugL0DWNk7Al6GE3owX8IWRe4KIL22BvgBZ2wQBX4YRejNRwBdG7kkivlwM9AXI2iYJ+HIfoTeTBXxh5J4i4sslQF+ArG2KgC/3E3ozVcAXRu5pIr60A/oCZG3TBHwZTujNdAFfGLlniPjSHugLkLXNEPBlBKE3MwV8YeSeJeLLpUBfgKxtloAvDxB6M1vAF0buOSK+XAb0Bcja5gj48iChN3MFfGHknifiSwegL0DWNk/Al5GE3swX8IWRe4GILx2BvgBZ2wIBX0YRerNIwBdG7sUivlwO9AXI2hYL+PIQoTdLBHxh5F4q4ssVQF+ArG2pgC8PE3qzTMAXRu7lIr50AvoCZG3LBXwZTejNCgFfGLlXivjSGegLkLWtFPBlDKE3qwV8YeReI+LLlUBfgKxtjYAvjxB6s1bAF0budSK+XAX0Bcja1gn48iihN+sFfGHk3iDiSxegL0DWtkHAl7GE3mwU8IWRe5OIL12BvgBZG3L+yDfepd3U9jiBfbwaeeNdVVDVBPbxmgjK2QPp4e9jtwjK2UgBUN0jKGcPCYC6NoJyNloA1HURlLNHBED1iKCcjRUA1TOCcvaYAKjrIyhn4wVA3RBBOXtCAFSvCMrZRAFQvSMoZ08JgLoxgnI2WQDUTRGUs2cEQPWJoJxNFQDVN4Jy9pwAqJsjKGfTBUDdEkE5e0EAVL8IytlMAVD9IyhnLwmAujWCcjZbANRtEZSzVwRA3R5BOZsrAGpABOXsNQFQd0RQzuYLgLozgnK2UADUwAjK2SIBUIMiKGdvCoC6K4JytkQA1N0RlLO3BUANjqCcLRMANSSCcvauAKh7IihnKwRA3RtBOVslAGpoBOVstQCoYRGUsw8EQN0XQTlbKwDq/gjK2UcCoIZHUM7WC4AaEUE5+0QA1AMRlLONAqAejKCcfSYAamQE5WyzAKhREZSzLwRAPRRBOdsqAOrhCMrZVwKgRkdQzrYLgBoTQTn7RgDUIxGUs50CoB6NoJx9JwBqbATlbLcAqHERlLMfBEA9FkE52ysA6vEIytlPAqDGR1DO9guAmhBBOTsoAOqJCMpZWoHw9/HJCMpZAQFQEyMoZ4UEQE2KoJwVFgD1VATlLFMA1NMRlLOiAqAmR1DOiguAmnIUfh///UDff+sZ4P23GmXjtnVONmcC0fP3LHD+2jTEbattQ+z8oQX5tHRaWtOjfr/d/PLY3FCjN1OPwm3rdKB3mwPvzfZkGzvT8L35gpw7v/vnc08l+PIlyZcCYO5APvZl4KyrJ9vYTtjuVwJuf0fI/bVIx4F8DJnZ88hM+/UYuCMZB5PxTc6v3+b86h/TctaozJT5+S7n7/3f5T7vuaPS0g43l/ll/j1wW88Dz/EKpvQ79YF2aVcaln/uY3oyFxk5vy+cx/7nPgrm8fvMlOcdBGY99P976L5k5bGfv2OQDdwZBszpR+G3OwN4EsrKPeMoOCPawet5wgnaC0f9bxbyFw+zkL+YspDPzON5O3OeNzPnef6VplnkBR/Z5ZeAC/5/MucvH2bOX06Z89mHmfPZKXM+J4/n7cp53pyc5/n9eiWHDWN9eYHgxKtHhb0W+MwvEXLPDTy3XwO/T8Pnnhd4br+2vUrg/U3gF2x+3ZhLyP2tyIt4rwGPE0DWhpw/P2cFUuYQfdG7OdlGQ+A8+heVnwGcM175m0fn374Lk79t26F/kDq/r+fs+/yjfr3AKpzH/Oc+0lP+zB/zGx3yd7m/pqf8+0Yp/yav56T/H9splsd+ZOXxZ7SLq9ywrx/16w77/56fUiD0IpdbUPQi913gi3uuSOjc34e5uLtD9tNeB15QzAdua/d/af5c/h4G7LcBO2P5mb/DHRTQF7TI/i0AHmD9NhgXDgsIa832tLDXWH9suZqQe2/gx5Y9pHf/94lcOCwE+ghkbfsC74335RpCb/YHnvsHki8HRHx5A+gLkLUdEPClG6E3/uow5Nw/knxJb6ThyyLk+R4us6UH3hvvS3dCbwoFnnsvyZcMEV8WA30BsrYMAV+uJfQmM/Dc+0i+FBHx5U2gL0DWVkTAl+sIvSkeeO6fSL6UEPHlLaAvQNZWQsCXHoTeZAWe+2eSL6VEfFkC9AXI2koJ+NKT0JsygefeT/KlrIgvS4G+AFlbWQFfrif0plzguQ+QfCkv4svbQF+ArK28gC83EHpTIfDcB0m+VBTx5R2gL0DWVlHAl16E3lQKPPcvJF8qi/iyDOgLkLVVFvClN6E3VQLPnXYUx5eqIr4sB/oCZG1VBXy5kdCbaoHnTif5Ul3El3eBvgBZW3UBX24i9KZG4LkLkHypKeLLe0BfgKytpoAvfQi9cYHnLkjyxUR8WQH0BcjaTMCXvoTe1A48dyGSL3VEfFkJ9AXI2uoI+HIzoTd1A8+dQfKlnogvq4C+AFlbPQFfbiH0pn7guQuTfGkg4sv7QF+ArK2BgC/9CL3JDjz3ESRfGor4shroC5C1NRTwpT+hN40Dz51J8qWJiC9rgL4AWVsTAV9uJfSmaeC5i5B8aSbiywfIL6wC+tJMwJfbCL1pHnjuoiRfWoj48iHQFyBrayHgy+2E3rQMPHcxki+tRHxZC/QFyNpaCfgygNCbCwLPXZzkS2sRX9YBfQGyttYCvtxB6E2bwHOXIPnSVsSXj4C+AFlbWwFf7iT0pl3guUuSfGkv4svHQF+ArK29gC8DCb3pEHjuI0m+dBTxZT3QFyBr6yjgyyBCbzoFnjuL5EtnEV82AH0BsrbOAr7cRehNl8BzlyL50lXEl0+AvgBZW1cBX+4m9KZb4LlLk3zpLuLLp0BfgKytu4Avgwm96RF47qNIvvQU8WUj0Bcga+sp4MsQQm96BZ67DMmX3iK+bAL6AmRtvQV8uYfQmz6B5y5L8qWviC+fAX0Bsra+Ar7cS+hNv8BzH03ypb+IL58DfQGytv4Cvgwl9Ob2wHMfQ/JlgIgvm4G+AFnbAAFfhhF6MzDw3OVIvgwS8WUL0Bcgaxsk4Mt9hN4MDjx3eZIvQ0R8+QLoC5C1DRHw5X5Cb4YGnvtPJF+GifjyJdAXIGsbJuDLcEJvhgee+88kX0aI+LIV6AuQtY0Q8GUEoTcjA89dgeTLKBFftgF9AbK2UQK+PEDozejAc1ck+TJGxJevgL4AWdsYAV8eJPRmbOC5/0LyZZyIL18DfQGytnECvowk9GZ84Ln/SvJlgogv24G+AFnbBAFfRhF6MzHw3JVIvkwS8WUH0Bcga5sk4MtDhN5MDjx3ZZIvU0R8+QboC5C1TRHw5WFCb6YGnvtYki/TRHz5FugLkLVNE/BlNKE30wPPfRzJlxkivuwE+gJkbTMEfBlD6M3MwHNXIfkyS8SXXUBfgKxtloAvjxB6Mzvw3FVJvswR8eU7oC9A1jZHwJdHCb2ZG3ju40m+zBPx5XugL0DWNk/Al7GE3swPPPcJJF8WiPiyG+gLkLUtEPBlHKE3iwLPXY3ky2IRX/YAfQGytsUCvjxG6M2SwHNXJ/myVMSXH4C+AFnbUgFfHif0ZlnguU8k+bJcxJcfgb4AWdtyAV/GE3qzIvDcJ5F8WSniy16gL0DWtlLAlwmE3qwOPHcNki9rRHzZB/QFyNrWCPjyBKE3awPPXZPkyzoRX34C+gJkbesEfHmS0Jv1gec+meTLBhFffgb6AmRtGwR8mUjozcbAc59C8mWTiC/7gb4AWdsmAV8mEXqzOfDcjuTLFhFfDgB9AbK2LQK+PEXozdbAcxvJl20ivhwE+gJkbdsEfHma0JvtgeeuRfJlh4gvvwB9AbK2HQK+TCb0ZmfguU8l+bJLxJe0Mri5BLK2XQK+TCH0ZnfguWuTfNkj4ks60Bcga0POX0ayjT+nzNnChPcbyViUjMXJeDMZbyVjSTKWJuPtZLyTjGXJWJ6Md5PxXjJWJGNlMlYl4/1krE7GmmR8kIwPk7E2GeuS4e/R7u877e+l6+8P6u956O/j5u9N5e+34+8h4u+L4L/r3X9/tf9OXv89o/67E/33wfnvuPLf2+O/i8R/v4L/mXH/c7D+Z/v8zyv5n8Hwnyv3n5X1n//zn2nyn9Pw7z3799P8ewT+dU//Wo6/PvXn3P48wq+NnjezTwVwfar1XUPctr5vGPY6tD3Zhp879DpUEMfDFcrx6NAHcl4Zc4ucA9Y+FkLvI3oHn0sWkHmEA+XewE8QXkgyv0bIvU/kBCEDeIIAZG2s+SsAnr/twG0VBrJguOKzZhAOYvsDXyP84l2YkPuAyBpxBLCXQNaGnD/yyY/lbu+PePJzRBlOz3+3mLv8PSz16ia/0mQKLOaZhEWtSLwisSICUhYN/YrEv2R5DuHMPO2csM82ziK9ZJl+TprE2UYx5MKJy2ys+Qv5iqS4wEGsGOEgVijwNcIv3sUJuTNE1ogSwF4CWRty/lSvSBROfkqwrkjQRS8JLDrw/RYDvt9COzCUJCyQRwKL4/fNH/xTt5n7QF/ZFgNe2WYJnBRkEdiXIrD326yUs03GBVQTwoVEZuAnR/7i6VlC7iIiJ0elgX4CWRtw/mjrRmnCunEUYd04irxunEvwp3jg68a5pBdeSoisG2WA6waQtZX4A77wUjbwcyy/RjQjuJIlcG7ByF1KZI04GthLIGsrFXhvvC/nEXpTRsAXRu6yIr4cA/QFyNrKCvhyPqE35QR8YeQuL+JLOaAvQNZWXsCX5oTeVBDwhZG7oogv5YG+AFlbRQFfWhB6U0nAF0buyiK+/AnoC5C1VRbw5e+E3lQR8IWRu6qIL38G+gJkbVUFfPkHoTfVBHxh5K4u4ksFoC9A1lZdwJeWhN7UEPCFkbumiC8Vgb4AWVtNAV9aEXrjBHxh5DYRX/4C9AXI2kzAl38SelNbwBdG7joivvwV6AuQtdUR8OVfhN7UFfCFkbueiC+VgL4AWVs9AV8uIPSmvoAvjNwNRHypDPQFyNoaCPjSmtCbbAFfGLkbivhyLNAXIGtrKODLhYTeNBbwhZG7iYgvxwF9AbK2JgK+XEToTVMBXxi5m4n4UgXoC5C1NRPwpQ2hN80FfGHkbiHiS1WgL0DW1kLAl7aE3rQU8IWRu5WIL8cDfQGytlYCvlxM6M0FAr4wcrcW8eUEoC9A1tZawJdLCL1pI+ALI3dbEV+qAX0Bsra2Ar60I/SmnYAvjNztRXypDvQFyNraC/jSntCbDgK+MHJ3FPHlRKAvQNbWUcCXSwm96STgCyN3ZxFfTgL6AmRtnQV8uYzQmy4CvjBydxXxpQbQFyBr6yrgSwdCb7oJ+MLI3V3El5pAX4CsrbuALx0Jvekh4Asjd08RX04G+gJkbT0FfLmc0JteAr4wcvcW8eUUoC9A1tZbwJcrCL3pI+ALI3dfEV8c0Bcga+sr4EsnQm/6CfjCyN1fxBcD+gJkbf0FfOlM6M3tAr4wcg8Q8aUW0Bcgaxsg4MuVhN4MFPCFkXuQiC+nAn0BsrZBAr5cRejNYAFfGLmHiPhSG+gLkLUNEfClC6E3QwV8YeQeJuJLHaAvQNY2TMCXroTeDBfwhZF7hIgvpwF9AbI25PyRb7xLu6ntcQL7eDryxruqoKoJ7GPdCMrZA+nh72O9CMrZSAFQZ0RQzh4SAHVmBOVstACo+hGUs0cEQDWIoJyNFQB1VgTl7DEBUGdHUM7GC4DKjqCcPSEAqmEE5WyiAKhGEZSzpwRAnRNBOZssAKpxBOXsGQFQTSIoZ1MFQP0tgnL2nACocyMoZ9MFQDWNoJy9IACqWQTlbKYAqPMiKGcvCYA6P4JyNlsAVPMIytkrAqBaRFDO5gqA+nsE5ew1AVD/iKCczRcA1TKCcrZQAFSrCMrZIgFQ/4ygnL0pAOpfEZSzJQKgLoignL0tAKp1BOVsmQCoCyMoZ+8KgLoognK2QgBUmwjK2SoBUG0jKGerBUBdHEE5+0AA1CURlLO1AqDaRVDOPhIA1T6CcrZeANSlEZSzTwRAXRZBOdsoAKpDBOXsMwFQHSMoZ5sFQF0eQTn7QgDUFRGUs60CoDpFUM6+EgDVOYJytl0A1JURlLNvBEBdFUE52ykAqksE5ew7AVBdIyhnuwVAXR1BOftBANQ1EZSzvQKgukVQzn4SANU9gnK2XwDUtRGUs4MCoK6LoJylFQh/H3tEUM4KCIDqGUE5KyQA6voIyllhAVA3RFDOMgVA9YqgnBUVANU7gnJWXADUjWXw+/jvB/r+WzcB77/1XUPctr5vyJlA9Pz1Ac5fJvD+ZUUCv+/d1KPS0sqW+f1288tjpMh97/qWwW3rS6B3IwPvze5kG3vT8L15iJw7v/vnc/cl+PIwyZcCYO5APvZw4KyrJ9vYTdjuIwJu/0TI/ahIx4F8DJnZ88hM+/UYuCcZB5PxQ86vP+b86h8356xRmSnz81PO3/u/y33eLWXS0g43l/ll/jNwW/2A53gFU/qd+kC7tC8Nyz/30T+Zi4yc3xfOY/9zHwXz+H1myvMOArMe+v89dF+y8tjP3zHIBu4MA2b/Mvjt3go8CWXlvrUMnBHt4NWPcIJ2W5n/zUJ++2EW8ttTFvIBeTxvb87zBuQ8z7/SdAd5wUd2+U7ggv+fzPnAw8z5wJQ5H3SYOR+UMud35fG8fTnPuyvneX6/7s5hw1hfbiM4MbhM2GuBz3wnIfeQwHP7NfDnNHzuewLP7de2wQTejwV+webXjSGE3I+LvIh3L/A4AWRtyPnzc1YgZQ7RF73bk22UBM6jf1H5JsA545W/eXT+7bsw+du2HfoHqfM7NGffh5X59QKrcB7zn/tIT/kzf8xvdMjf5f6anvLvG6X8m7yek/5/bKdYHvuRlcef0S6ucsMOLfPrDvv/HpZSIPiPv6X9/wVFL3JPBL6454qEzv1kmIu7O2Q/bSjwgmIYcFsT/0vz5/L3MGC/DdgZy8/8He6ggL6gRfbvPuAB1m+DceFwH2Gt2Z0W9hrrjy2nE3JPDvzYspD07v8UkQuH+4E+AlnblMB7432pS+jN1MBzv0HyZZqIL8OBvgBZ2zQBX+oRejM98NyLSL7MEPFlBNAXIGubIeDLGYTezAw892KSL7NEfHkA6AuQtc0S8OVMQm9mB577TZIvc0R8eRDoC5C1zRHwpT6hN3MDz/0WyZd5Ir6MBPoCZG3zBHxpQOjN/MBzLyH5skDEl1FAX4CsbYGAL2cRerMo8NxLSb4sFvHlIaAvQNa2WMCXswm9WRJ47rdJviwV8eVhoC9A1rZUwJdsQm+WBZ77HZIvy0V8GQ30Bcjalgv40pDQmxWB515G8mWliC9jgL4AWdtKAV8aEXqzOvDcy0m+rBHx5RGgL0DWtkbAl3MIvVkbeO53Sb6sE/HlUaAvQNa2TsCXxoTerA8893skXzaI+DIW6AuQtW0Q8KUJoTcbA8+9guTLJhFfxgF9AbK2TQK+/I3Qm82B515J8mWLiC+PAX0BsrYtAr6cS+jN1sBzryL5sk3El8eBvgBZ2zYBX5oSerM98Nzvk3zZIeLLeKAvQNa2Q8CXZoTe7Aw892qSL7tEfJkA9AXI2nYJ+HIe4+ewA8+9huTLHhFfngD6AmRtewR8OZ/Qm72B5/6A5Ms+EV+eBPoCZG37BHxpTujN/sBzf0jy5YCILxOBvgBZ2wEBX1oQepPWOOzca0m+pDfW8GUS8vuacJktPfDeeF/+TuhNocBzryP5kiHiy1NAX4CsLUPAl38QepMZeO6PSL4UEfHlaaAvQNZWRMCXloTeFA8898ckX0qI+DIZ6AuQtZUQ8KUVoTdZgedeT/KllIgvU4C+AFlbKQFf/knoTZnAc28g+VJWxJdngL4AWVtZAV/+RehNucBzf0LypbyIL88CfQGytvICvlxA6E2FwHN/SvKloogvU4G+AFlbRQFfWhN6Uynw3BtJvlQW8WUa0Bcga6ss4MuFhN5UCTz3JpIvVUV8eQ7oC5C1VRXw5SJCb6oFnvszki/VRXx5HugLkLVVF/ClDaE3NQLP/TnJl5oivkwH+gJkbTUFfGlL6I0LPPdmki8m4ssMoC9A1mYCvlxM6E3twHNvIflSR8SXF4C+AFlbHQFfLiH0pm7gub8g+VJPxJcXgb4AWVs9AV/aEXpTP/DcX5J8aSDiy0ygL0DW1kDAl/aE3mQHnnsryZeGIr7MAvoCZG0NBXy5lNCbxoHn3kbypYmILy8BfQGytiYCvlxG6E3TwHN/RfKlmYgvLwN9AbK2ZgK+dCD0pnngub8m+dJCxJfZQF+ArK2FgC8dCb1pGXpuki+tRHyZA/QFyNpaCfhyOaE3FwSeewfJl9YivrwC9AXI2loL+HIFoTdtAs/9DcmXtiK+vAr0Bcja2gr40onQm3aB5/6W5Et7EV/mAn0Bsrb2Ar50JvSmQ+C5d5J86SjiyzygL0DW1lHAlysJvekUeO5dJF86i/jyGtAXIGvrLODLVYTedAk893ckX7qK+PI60Bcga+sq4EsXQm+6BZ77e5Iv3UV8mQ/0Bcjaugv40pXQmx6B595N8qWniC8LgL4AWVtPAV+uJvSmV+C595B86S3iy0KgL0DW1lvAl2sIvekTeO4fSL70FfHlDaAvQNbWV8CXboTe9As8948kX/qL+LII6AuQtfUX8KU7oTe3B557L8mXASK+LAb6AmRtAwR8uZbQm4GB595H8mWQiC9vAn0BsrZBAr5cR+jN4MBz/0TyZYiIL28BfQGytiECvvQg9GZo4Ll/JvkyTMSXJUBfgKxtmIAvPQm9GR547v0kX0aI+LIU6AuQtY0Q8OV6Qm9GBp77AMmXUSK+vA30BcjaRgn4cgOhN6MDz32Q5MsYEV/eAfoCZG1jBHzpRejN2MBz/0LyZZyIL8uAvgBZ2zgBX3oTejM+8NxpZTi+TBDxZTnQFyBrmyDgy42E3kwMPHc6yZdJIr68C/QFyNqQ85eRbKNCypzdn2QenowRyXggGQ8mY2QyRiXjoWQ8nIzRyRiTjEeS8WgyxiZjXDIeS8bjyRifjAnJeCIZTyZjYjImJeOpZPh7tPv7Tvt76fr7g/p7Hvr7uPl7U/n77fh7iPj7IvjvevffX+2/k9d/z6j/7kT/fXD+O6789/b47yLx36/gf2bc/xys/9k+//NK/mcw/OfK/Wdl/ef//Gea/Oc0/HvP/v00/x6Bf93Tv5bjr0/9Obc/j/Bro+fN7NN7uD7VeuIc3LaePCfsdWh3so33COvQChwPVyjHo0MfyHllzC1yDlj7uBK9j+gdvCXZwXsIBZ0c+AnCbUnmewm5p4icIKwCniAAWRtr/gqA5283cFvvA1kwXPFZVxFcmRr4GuEX7/cJuaeJrBGrgb0Esjbk/JFPfix3e3/Ek5/VZTg9/91i7vL3sNSrm/xKs0ZgMV9DWNQ+iFck9oGAlB+GfkXiX7LMIhR0euBnG8VIL1nOEDnbWAtcOIGsbcYf8IpkncBBbC3BlZmBrxF+8V5HyD1LZI34CNhLIGubFa9IJE5+PirD6Tm86B8Diw58v8WA77fQDgwfExbI9cDi+H3zB//UbeY+0Fe2a4FXthsETgo2ENh/QmDvt1kpZ5uMC6jShHmYHfjJkb946kPIPUfk5OhToJ9A1gacP9q68SmhNxsJ68ZG8rpRhjAPcwNfN8qQXniZJ7JubAKuG0DWNu8P+MLLZ4GfY/k14miCK/MFzi0YuReIrBGfA3sJZG0LAu+N9+UYQm8WCfjCyL1YxJfNQF+ArG2xgC/lCL1ZIuALI/dSEV+2AH0BsralAr6UJ/RmmYAvjNzLRXz5AugLkLUtF/DlT4yfxxDwhZF7pYgvXwJ9AbK2lQK+/JnQm9UCvjByrxHxZSvQFyBrWyPgSwVCb9YK+MLIvU7El21AX4CsbZ2ALxUZn9cQ8IWRe4OIL18BfQGytg0CvvyF8V61gC+M3JtEfPka6AuQtW0S8OWvhN5sFvCFkXuLiC/bgb4AWdsWAV8qEXqzVcAXRu5tIr7sAPoCZG3bBHypTOjNdgFfGLl3iPjyDdAXIGvbIeDLsYTe7BTwhZF7l4gv3wJ9AbK2XQK+HEfozW4BXxi594j4shPoC5C17RHwpQqhN3sFfGHk3ifiyy6gL0DWtk/Al6qE3uwX8IWR+4CIL98BfQGytgMCvhxP6E1ak/B9YeROb6Lhy/fIn8vCZbb0wHvjfTmB0JtCAr4wcmeI+LIb6AuQtWUI+FKN0JtMAV8YuYuI+LIH6AuQtRUR8KU6oTfFBXxh5C4h4ssPQF+ArK2EgC8nEnqTJeALI3cpEV9+BPoCZG2lBHw5idCbMgK+MHKXFfFlL9AXIGsrK+BLDUJvygn4wshdXsSXfUBfgKytvIAvNQm9qSDgCyN3RRFffgL6AmRtFQV8OZnQm0oCvjByVxbx5WegL0DWVlnAl1MIvaki4Asjd1URX/YDfQGytqoCvjhCb6oJ+MLIXV3ElwNAX4CsrbqAL0boTQ0BXxi5a4r4chDoC5C11RTwpRahN07AF0ZuE/Hll/+vvXOBs2r63/9M1+lG6X6jVBRif7pQFEWlKIpCCNGk6H5BCCGEEEVRFJWiKIqiUhRFURRFURRFURRF5b+X75m/Y0xN0zxPv/U4e79ey+TMnnXWs57P+7PX+pzLBvIC9NpMgJeahLipJcALQ3dtEV6SiuPmEui11RbgpRYhbuoI8MLQXVeEl2QgL0Cvra4AL7UJcVNPgBeG7voivOQA8gL02uoL8HIyIW4aCPDC0N1QhJecQF6AXhty/nIlUW+8S7upbSWBMeYqDhyjqlFVBcaYOzIqsEeT/R9jnsiowIYKGJU3MiqwxwWMSomMCmy4gFH5IqMCe1LAqPyRUYGNFDCqQGRUYE8LGFUwMiqw0QJGFYqMCuxZAaMOi4wKbKyAUYdHRgU2XsCowpFRgU0QMKpIZFRgLwgYdURkVGCTBIwqGhkV2EsCRhWLjApsioBRxSOjAntFwKgSkVGBTRMwqmRkVGCvCRhVKjIqsBkCRpWOjArsDQGjykRGBTZLwKiykVGBzREwqlxkVGBzBYwqHxkV2NsCRh0ZGRXYfAGjjoqMCuxdAaMqREYFtlDAqIqRUYG9L2DU0ZFRgS0WMKpSZFRgHwoYVTkyKrClAkZViYwK7GMBo46JjApsuYBRx0ZGBfapgFFVI6MCWylgVLXIqMA+FzDquMiowFYLGHV8ZFRgXwoYdUJkVGBrBYyqHhkV2NcCRp0YGRXYegGjToqMCuxbAaOCyKjANgoYZZFRgX0vYFSNyKjANgsYVTMyKrAfBYyqFRkV2FYBo2pHRgX2s4BRJ0dGBbZdwKhTIqMC+1XAqDqRUYHtFDCqbmRUYL8LGHVqZFRguwWMOi0yKrC9AkbVi4wKLCmH/2OsHxkVWA4Bo06PjAosl4BRZ0RGBZZHwKgGkVGBpQgY1TAyKrD8AkadGRkVWEEBo84qjh/jXwf6/luNgPffevYsXF/PncWZQPT8NQbO34xGuL5mNsLOHxqQfsWSkr4m3Peukch975oUx/X1BJC7Rp7fL3F3rFN03DQh687u+JxuFzPofs8m8ZID7DvQHzvbc6+rhX3sJvR7jgDbOQhsnysS40B/DKnZ+ZGS9Pc1cE/Y9sa1P2M/3XF2LEelxM2P83Rv7Hdp5zUtnpS0v7nM9n1lk3F9NQOu8XLGcRN/oFlKTsb6n3acE85F7ti/82Qw/rQjZwb/Tok7by9Qa/rnTT+WwhmM818eNAAOhmHmOcXx/Z4LXISydJ9bHO4R7eLVjLBAa178/yaRt9hPIm8Rl8jPy+C8pNh558XOc5Wm88kJHxnLLYEJPytz3mo/c94qbs4v2M+cXxA35xdmcF5y7LwLY+e5cbUu/v+7+IcnQfaOv/JLcwITbYr7nQuc5pYE3Rd5rtvlwJyEBfzFnut2ua0Nwe/zPN+wubxxEUH3+SJFvEuA1wmg14acPzdnOeLmEL3p3R728UUxXH+uqNwIsGbs+I8j9Z+vwmSvb0v/QPz8to2N/dLif2+w8mQw/2lHctxj7pp/Zrrfpf1Mjvv7M+P+JqNzkvfRT4EMxlE4g8dom6s0sW2L/z1g9/+XxoEI/2hB0v8CFJ3kLvA8uaeBhNZ9oZ/JPUg3TmsL3FBcCuyr9SGavyB7hwHj24AxY9mZv/1dFNAbWmT8XQZcqLg+GBuHywi5ZneS3znWXVtyEXRf4vm15WHSq/9tRTYOlwN5BHptbT2PG8dLbgIvl3uu+xESL+1EeGkH5AXotbUT4CUPgZerPNc9hMRLexFergDyAvTa2gvwkpfASwfPdT9K4iVVhJcrgbwAvbZUAV5SCLx08lz3YyReOovwchWQF6DX1lmAl3wEXrp4rnsoiZeuIry0B/IC9Nq6CvCSn8BLD891DyPx0lOEl6uBvAC9tp4CvBQg8NLHc92Pk3jpK8LLNUBegF5bXwFeChJ4uclz3U+QeOknwksHIC9Ar62fAC+FCLzc6rnu4SRe+ovwkgrkBei19Rfg5TACL3d4rnsEiZcBIrx0BPIC9NoGCPByOIGXuz3X/SSJl4EivFwL5AXotQ0U4KUwgZf7PNf9FImXQSK8dALyAvTaBgnwUoTAy4Oe6x5J4mWwCC+dgbwAvbbBArwcQeDlEc91jyLxMkSEl+uAvAC9tiECvBQl8DLUc91Pk3gZJsLL9UBegF7bMAFeihF4Ge657mdIvIwQ4aULkBeg1zZCgJfiBF5Geq57NImXUSK8dAXyAvTaRgnwUoLAy2jPdY8h8TJGhJduQF6AXtsYAV5KEngZ67nuZ0m8jBPhpTuQF6DXNk6Al1IEXiZ4rvs5Ei8TRXjpAeQF6LVNFOClNIGXSZ7rHkviZbIILz2BvAC9tskCvJQh8DLFc93jSLxMFeGlF5AXoNc2VYCXsgRepnmuezyJl+kivPQG8gL02qYL8FKOwMsMz3U/T+JlpggvfZB3rQPyMlOAl/IEXmZ5rnsCiZfZIrz0BfIC9NpmC/ByJIGXuZ7rnkjiZZ4ILzcAeQF6bfMEeDmKwMt8z3W/QOJlgQgvNwJ5AXptCwR4qUDgZaHnul8k8bJIhJebgLwAvbZFArxUJPCy2HPdk0i8LBHhpR+QF6DXtkSAl6MJvCz1XPdkEi/LRHi5GcgL0GtbJsBLJQIvyz3X/RKJlxUivNwC5AXota0Q4KUygZeVnut+mcTLKhFebgXyAvTaVgnwUoXAy2rPdU8h8bJGhJf+QF6AXtsaAV6OIfCy1nPdU0m8rBPh5TYgL0CvbZ0AL8cSeFnvue5XSLxsEOHldiAvQK9tgwAvVQm8bPRc96skXjaJ8HIHkBeg17ZJgJdqBF42e657GomXLSK8DADyAvTatgjwchyBl62e655O4mWbCC93AnkBem3bBHg5nsDLds91v0biZYcIL3cBeQF6bTsEeDmBwMtOz3W/TuJllwgvdwN5AXptuwR4qU7gZbfnumeQeNkjwstAIC9Ar22PAC8nEnhJauK37pkkXpKbaPByD5AXoNeW7HncOF5OIvCSy3Pdb5B4yS3Cy71AXoBeW24BXgICLyme636TxEs+EV7uA/IC9NryCfBiBF4Keq57FomXQiK8DALyAvTaCgnwUoPAS2HPdc8m8VJEhJf7gbwAvbYiArzUJPBSzHPdc0i8FBfh5QEgL0CvrbgAL7UIvJTyXPdbJF5Ki/DyIJAXoNdWWoCX2gReynmuey6Jl/IivAwG8gL02soL8HIygZcKnuueR+KloggvDwF5AXptFQV4OYXAS2XPdb9N4qWKCC8PA3kBem1VBHipQ+Clque63yHxUk2El0eAvAC9tmoCvNQl8HKC57rnk3ipLsLLECAvQK+tugAvpxJ4CTzXvYDEi4nw8iiQF6DXZgK8nEbgpZbnut8l8VJbhJfHgLwAvbbaArzUI/BSx3Pd75F4qSvCy1AgL0Cvra4AL/UJvNTzXPdCEi/1RXgZBuQF6LXVF+DldAIvDTzXvYjES0MRXh4H8gL02hoK8HIGgZdGnut+n8RLYxFengDyAvTaGgvw0oDAS1PPdX9A4qWZCC/DgbwAvbZmArw0JPDS3HPdi0m8tBDhZQSQF6DX1kKAlzMJvLT0XPcSEi+tRHh5EsgL0GtrJcDLWQReWnuu+0MSL21EeHkKyAvQa0POX+6wj/Jxc3Z5qLld2K4I25Vhuyps7cN2ddiuCVuHsKWGrWPYrg1bp7B1Dtt1Ybs+bF3C1jVs3cLWPWw9wtYzbL3C1jts7h7t7r7T7l667v6g7p6H7j5u7t5U7n477h4i7r4I7rve3fdXu+/kdd8z6r470X0fnPuOK/e9Pe67SNz3K7jPjLvPwbrP9rnPK7nPYLj3lbv3yrr3/7n3NLn3abjXnt3rae41Alf3dLUctz91a263jnC50fnNjKeRuHiqcQHuO4JqXOj59w3tDvsYSci/o3B+BLliHKU/kPPKmFvkHLDG+DR6jOgBNg0HeDEhQC/xfIHQPNR8CUF3W5EFwjPABQLQa2PNXw7w/O0G9jUa+eVkSZyL2DMEVi73PEe45D2aoLudSI4YA4xLoNeGnD/y4sfS+kvExc+Y4pw4/1cyD7J3WPzuJrvQPCuQzJ8lJLXnoh2JPScA5VjfdySuZLmGULq7yvPVxkpSybK9yGpjHDBxAr229gm4IxkvcBEbR7iIdfA8R7jkPZ6gO1UkRzwPjEug15Ya7UgkFj/Ps3Yk6ECfAAx04OstBny9hXZhmEBIkBOBgePG5i7+8X2mHeid7TjgzvYFgUXBCwTvXyR47/qsEOuTsYH6irCR6OT54shtnhoT/O8ssjiaBOQT6LUB54+WNyYR4mYyIW9MJueNdYS80cXzvLGOVHjpKpI3XgLmDaDX1jUBCy8ve77GcjniGwIrPQTWFgzdPUVyxBRgXAK9tp4C779eT4ibPgK8MHT3FeFlKpAXoNfWV4CXDYS4uUmAF4bufiK8vALkBei19RPg5VtC3NwqwAtDd38RXl4F8gL02voL8PIdIW7uEOCFoXuACC/TgLwAvbYBArxsJMTN3QK8MHQPFOFlOpAXoNc2UICXTYS4uU+AF4buQSK8vAbkBei1DRLg5XtC3DwowAtD92ARXl4H8gL02gYL8PIDIW4eEeCFoXuICC8zgLwAvbYhArxsJsTNUAFeGLqHifAyE8gL0GsbJsDLFkLcDBfghaF7hAgvbwB5AXptIwR4+ZEQNyMFeGHoHiXCy5tAXoBe2ygBXn4ixM1oAV4YuseI8DILyAvQaxsjwMtWQtyMFeCFoXucCC+zgbwAvbZxArxsI8TNBAFeGLonivAyB8gL0GubKMDLz4S4mSTAC0P3ZBFe3gLyAvTaJgvw8gshbqYI8MLQPVWEl7lAXoBe21QBXrYT4maaAC8M3dNFeJkH5AXotU0X4GUHIW5mCPDC0D1ThJe3gbwAvbaZArz8SoibWQK8MHTPFuHlHSAvQK9ttgAvvxHiZq4ALwzd80R4mQ/kBei1zRPgZSchbuYL8MLQvUCElwVAXoBe2wIBXnYR4mahAC8M3YtEeHkXyAvQa1skwMvvhLhZLMALQ/cSEV7eA/IC9NqWCPDyByFulgrwwtC9TISXhUBegF7bMgFedhPiZrkALwzdK0R4WQTkBei1rRDgZQ8hblYK8MLQvUqEl/eBvAC9tlUCvOwlxM1qAV4YuteI8PIBkBeg17ZGgJc/CXGzVoAXhu51IrwsBvIC9NrWCfCSRLg3w3oBXhi6N4jwsgTIC9Br2yDASzIhbjYK8MLQvUmElw+BvAC9tk0CvOQgxM1mAV4YureI8PIRkBeg17ZFgJechLjZKsALQ/c2EV6WAnkBem3I+SPfeJd2U9tKAmNchrzxrqpRVQXG+HFkVGCPJvs/xk8iowIbKmDU8siowB4XMGpFZFRgwwWM+jQyKrAnBYz6LDIqsJECRq2MjArsaQGjVkVGBTZawKjPI6MCe1bAqC8iowIbK2DU6siowMYLGLUmMiqwCQJGfRkZFdgLAkZ9FRkV2CQBo9ZGRgX2koBR6yKjApsiYNTXkVGBvSJg1DeRUYFNEzBqfWRUYK8JGLUhMiqwGQJGfRsZFdgbAkZ9FxkV2CwBozZGRgU2R8CoTZFRgc0VMOr7yKjA3hYw6ofIqMDmCxi1OTIqsHcFjNoSGRXYQgGjfoyMCux9AaN+iowKbLGAUVsjowL7UMCobZFRgS0VMOrnyKjAPhYw6pfIqMCWCxi1PTIqsE8FjNoRGRXYSgGjfo2MCuxzAaN+i4wKbLWAUTsjowL7UsCoXZFRga0VMOr3yKjAvhYw6o/IqMDWCxi1OzIqsG8FjNoTGRXYRgGj9kZGBfa9gFF/RkYFtlnAqKQSkVH2o4BRyZFR4aunAkbliIwKX5QTMCpnZFT4Wo+AUbkio8KXEASMyh0ZFVamBYzKExkVFjwFjMobGRXW0QSMSomMCsszAkbli4wKd/05/B9j/siocDMpYFSByKhwjyJgVMHIqHDpK2BUociocEUlYNRhkVHhhVrAqMMjo8L8L2BU4RL4Mf51oO+/VQQ3ULugMa6vCxtzJhA9f0cA568T8P5lnT2/712T8JX1lwn3vdsuct+7oiVwfZ0N5G6753GTK+wwJRkfN7+SdWd3fE63ixl0v7+ReMkB9h3oj/3mudfVwj5yEWL8dwG28xN0/yES40B/DKnZ+ZGS9Pc1MHf4wN7wZ57Yz7yxn+4oFstRKXHzkz/2e/e7tPOKl0hK2t9cZtfzAsm4vkoA13g547iJP+CvDyRj/U87SoZzkTv27zwZjD/tyJnBv1PiztsL1Jr+edOPpXAG4/yXBw2Ag2GYWbIEvt9SwEUoS3epEnCPaBevEoQFWukS/zeJvMx+EnmZuEReNoPzUmLnlY2d5ypN5cgJHxnL5YEJPytzfuR+5vzIuDk/aj9zflTcnFfI4Lx8sfMqxM5z46oY84aRX0oTmDi6hN+5wGkuT9BdyXPdLgcWICzgK3uu2+W2owl+7/V8w+byRiWC7j9FinhVgNcJoNeGnD83Zzni5hC96d0d9jEB9zErc0XlIoA1Y8d/HKn/fBUme31b+gfi5/eY2NiPLfH3BitPBvOfdiTHPeau+Wem+13az+S4vz8z7m8yOid5H/0UyGAchTN4jLa5ShN7TIm/B+z+/9g4EOFv20z6X4Cik1yOs/1O7mkgoXXnBOtOO7KZ3IN047RjgBuKY4F95TpE8xdk7zBgfBswZiw787e/iwJ6Q4uMv6rAhYrrg7FxqErINbmS/c6x7tqyjHBtSfH82nI56dX/fH5eW/79Ch+QR6DXls/zuHG8fEyIm4Ke625H4qWQCC/HAXkBem2FBHj5hBA3hT3XfQWJlyIivBwP5AXotRUR4GU5IW6Kea77ShIvxUV4OQHIC9BrKy7AywpC3JTyXPdVJF5Ki/BSHcgL0GsrLcDLp4S4Kee57vYkXsqL8HIikBeg11ZegJfPCHFTwXPdV5N4qSjCy0lAXoBeW0UBXlYS4qay57qvIfFSRYSXAMgL0GurIsDLKkLcVPVcdwcSL9VEeDEgL0CvrZoAL58T4uYEz3WnknipLsJLDSAvQK+tugAvXxDiJvBcd0cSLybCS00gL0CvzQR4WU2Im1qe676WxEttEV5qAXkBem21BXhZQ4ibOp7r7kTipa4IL7WBvAC9troCvHxJiJt6nuvuTOKlvggvJwN5AXpt9QV4+YoQNw08130diZeGIrycAuQF6LU1FOBlLSFuGnmu+3oSL41FeKkD5AXotTUW4GUdIW6aeq67C4mXZiK81AXyAvTamgnw8jUhbpp7rrsriZcWIrycCuQF6LW1EODlG0LctPRcdzcSL61EeDkNyAvQa2slwMt6Qty09lx3dxIvbUR4qQfkBei1tRHgZQMhbi7xXHcPEi9tRXipD+QF6LW1FeDlW0LcXO657p4kXtqJ8HI6kBeg19ZOgJfvCHFzlee6e5F4aS/CyxlAXoBeW3sBXjYS4qaD57p7k3hJFeGlAZAXoNeWKsDLJkLcdPJcdx8SL51FeGmIvGsdkJfOArx8T4ibLp7r7kvipasIL2cCeQF6bV0FePmBEDc9PNd9A4mXniK8nAXkBei19RTgZTMhbvp4rvtGEi99RXhpBOQF6LX1FeBlCyFubvJc900kXvqJ8NIYyAvQa+snwMuPhLi51XPd/Ui89BfhpQmQF6DX1l+Al58IcXOH57pvJvEyQISXs4G8AL22AQK8bCXEzd2e676FxMtAEV6aAnkBem0DBXjZRoib+zzXfSuJl0EivDQD8gL02gYJ8PIzIW4e9Fx3fxIvg0V4OQfIC9BrGyzAyy+EuHnEc923kXgZIsLLuUBegF7bEAFethPiZqjnum8n8TJMhJfmQF6AXtswAV52EOJmuOe67yDxMkKElxZAXoBe2wgBXn4lxM1Iz3UPIPEySoSX84C8AL22UQK8/EaIm9Ge676TxMsYEV7OB/IC9NrGCPCykxA3Yz3XfReJl3EivLQE8gL02sYJ8LKLEDcTPNd9N4mXiSK8tALyAvTaJgrw8jshbiZ5rnsgiZfJIrxcAOQF6LVNFuDlD0LcTPFc9z0kXqaK8HIhkBeg1zZVgJfdhLiZ5rnue0m8TBfhpTWQF6DXNl2Alz2EuJnhue77SLzMFOGlDZAXoNc2U4CXvYS4meW57kEkXmaL8HIRkBeg1zZbgJc/CXEz13Pd95N4mSfCy8VAXoBe2zwBXpJK4ONmvue6HyDxskCEl0uAvAC9tgUCvCQTeFnoue4HSbwsEuGlLZAXoNe2SICXHAReFnuuezCJlyUivFwK5AXotS0R4CUngZelnut+iMTLMhFeLgPyAvTalgnwkovAy3LPdT9M4mWFCC+XA3kBem0rBHjJTeBlpee6HyHxskqEl3ZAXoBe2yoBXvIQeFntue4hJF7WiPByBZAXoNe2RoCXvARe1nqu+1ESL+tEeLkSyAvQa1snwEsKgZf1nut+jMTLBhFergLyAvTaNgjwko/Ay0bPdQ8l8bJJhJf2QF6AXtsmAV7yE3jZ7LnuYSRetojwcjWQF6DXtkWAlwIEXrZ6rvtxEi/bRHi5BsgL0GvbJsBLQQIv2z3X/QSJlx0ivHQA8gL02nYI8FKIwMtOz3UPJ/GyS4SXVCAvQK9tlwAvhxF42e257hEkXvaI8NIRyAvQa9sjwMvhBF6Smvqt+0kSL8lNNXi5FsgL0GtL9jxuHC+FCbzk8lz3UyRecovw0gnIC9BrQ85f7rCPI+PmrFqo+biwHR+2E8JWPWwnhu2ksAVhs7DVCFvNsNUKW+2wnRy2U8JWJ2x1w3Zq2E4LW72w1Q/b6WE7w81l2Nw92t19p929dN39Qd09D9193Ny9qdz9dtw9RNx9Edx3vbvvr3bfyeu+Z9R9d6L7Pjj3HVfue3vcd5G471dwnxl3n4N1n+1zn1dyn8Fw7yt375V17/9z72ly79Nwrz2719PcawSu7ulqOW5/6tbcbh3hcqPzmxlPnXHxVCMHbo1RI6fn65VcYYedCfn3OpwfQa4YR+kP5Lwy5hY5B6wxXo8eI3qAxcMBViYEaIrnC4TSoeYqBN35RBYIXYALBKDXxpq/HOD5c4kd1VdX5OYmiXMR60JgpaDnOcIl764E3YVEckQ3YFwCvTbk/JEXP5bWXyIufrqV4MT5v5J5kL3D4nc32YWmu0Ay705Iaj2iHYn1EICyp+87EleyfIFQuivs+WpjHKlkWURktdELmDiBXluRBNyR9Ba4iPUiXMSKeZ4jXPLuTdBdXCRH9AHGJdBrKx7tSCQWP31YOxJ0oPcFBjrw9RYDvt5CuzD0JSTIG4CB48bmLv7xfaYd6J1tL+DO9kaBRcGNBO9vInjv+qwQ65OxgZpE2EiU8nxx5DZPRxD8Ly2yOOoH5BPotQHnj5Y3+hHi5mZC3riZnDdeIuSNcp7njZdIhZfyInnjFmDeAHpt5ROw8HKr52sslyOmEFipILC2YOiuKJIj+gPjEui1VRR4//VUQtxUFuCFobuKCC+3AXkBem1VBHh5hRA3VQV4YeiuJsLL7UBegF5bNQFeXiXEzQkCvDB0Vxfh5Q4gL0CvrboAL9MIcRMI8MLQbSK8DADyAvTaTICX6YS4qSXAC0N3bRFe7gTyAvTaagvw8hohbuoI8MLQXVeEl7uAvAC9troCvLxOiJt6ArwwdNcX4eVuIC9Ar62+AC8zCHHTQIAXhu6GIrwMBPIC9NoaCvAykxA3jQR4YehuLMLLPUBegF5bYwFe3iDETVMBXhi6m4nwci+QF6DX1kyAlzcJcdNcgBeG7hYivNwH5AXotbUQ4GUWIW5aCvDC0N1KhJdBQF6AXlsrAV5mE+KmtQAvDN1tRHi5H8gL0GtrI8DLHELcXCLAC0N3WxFeHgDyAvTa2grw8hYhbi4X4IWhu50ILw8CeQF6be0EeJlLiJurBHhh6G4vwstgIC9Ar629AC/zCHHTQYAXhu5UEV4eAvIC9NpSBXh5mxA3nQR4YejuLMLLw0BegF5bZwFe3iHETRcBXhi6u4rw8giQF6DX1lWAl/mEuOkhwAtDd08RXoYAeQF6bT0FeFlAiJs+ArwwdPcV4eVRIC9Ar62vAC/vEuLmJgFeGLr7ifDyGJAXoNfWT4CX9whxc6sALwzd/UV4GQrkBei19RfgZSEhbu4Q4IWhe4AIL8OAvAC9tgECvCwixM3dArwwdA8U4eVxIC9Ar22gAC/vE+LmPgFeGLoHifDyBJAXoNc2SICXDwhx86AALwzdg0V4GQ7kBei1DRbgZTEhbh4R4IWhe4gILyOAvAC9tiECvCwhxM1QAV4YuoeJ8PIkkBeg1zZMgJcPCXEzXIAXhu4RIrw8BeQF6LWNEODlI0LcjBTghaF7lAgvI4G8AL22UQK8LCXEzWgBXhi6x4jwMgrIC9BrQ84f+ca7tJvaVhIY49PIG++qGlVVYIzPREYF9miy/2McHRkVbu0FjBoTGRXY4wJGPRsZFW7+BYx6LjIqsCcFjBobGRWWBwSMGhcZFe5RBIwaHxkVLn0FjHo+MipcUQkYNSEyKrxQCxg1MTIqzP8CRr0QGRWmFQGjXoyMCqNVwKhJkVHhJAgYNTkyKrCXBIx6KTIqsCkCRr0cGRXYKwJGTYmMCmyagFFTI6MCe03AqFciowKbIWDUq5FRgb0hYNS0yKjAZgkYNT0yKrA5Aka9FhkV2FwBo16PjArsbQGjZkRGBTZfwKiZkVGBvStg1BuRUYEtFDDqzciowN4XMGpWZFRgiwWMmh0ZFdiHAkbNiYwKbKmAUW9FRgX2sYBRcyOjAlsuYNS8yKjAPhUw6u3IqMBWChj1TmRUYJ8LGDU/Miqw1QJGLYiMCuxLAaPejYwKbK2AUe9FRgX2tYBRCyOjAlsvYNSiyKjAvhUw6v3IqMA2Chj1QWRUYN8LGLU4MiqwzQJGLYmMCuxHAaM+jIwKbKuAUR9FRgX2s4BRSyOjAtsuYNSyyKjAfhUw6uPIqMB2Chj1SWRUYL8LGLU8Miqw3QJGrYiMCmyvgFGfRkYFlpTD/zF+FhkVWA4Bo1ZGRgWWS8CoVZFRgeURMOrzyKjAUgSM+iIyKrD8AkatjowKrKCAUWtK4Mf414G+/9aXwPtv5Tgb11fOszkTiJ6/r4DzVwp4/7LSnt/3rmg4b7eW+He/2fVjrMh979aWwPX1WxOcL2M9j5uCYYeFk/FxM56sO7vjc7rXEnh5nsRLDrDvQH/sec+9rhb2UZAQ4y8IsH0EQfeLIjEO9MeQmp0fKUl/XwMLhQ/sDX8eFvt5eOynO9bFclRK3PwcEfu9+13aeV+XSEra31xm1/Oiybi+vgGu8XLGcRN/oFkqkoz1P+1YH85F7ti/82Qw/rQjZwb/Tok7by9Qa/rnTT+WwhmM818eNAAOhmHm+hL4fjcAF6Es3RtKwD2iXby+ISzQvi3xf5PIv9tPIv8uLpFvzOC8wrHzNsbOc5WmTeSEj4zl74EJPytz/sN+5vyHuDnfvJ853xw351syOK9I7LwtsfPcuH6MecPIL98SmPiphN+5wGn+nqB7q+e6XQ4sSljAb/Nct8ttPxH8fsnzDZvLG1sJul8WKeL9DLxOAL025Py5OcsRN4foTW+uMHj6AufRFZW/BKwZO/7jSP3nqzDZ69vSPxA/v7/Exr69xN8brDwZzH/akRz3mLvmn5nud2k/k+P+/sy4v8nonOR99FMgg3EUzuAx2uYqTewvJf4esPv/7XEBBH9LTCxA0UnuFc+TexpIaN2v+pncg3TjtF+AG4rtwL6mHaL5C7J3GDC+DRgzlp35299FAb2hRcbfDuAF1vXB2DjsIOSagsl+51h3bXmaoHuG59eWaqRX/2eKbBx+BfII9Npmeh43jpdnCHEzy3Pdx5F4mS3Cy29AXoBe22wBXkYT4mau57qPJ/EyT4SXnUBegF7bPAFexhDiZr7nuk8g8bJAhJddQF6AXtsCAV6eJcTNQs91VyfxskiEl9+BvAC9tkUCvDxHiJvFnus+kcTLEhFe/gDyAvTalgjwMpYQN0s9130SiZdlIrzsBvIC9NqWCfAyjhA3yz3XHZB4WSHCyx4gL0CvbYUAL+MJcbPSc91G4mWVCC97gbwAvbZVArw8T4ib1Z7rrkHiZY0IL38CeQF6bWsEeJlAiJu1nuuuSeJlnQgvSSVxcwn02tYJ8DKREDfrPdddi8TLBhFekoG8AL22DQK8vECIm42e665N4mWTCC85gLwAvbZNAry8SIibzZ7rPpnEyxYRXnICeQF6bVsEeJnE+CCr57pPIfGyTYSXXEBegF7bNgFeJhPiZrvnuuuQeNkhwktuIC9Ar22HAC8vEeJmp+e665J42SXCSx4gL0CvbZcALy8T4ma357pPJfGyR4SXvEBegF7bHgFephDiJqmZ37pPI/GS3EyDlxQgL0CvLdnzuHG8TCXETS7Pddcj8ZJbhJd8QF6AXltuAV5eIcRNiue665N4ySfCS34gL0CvLZ8AL68yvufDc92nk3gpJMJLASAvQK+tkAAv0whxU9hz3WeQeCkiwktBIC9Ar62IAC/TCXFTzHPdDUi8FBfhpRCQF6DXVlyAl9cIcVPKc90NSbyUFuHlMCAvQK+ttAAvrxPippznus8k8VJehJfDgbwAvbbyArzMIMRNBc91n0XipaIIL4WBvAC9tooCvMwkxE1lz3U3IvFSRYSXIkBegF5bFQFe3iDETVXPdTcm8VJNhJcjgLwAvbZqAry8SYibEzzX3YTES3URXooCeQF6bdUFeJlFiJvAc91nk3gxEV6KAXkBem0mwMtsQtzU8lx3UxIvtUV4KQ7kBei11RbgZQ4hbup4rrsZiZe6IryUAPIC9NrqCvDyFiFu6nmu+xwSL/VFeCkJ5AXotdUX4GUuIW4aeK77XBIvDUV4KQXkBei1NRTgZR4hbhp5rrs5iZfGIryUBvIC9NoaC/DyNiFumnquuwWJl2YivJQB8gL02poJ8PIOIW6ae677PBIvLUR4KQvkBei1tRDgZT4hblp6rvt8Ei+tRHgpB+QF6LW1EuBlASFuWnuuuyWJlzYivJQH8gL02toI8PIuIW4u8Vx3KxIvbUV4ORLIC9BrayvAy3uEuLncc90XkHhpJ8LLUUBegF5bOwFeFhLi5irPdV9I4qW9CC8VgLwAvbb2ArwsIsRNB891tybxkirCS0UgL0CvLVWAl/cJcdPJc91tSLx0FuHlaCAvQK+tswAvHxDipovnui8i8dJVhJdKQF6AXltXAV4WE+Kmh+e6Lybx0lOEl8pAXoBeW08BXpYQ4qaP57ovIfHSV4SXKkBegF5bXwFePiTEzU2e625L4qWfCC/HAHkBem39BHj5iBA3t3qu+1ISL/1FeDkWyAvQa+svwMtSQtzc4bnuy0i8DBDhpSqQF6DXNkCAl2WEuLnbc92Xk3gZKMJLNSAvQK9toAAvHxPi5j7Pdbcj8TJIhJfjgLwAvbZBArx8QoibBz3XfQWJl8EivBwP5AXotQ0W4GU5IW4e8Vz3lSRehojwcgKQF6DXNkSAlxWEuBnque6rSLwME+GlOpAXoNc2TICXTwlxM9xz3e1JvIwQ4eVEIC9Ar22EAC+fEeJmpOe6rybxMkqEl5OAvAC9tlECvKwkxM1oz3VfQ+JljAgvAZAXoNc2RoCXVYS4Geu57g4kXsaJ8GJAXoBe2zgBXj4nxM0Ez3WnkniZKMJLDSAvQK9togAvXxDiZpLnujuSeJkswktNIC9Ar22yAC+rCXEzxXPd15J4mSrCSy0gL0CvbaoAL2sIcTPNc92dSLxMF+GlNpAXoNeGnL/cYR9Hxc3Zr6Hfv4VtZ9h2he33sP0Rtt1h2xO2vWH7M2xJ4dwkhy1H2HKGLVfYcoctT9jyhi0lbPnClj9sBcJWMGyFwubu0e7uO+3upevuD+rueeju4+buTeXut+PuIeLui+C+6919f7X7Tl73PaPuuxPd98G577hy39vjvovEfb+C+8y4+xys+2yf+7yS+wyGe1+5e6+se/+fe0+Te5+Ge+3ZvZ7mXiNwdU9Xy3H7U7fmdusIlxud38x4OhkXTzVeaYrr69WmfuehgmGHbu7QeegUnB9BrhhH6Q/kvDLmFjkHrDHWQY8RPcCvw4S4jXChnOH5AuHbUPPPBN0zRRYIdYELBKDXxpq/HOD5c4kd1depQC8YrDitdQkXsVme5wiXvE8l6J4tkiNOA8Yl0GtDzh958WNp/SXi4ue0kpw4/1cyD7J3WPzuJtt3LhRI5vUISa1+tCOx+gJQnu77jsSVLG8krMzner7a6EUqWc4TWW2cAUycQK9tXgLuSBoIXMTOIFzE5nueI/5K3gTdC0RyRENgXAK9tgXRjkRi8dOQtSNBB/qZwEAHvt5iwNdbaBeGMwkJ8ixg4LixuYt/fJ9pB3pnewZwZ9tIYFHQiOB9Y4L3rs8KsT4ZG6h+hI3EQs8XR27z9BVB9yKRxVETIJ9Arw04f7S80YSQN84m5I2zyXnjFgI/iz3PG7eQCi9LRPJGU2DeAHptSxKw8NLM8zWWyxH9CawsFVhbMHQvE8kR5wDjEui1LRN4//VthLhZLsALQ/cKEV7OBfIC9NpWCPByOyFuVgrwwtC9SoSX5kBegF7bKgFe7iDEzWoBXhi614jw0gLIC9BrWyPAywBC3KwV4IWhe50IL+cBeQF6besEeLmTEDfrBXhh6N4gwsv5QF6AXtsGAV7uIsTNRgFeGLo3ifDSEsgL0GvbJMDL3YS42SzAC0P3FhFeWgF5AXptWwR4GUiIm60CvDB0bxPh5QIgL0CvbZsAL/cQ4ma7AC8M3TtEeLkQyAvQa9shwMu9hLjZKcALQ/cuEV5aA3kBem27BHi5jxA3uwV4YejeI8JLGyAvQK9tjwAvgwhxk3SO/7wwdCefo8HLRcj3NeI0W7LnceN4uZ8QN7kEeGHozi3Cy8VAXoBeW24BXh4gxE2KAC8M3flEeLkEyAvQa8snwMuDhLgpKMALQ3chEV7aAnkBem2FBHgZTIibwgK8MHQXEeHlUiAvQK+tiAAvDxHippgALwzdxUV4uQzIC9BrKy7Ay8OEuCklwAtDd2kRXi4H8gL02koL8PIIIW7KCfDC0F1ehJd2QF6AXlt5AV6GEOKmggAvDN0VRXi5AsgL0GurKMDLo4S4qSzAC0N3FRFergTyAvTaqgjw8hghbqoK8MLQXU2El6uAvAC9tmoCvAwlxM0JArwwdFcX4aU9kBeg11ZdgJdhhLgJBHhh6DYRXq4G8gL02kyAl8cJcVNLgBeG7toivFwD5AXotdUW4OUJQtzUEeCFobuuCC8dgLwAvba6ArwMJ8RNPQFeGLrri/CSCuQF6LXVF+BlBCFuGgjwwtDdUISXjkBegF5bQwFeniTETSMBXhi6G4vwci2QF6DX1liAl6cIcdNUgBeG7mYivHQC8gL02poJ8DKSEDfNBXhh6G4hwktnIC9Ar62FAC+jCHHTUoAXhu5WIrxcB+QF6LUh5498413aTW0rCYzxeuSNd1WNqiowxi6RUYE9muz/GLtGRgU2VMCobpFRgT0uYFT3yKjAhgsY1SMyKrAnBYzqGRkV2EgBo3pFRgX2tIBRvSOjAhstYFSfyKjAnhUwqm9kVGBjBYy6ITIqsPECRt0YGRXYBAGjboqMCuwFAaP6RUYFNknAqJsjowJ7ScCoWyKjApsiYNStkVGBvSJgVP/IqMCmCRh1W2RUYK8JGHV7ZFRgMwSMuiMyKrA3BIwaEBkV2CwBo+6MjApsjoBRd0VGBTZXwKi7I6MCe1vAqIGRUYHNFzDqnsiowN4VMOreyKjAFgoYdV9kVGDvCxg1KDIqsMUCRt0fGRXYhwJGPRAZFdhSAaMejIwK7GMBowZHRgW2XMCohyKjAvtUwKiHI6MCWylg1CORUYF9LmDUkMiowFYLGPVoZFRgXwoY9VhkVGBrBYwaGhkV2NcCRg2LjApsvYBRj0dGBfatgFFPREYFtlHAqOGRUYF9L2DUiMiowDYLGPVkZFRgPwoY9VRkVGBbBYwaGRkV2M8CRo2KjApsu4BRT0dGBfargFHPREYFtlPAqNGRUYH9LmDUmMiowHYLGPVsZFRgewWMei4yKrCkHP6PcWxkVGA5BIwaFxkVWC4Bo8ZHRgWWR8Co5yOjAksRMGpCZFRg+QWMmhgZFVhBAaNeKIkf418H+v5bLwLvv/VKU1xfrzblTCB6/iYB529hM1xfi5ph5w/+VsISSUnNSv673+z60VrkvneTS+L6eh7IXWvP75dYLOywVDI+bi4i687u+JzuyQReLibxkgPsO9Afu9hzr6uFfRQjxPilAmyXIei+TCTGgf4YUrPzIyXp72tg8fCBveHPErGfJWM/3fFSLEelxM1Pmdjv3e/Sznu5ZFLS/uYyu56XTcb1NQW4xssZx038gWapdDLW/7RjajgXuWP/zpPB+NOOnBn8OyXuvL1AremfN/1YCmcwzn950AA4GIaZU0sSvv4ZuAhl6X6lJNwj2sVrCmGB9mrJ/5tEPm0/iXxaXCKfnsF5pWLnTY+d5ypNr5ETPjKWXwcm/KzM+Yz9zPmMuDmfuZ85nxk3529kcF7p2HlvxM5z43oz5g0jv7xKYGJWSb9zgdP8OkH3bM91uxxYlrCAn+O5bpfbZhH8vsLzDZvLG7MJuq8UKeK9BbxOAL025Py5OcsRN4foTW/BMHjOBM6jKyq/CFgzdvzHkfrPV2Gy17elfyB+fufGxj6v5N8brDwZzH/akRz3mLvmn5nud2k/k+P+/sy4v8nonOR99FMgg3EUzuAx2uYqTezckn8P2P3/vLgAgr/cGAtQdJK72vPkngYSWvc1fib3IN04bS5wQzEP2FeHQzR/QfYOA8a3AWPGsjN/+7sooDe0yPh7G3iBdX0wNg5vE3JNsWS/c6y7tlxP0N3J82vLr6RX/zuLbBzeAfII9No6ex43jpcuhLjp4rnu30i8dBXhZT6QF6DX1lWAl66EuOnhue6dJF56ivCyAMgL0GvrKcBLN0Lc9PFc9y4SL31FeHkXyAvQa+srwEt3Qtzc5Lnu30m89BPh5T0gL0CvrZ8ALz0IcXOr57r/IPHSX4SXhUBegF5bfwFeehLi5g7Pde8m8TJAhJdFQF6AXtsAAV56EeLmbs917yHxMlCEl/eBvAC9toECvPQmxM19nuveS+JlkAgvHwB5AXptgwR46UOImwc91/0niZfBIrwsBvIC9NoGC/DSlxA3j3iuO6kkh5chIrwsAfIC9NqGCPByAyFuhnquO5nEyzARXj4E8gL02oYJ8HIjIW6Ge647B4mXESK8fATkBei1jRDg5SZC3Iz0XHdOEi+jRHhZCuQF6LWNEuClHyFuRnuuOxeJlzEivCwD8gL02sYI8HIzIW7Geq47N4mXcSK8fAzkBei1jRPg5RZC3EzwXHceEi8TRXj5BMgL0GubKMDLrYS4meS57rwkXiaL8LIcyAvQa5sswEt/QtxM8Vx3ComXqSK8rADyAvTapgrwchshbqZ5rjsfiZfpIrx8CuQF6LVNF+DldkLczPBcd34SLzNFePkMyAvQa5spwMsdjC+E9Fx3ARIvs0V4WQnkBei1zRbgZQAhbub6rpvEyzwRXlYBeQF6bfMEeLmTEDfzPdddiMTLAhFePgfyAvTaFgjwchchbhZ6rvswEi+LRHj5AsgL0GtbJMDL3YS4Wey57sNJvCwR4WU1kBeg17ZEgJeBhLhZ6rnuwiRelonwsgbIC9BrWybAyz2EuFnuue4iJF5WiPDyJZAXoNe2QoCXewlxs9Jz3UeQeFklwstXQF6AXtsqAV7uI8TNas91FyXxskaEl7VAXoBe2xoBXgYR4mat57qLkXhZJ8LLOiAvQK9tnQAv9xPiZr3nuouTeNkgwsvXQF6AXtsGAV4eIMTNRs91lyDxskmEl2+AvAC9tk0CvDxIiJvNnusuSeJliwgv64G8AL22LQK8DCbEzVbPdZci8bJNhJcNQF6AXts2AV4eIsTNds91lybxskOEl2+BvAC9th0CvDxMiJudnusuQ+Jllwgv3wF5AXptuwR4eYQQN7s9112WxMseEV42AnkBem17BHgZQoibpHP91l2OxEvyuRq8bALyAvTakj2PG8fLo4S4yeW57vIkXnKL8PI9kBeg15ZbgJfHCHGT4rnuI0m85BPh5QcgL0CvLZ8AL0MJcVPQc91HkXgpJMLLZiAvQK+tkAAvwwhxU9hz3RVIvBQR4WULkBeg11ZEgJfHCXFTzHPdFUm8FBfh5UcgL0CvrbgAL08Q4qaU57qPJvFSWoSXn4C8AL220gK8DCfETTnPdVci8VJehJetQF6AXlt5AV5GEOKmgue6K5N4qSjCyzYgL0CvraIAL08S4qay57qrkHipIsLLz0BegF5bFQFeniLETVXPdR9D4qWaCC+/AHkBem3VBHgZSYibEzzXfSyJl+oivGwH8gL02qoL8DKKEDeB57qrkngxEV52AHkBem0mwMvThLip5bnuaiReaovw8iuQF6DXVluAl2cIcVPHc93HkXipK8LLb0BegF5bXQFeRhPipp7nuo8n8VJfhJedQF6AXlt9AV7GEOKmgee6TyDx0lCEl11AXoBeW0MBXp4lxE0jz3VXJ/HSWISX34G8AL22xgK8PEeIm6ae6z6RxEszEV7+APIC9NqaCfAylhA3zT3XfRKJlxYivOwG8gL02loI8DKOEDctPdcdkHhpJcLLHiAvQK+tlQAv4wlx09pz3UbipY0IL3uBvAC9tjYCvDxPiJtLPNddg8RLWxFe/gTyAvTa2grwMoEQN5d7rrsmiZd2IrwklcLNJdBrayfAy0RC3Fzlue5aJF7ai/CSDOQF6LW1F+DlBULcdPBcd20SL6kivOQA8gL02pDzlzvso0LcnL0T+j0/bAvC9m7Y3gvbwrAtCtv7YfsgbIvDtiRsH4bto7AtDduysH0ctk/CtjxsK8L2adg+C9vKsK0K2+dhc/dod/eddvfSdfcHdfc8dPdxc/emcvfbcfcQcfdFcN/17r6/2n0nr/ueUffdie774Nx3XLnv7XHfReK+X8F9Ztx9DtZ9ts99Xsl9BsO9r9y9V9a9/8+9p8m9T8O99uxeT3OvEbi6p6vluP2pW3O7dYTLjc5vZjzlxMVTjatx33Fa4xrf79sWdujmDp2HcuH8CHLFOEp/IOeVMbfIOWCNMTd6jOgBvhwmkTmEC2UnzxcIr4aa3yLo7iyyQMgDXCAAvTbW/OUAz59L7Ki+8gK9YLDitOYhXMS6eJ4jXPLOS9DdVSRHpADjEui1IeePvPixtP4ScfGTUooT5/9K5kH2Dovf3WT7G5cFknk+QlLLH+1ILL8AlAV835G4kmUjwsq8h+erjTNIJcueIquNgsDECfTaeibgjqSQwEWsIOEi1sfzHOGSdyGC7r4iOeIwYFwCvba+0Y5EYvFzGGtHgg70w4GBDny9xYCvt9AuDIcTEmRhYOC4sbmLf3yfaQd6Z1sQuLMtIrAoKELw/giC967PCrE+GRuoJoSNxE2eL47c5mkSQXc/kcVRUSCfQK8NOH+0vFGUkDeKEfJGMXLeaErg51bP80ZTUuGlv0jeKA7MG0CvrX8CFl5KeL7GcjniHAIrdwisLRi6B4jkiJLAuAR6bQME3n99LiFu7hbghaF7oAgvpYC8AL22gQK8NCfEzX0CvDB0DxLhpTSQF6DXNkiAlxaEuHlQgBeG7sEivJQB8gL02gYL8HIeIW4eEeCFoXuICC9lgbwAvbYhArycT4iboQK8MHQPE+GlHJAXoNc2TICXloS4GS7AC0P3CBFeygN5AXptIwR4aUWIm5ECvDB0jxLh5UggL0CvbZQALxcQ4ma0AC8M3WNEeDkKyAvQaxsjwMuFhLgZK8ALQ/c4EV4qAHkBem3jBHhpTYibCQK8MHRPFOGlIpAXoNc2UYCXNoS4mSTAC0P3ZBFejgbyAvTaJgvwchEhbqYI8MLQPVWEl0pAXoBe21QBXi4mxM00AV4YuqeL8FIZyAvQa5suwMslhLiZIcALQ/dMEV6qAHkBem0zBXhpS4ibWQK8MHTPFuHlGCAvQK9ttgAvlxLiZq4ALwzd80R4ORbIC9BrmyfAy2WEuJkvwAtD9wIRXqoCeQF6bQsEeLmcEDcLBXhh6F4kwks1IC9Ar22RAC/tCHGzWIAXhu4lIrwcB+QF6LUtEeDlCkLcLBXghaF7mQgvxwN5AXptywR4uZIQN8sFeGHoXiHCywlAXoBe2woBXq4ixM1KAV4YuleJ8FIdyAvQa1slwEt7QtysFuCFoXuNCC8nAnkBem1rBHi5mhA3awV4YeheJ8LLSUBegF7bOgFeriHEzXoBXhi6N4jwEgB5AXptGwR46UCIm40CvDB0bxLhxYC8AL22TQK8pBLiZrMALwzdW0R4qQHkBei1bRHgpSMhbrYK8MLQvU2El5pAXoBe2zYBXq4lxM12AV4YuneI8FILyAvQa9shwEsnQtzsFOCFoXuXCC+1gbwAvbZdArx0JsTNbgFeGLr3iPByMpAXoNe2R4CX6whxk9Tcf14YupOba/ByCvK+RDjNhpw/8o13aTe1rSQwxjrIG++qGlVVYIx1I6MCezTZ/zGeGhkV2FABo06LjArscQGj6kVGBTZcwKj6kVGBPSlg1OmRUYGNFDDqjMiowJ4WMKpBZFRgowWMahgZFdizAkadGRkV2FgBo86KjApsvIBRjSKjApsgYFTjyKjAXhAwqklkVGCTBIw6OzIqsJcEjGoaGRXYFAGjmkVGBfaKgFHnREYFNk3AqHMjowJ7TcCo5pFRgc0QMKpFZFRgbwgYdV5kVGCzBIw6PzIqsDkCRrWMjApsroBRrSKjAntbwKgLIqMCmy9g1IWRUYG9K2BU68iowBYKGNUmMiqw9wWMuigyKrDFAkZdHBkV2IcCRl0SGRXYUgGj2kZGBfaxgFGXRkYFtlzAqMsiowL7VMCoyyOjAlspYFS7yKjAPhcw6orIqMBWCxh1ZWRUYF8KGHVVZFRgawWMah8ZFdjXAkZdHRkV2HoBo66JjArsWwGjOkRGBbZRwKjUyKjAvhcwqmNkVGCbBYy6NjIqsB8FjOoUGRXYVgGjOkdGBfazgFHXRUYFtl3AqOsjowL7VcCoLpFRge0UMKprZFRgvwsY1S0yKrDdAkZ1j4wKbK+AUT0iowJLyuH/GHtGRgWWQ8CoXpFRgeUSMKp3ZFRgeQSM6hMZFViKgFF9I6MCyy9g1A2RUYEVFDDqxlL4Mf51oO+/dRPw/ltXnwN808k5nAlEz18/4PzdBLzfXz/P7/c3uWRSUolS/+43u37kErnv3c2lcH1dDOQul+f3SywXdlghGR83eci6szs+p/tmAi95SbzkAPsO9Mfyeu51tbCPcoQYzy/A9tEE3QVEYhzojyE1Oz9Skv6+BpYPH9gb/jwy9vOo2E933BLLUSlx83N07Pfud2nn3VoqKWl/c5ldzysl4/rqD1zj5YzjJv5As1QxGet/2nFbOBe5Y//Ok8H4046cGfw7Je68vUCt6Z83/VgKZzDOf3nQADgYhpm3lcL3eztwEcrSfXspuEe0i1d/wgLtjlL/N4l8wH4S+YC4RH5nBudViJ13Z+w8V2m6i5zwkbF8NzDhZ2XOB+5nzgfGzfk9+5nze+Lm/N4MzqsYO+/e2HluXPfFvGHklzsITAwq5XcucJrvJui+33PdLgdWIizgH/Bct8ttgwh+H+b5hs3ljfsJug8XKeI9CLxOAL025Py5OUu7diQl4Te9xcLgORw4j66ofBNgzdjxH0fqP1+FyV7flv6B+PkdHBv7Q6X+3mDlyWD+047kuMfcNf/MdL9L+5kc9/dnxv1NRuck76OfAhmMo3AGj9E2V2liB5f6e8Du/x+KCyB0kksLUHSSO8Lz5J4GElp3UT+Te5BunDYYuKF4CNhXsUM0f0H2DgPGtwFjxrIzf/u7KKA3tMj4exh4gXV9MDYODxNyTblkv3Osu7bUIegu5fm15R3Sq/+lRTYOjwB5BHptpT2PG8dLXUae8Fz3fBIv5UV4GQLkBei1lRfg5VRC3FTwXPcCEi8VRXh5FMgL0GurKMDLaYS4qey57ndJvFQR4eUxIC9Ar62KAC/1CHFT1XPd75F4qSbCy1AgL0CvrZoAL/UJcXOC57oXknipLsLLMCAvQK+tugAvpxPiJvBc9yISLybCy+NAXoBemwnwcgYhbmp5rvt9Ei+1RXh5AsgL0GurLcBLA0Lc1PFc9wckXuqK8DIcyAvQa6srwEtDQtzU81z3YhIv9UV4GQHkBei11Rfg5UxC3DTwXPcSEi8NRXh5EsgL0GtrKMDLWYS4aeS57g9JvDQW4eUpIC9Ar62xAC+NCHHT1HPdH5F4aSbCy0ggL0CvrZkAL40JcdPcc91LSby0EOFlFJAXoNfWQoCXJoS4aem57mUkXlqJ8PI0kBeg19ZKgJezCXHT2nPdH5N4aSPCyzNAXoBeWxsBXpoS4uYSz3V/QuKlrQgvo4G8AL22tgK8NCPEzeWe615O4qWdCC9jgLwAvbZ2ArycQ4ibqzzXvYLES3sRXp4F8gL02toL8HIuIW46eK77UxIvqSK8PAfkBei1pQrw0pwQN5081/0ZiZfOIryMBfIC9No6C/DSghA3XTzXvZLES1cRXsYBeQF6bV0FeDmPEDc9PNe9isRLTxFexgN5AXptPQV4OZ8QN3081/05iZe+Irw8D+QF6LX1FeClJSFubvJc9xckXvqJ8DIByAvQa+snwEsrQtzc6rnu1SRe+ovwMhHIC9Br6y/AywWMm6J4rnsNiZcBIry8AOQF6LUNEODlQkLc3O257i9JvAwU4eVFIC9Ar22gAC+tCXFzn+e6vyLxMkiEl0lAXoBe2yABXtoQ4uZBz3WvJfEyWISXyUBegF7bYAFeLiLEzSOe615H4mWICC8vAXkBem1DBHi5mBA3Qz3X/TWJl2EivLwM5AXotQ0T4OUSQtwM91z3NyReRojwMgXIC9BrGyHAS1tC3Iz0XPd6Ei+jRHiZCuQF6LWNEuDlUkLcjPZc9wYSL2NEeHkFyAvQaxsjwMtlhLgZ67nub0m8jBPh5VUgL0CvbZwAL5cT4maC57q/I/EyUYSXaUBegF7bRAFe2hHiZpLnujeSeJkswst0IC9Ar22yAC9XEOJmiue6N5F4mSrCy2tAXoBe21QBXq4kxM00z3V/T+JluggvrwN5AXpt0wV4uYoQNzM81/0DiZeZIrzMAPIC9NpmCvDSnhA3szzXvZnEy2wRXmYCeQF6bbMFeLmaEDdzPde9hcTLPBFe3gDyAvTa5gnwcg0hbuZ7rvtHEi8LRHh5E8gL0GtbIMBLB0LcLPRc908kXhaJ8DILyAvQa1skwEsqIW4We657K4mXJSK8zAbyAvTalgjw0pEQN0s9172NxMsyEV7mAHkBem3LBHi5lhA3yz3X/TOJlxUivLwF5AXota0Q4KUTIW5Weq77FxIvq0R4mQvkBei1rRLgpTMhblZ7rns7iZc1IrzMA/IC9NrWCPByHSFu1nqueweJl3UivLwN5AXota0T4OV6Qtys91z3ryReNojw8g6QF6DXtkGAly6EuNnoue7fSLxsEuFlPpAXoNe2SYCXroS42ey57p0kXraI8LIAyAvQa9siwEs3Qtxs9Vz3LhIv20R4eRfIC9Br2ybAS3dC3Gz3XPfvJF52iPDyHpAXoNe2Q4CXHoS42em57j9IvOwS4WUhkBeg17ZLgJeehLjZ7bnu3SRe9ojwsgjIC9Br2yPASy9C3CS18Fv3HhIvyS00eHkfyAvQa0v2PG4cL70JcZPLc917SbzkFuHlAyAvQK8ttwAvfQhxk+K57j9JvOQT4WUxkBeg15ZPgJe+hLgp6LnupFIcXgqJ8LIEyAvQayskwMsNhLgp7LnuZBIvRUR4+RDIC9BrKyLAy42EuCnmue4cJF6Ki/DyEZAXoNeGnL/cYR8V4+bskVDzkLA9GrbHwjY0bMPC9njYngjb8LCNCNuTYXsqbCPDNipsT4ftmbCNDtuYsD0btufCNjZs48I2PmzPh83do93dd9rdS9fdH9Td89Ddx83dm8rdb8fdQ8TdF8F917v7/mr3nbzue0bddye674Nz33HlvrfHfReJ+34F95lx9zlY99k+93kl9xkM975y915Z9/4/954m9z4N99qzez3NvUbg6p6uluP2p27N7dYRLjc6v5nxtBQXTzWOwNVIaxT1vN5aLuxwKeNzqzg/glwxjtIfyHllzC1yDlhj/Bg9RvQAbw0H+AAhQEt5vkC4I9T8IEF3aZEFwifABQLQa2PNXw7w/LnEjuprOfLFmSTORewTAivlPM8RLnkvJ+guL5IjVgDjEui1IeePvPixtP4ScfGzohQnzv+VzIPsHRa/u8kuNJ8KJPNPCUnts2hHYp8JQLnS9x2JK1kWIQRoBc9XGwVJJcuKIquNVcDECfTaKibgjuRzgYvYKgIrlT3PES55f07QXUUkR3wBjEug11Yl2pFILH6+YO1I0IG+GhjowNdbDPh6C+3CsJqQINcAA8eNzV384/tMO9A721XAne2XAouCLwnef0Xw3vVZIdYnYwNVlDAPVT1fHLnNUz+C7moii6O1QD6BXhtw/mh5Yy0hbtYR8sY6ct4oTpiHEzzPG8VJhZfqInnja2DeAHpt1ROw8PKN52sslyNKElgJBNYWDN0mkiPWA+MS6LWZwPuvSxHippYALwzdtUV42QDkBei11RbgpTQhbuoI8MLQXVeEl2+BvAC9troCvJQhxE09AV4YuuuL8PIdkBeg11ZfgJeyhLhpIMALQ3dDEV42AnkBem0NBXgpR4ibRgK8MHQ3FuFlE5AXoNfWWICX8oS4aSrAC0N3MxFevgfyAvTamgnwciQhbpoL8MLQ3UKElx+AvAC9thYCvBxFiJuWArwwdLcS4WUzkBeg19ZKgJcKhLhpLcALQ3cbEV62AHkBem1tBHipSIibSwR4YehuK8LLj0BegF5bWwFejibEzeUCvDB0txPh5ScgL0CvrZ0AL5UIcXOVAC8M3e1FeNkK5AXotbUX4KUyIW46CPDC0J0qwss2IC9Ary1VgJcqhLjpJMALQ3dnEV5+BvIC9No6C/ByDCFuugjwwtDdVYSXX4C8AL22rgK8HEuImx4CvDB09xThZTuQF6DX1lOAl6qEuOkjwAtDd18RXnYAeQF6bX0FeKlGiJubBHhh6O4nwsuvQF6AXls/AV6OI8TNrQK8MHT3F+HlNyAvQK+tvwAvxxPi5g4BXhi6B4jwshPIC9BrGyDAywmEuLlbgBeG7oEivOwC8gL02gYK8FKdEDf3CfDC0D1IhJffgbwAvbZBArycSIibBwV4YegeLMLLH0BegF7bYAFeTiLEzSMCvDB0DxHhZTeQF6DXNkSAl4AQN0MFeGHoHibCyx4gL0CvbZgAL0aIm+ECvDB0jxDhZS+QF6DXNkKAlxqEuBkpwAtD9ygRXv4E8gL02kYJ8FKTEDejBXhh6B4jwktSadxcAr22MQK81CLEzVgBXhi6x4nwkgzkBei1jRPgpTYhbiYI8MLQPVGElxxAXoBe20QBXk4mxM0kAV4YuieL8JITyAvQa5sswMsphLiZIsALQ/dUEV5yAXkBem3I+SPfeJd2U9tKAmPMXRo4RlWjqgqMMU9kVGCPJvs/xryRUeFLkwJGpURGBfa4gFH5IqPCFy8FjMofGRXYkwJGFYiMCl/eFDCqYGRUYE8LGFUoMip8AVTAqMMiowJ7VsCowyOjwpdIBYwqHBkV2HgBo4pERoUvogoYdURkVGAvCBhVNDIqfJlVwKhikVGBvSRgVPHIqPCFWAGjSkRGBfaKgFElI6MCmyZgVKnIqMBeEzCqdGRUYDMEjCoTGRXYGwJGlY2MCmyWgFHlIqMCmyNgVPnIqMDmChh1ZGRUYG8LGHVUZFRg8wWMqhAZFdi7AkZVjIwKbKGAUUdHRgX2voBRlSKjAlssYFTlyKjAPhQwqkpkVGBLBYw6JjIqsI8FjDo2Miqw5QJGVY2MCuxTAaOqRUYFtlLAqOMiowL7XMCo4yOjAlstYNQJkVGBfSlgVPXIqMDWChh1YmRUYF8LGHVSZFRg6wWMCiKjAvtWwCiLjApso4BRNSKjAvtewKiakVGBbRYwqlZkVGA/ChhVOzIqsK0CRp0cGRXYzwJGnRIZFdh2AaPqREYF9quAUXUjowLbKWDUqZFRgf0uYNRpkVGB7RYwql5kVGB7BYyqHxkVWFIO/8d4emRUYDkEjDojMiqwXAJGNYiMCiyPgFENI6MCSxEw6szIqMDyCxh1VmRUYAUFjGpUGj/Gvw70/bcaA++/dURzXF9Fm3MmED1/TYDzVxV4/7Jqnt/37uZSSUnfEO57N03kvndnl8b1lRfI3TTP46Zy2GHVZHzcvEbWnd3xOd0uZtD9vk7iJQfYd6A/9rrnXlcL+6hMiPE3BNg+jqD7TZEYB/pjSM3Oj5Skv6+BVcIH9oY/j4n9PDb20x1NYzkqJW5+jov93v0u7bxmpZOS9jeX2fX8+GRcX+cA13g547iJP+CfqUzG+p92nBvORe7Yv/NkMP60I2cG/06JO28vUGv6500/lsIZjPNfHjQADoZh5rml8f02By5CWbqbl4Z7RLt4nUNYoLUo/X+TyM/bTyI/Ly6Rn5/BeVVj550fO89VmlqSEz4yllsBE35W5vyC/cz5BXFzfuF+5vzCuDlvncF51WLntY6d58bVJuYNI7+0IDBxUWm/c4HT3Iqg+2LPdbsceDxhAX+J57pdbruI4PcczzdsLm9cTND9lkgRry3wOgH02pDz5+YsR9wcoje95cLgWV0K158rKjcGrBk7/uNI/eerMNnr29I/ED+/l8bGflnpvzdYeTKY/7QjOe4xd80/M93v0n4mx/39mXF/k9E5yfvop0AG4yicwWO0zVWa2EtL/z1g9/+XxYGITnJpAYpOcm97ntzTQELrfsfP5B6kG6ddCtxQXAbsa/4hmr8ge4cB49uAMWPZmb/9XRTQG1pk/F0OXKi4Phgbh8sJuaZyst851l1bchN0L/T82vII6dX/RSIbh3ZAHoFe2yLP48bxkofAy2LPdQ8h8bJEhJcrgLwAvbYlArzkJfCy1HPdj5J4WSbCy5VAXoBe2zIBXlIIvCz3XPdjJF5WiPByFZAXoNe2QoCXfAReVnqueyiJl1UivLQH8gL02lYJ8JKfwMtqz3UPI/GyRoSXq4G8AL22NQK8FCDwstZz3Y+TeFknwss1QF6AXts6AV4KEnhZ77nuJ0i8bBDhpQOQF6DXtkGAl0IEXjZ6rns4iZdNIrykAnkBem2bBHg5jMDLZs91jyDxskWEl45AXoBe2xYBXg4n8LLVc91PknjZJsLLtUBegF7bNgFeChN42e657qdIvOwQ4aUTkBeg17ZDgJciBF52eq57JImXXSK8dAbyAvTadgnwcgSBl92e6x5F4mWPCC/XAXkBem17BHgpSuAl6Ty/dT9N4iX5PA1erkd+XgCn2ZI9jxvHSzECL7k81/0MiZfcIrx0AfIC9NpyC/BSnMBLiue6R5N4ySfCS1cgL0CvLZ8ALyUIvBT0XPcYEi+FRHjpBuQF6LUVEuClJIGXwp7rfpbESxERXroDeQF6bUUEeClF4KWY57qfI/FSXISXHkBegF5bcQFeShN4KeW57rEkXkqL8NITyAvQaystwEsZAi/lPNc9jsRLeRFeegF5AXpt5QV4KUvgpYLnuseTeKkowktvIC9Ar62iAC/lGN8j5bnu50m8VBHhpQ+QF6DXVkWAl/IEXqp6rnsCiZdqIrz0Rd61DshLNQFejiTwcoLnuieSeKkuwssNQF6AXlt1AV6OIvASeK77BRIvJsLLjUBegF6bCfBSgcBLLc91v0jipbYILzcBeQF6bbUFeKlI4KWO57onkXipK8JLPyAvQK+trgAvRxN4qee57skkXuqL8HIzkBeg11ZfgJdKBF4aeK77JRIvDUV4uQXIC9BrayjAS2UCL4081/0yiZfGIrzcCuQF6LU1FuClCoGXpp7rnkLipZkIL/2BvAC9tmYCvBxD4KW557qnknhpIcLLbUBegF5bCwFejiXw0tJz3a+QeGklwsvtQF6AXlsrAV6qEnhp7bnuV0m8tBHh5Q4gL0CvrY0AL9UIvFziue5pJF7aivAyAMgL0GtrK8DLcQReLvdc93QSL+1EeLkTyAvQa2snwMvxBF6u8lz3ayRe2ovwcheQF6DX1l6AlxMIvHTwXPfrJF5SRXi5G8gL0GtLFeClOoGXTp7rnkHipbMILwOBvAC9ts4CvJxI4KWL57pnknjpKsLLPUBegF5bVwFeTiLw0sNz3W+QeOkpwsu9QF6AXltPAV4CAi99PNf9JomXviK83AfkBei19RXgxQi83OS57lkkXvqJ8DIIyAvQa+snwEsNAi+3eq57NomX/iK83A/kBei19RfgpSaBlzs81z2HxMsAEV4eAPIC9NoGCPBSi8DL3Z7rfovEy0ARXh4E8gL02gYK8FKbwMt9nuueS+JlkAgvg4G8AL22QQK8nEzg5UHPdc8j8TJYhJeHgLwAvbbBArycQuDlEc91v03iZYgILw8DeQF6bUMEeKlD4GWo57rfIfEyTISXR4C8AL22YQK81CXwMtxz3fNJvIwQ4WUIkBeg1zZCgJdTCbyM9Fz3AhIvo0R4eRTIC9BrGyXAy2kEXkZ7rvtdEi9jRHh5DMgL0GsbI8BLPQIvYz3X/R6Jl3EivAwF8gL02sYJ8FKfwMsEz3UvJPEyUYSXYUBegF7bRAFeTifwMslz3YtIvEwW4eVxIC9Ar22yAC9nEHiZ4rnu90m8TBXh5QkgL0CvbaoALw0IvEzzXPcHJF6mi/AyHMgL0GubLsBLQwIvMzzXvZjEy0wRXkYAeQF6bTMFeDmTwMssz3UvIfEyW4SXJ4G8AL222QK8nEXgZa7nuj8k8TJPhJengLwAvbZ5Arw0IvAy33PdH5F4WSDCy0ggL0CvDTl/ucM+jo6bs3ah5ivCdmXYrgpb+7BdHbZrwtYhbKlh6xi2a8PWKWydw3Zd2K4PW5ewdQ1bt7B1D1uPsPUMW6+w9Q5bn7C5e7S7+067e+m6+4O6ex66+7i5e1O5++24e4i4+yK473p331/tvpPXfc+o++5E931w7juu3Pf2uO8icd+v4D4z7j4H6z7b5z6v5D6D4d5X7t4r697/597T5N6n4V57dq+nudcIXN3T1XLc/tStud06wuVG5zcznkbh4qnG2y1wfb3Twu88VDnscBQh/z6N8yPIFeMo/YGcV8bcIueANcZn0GNED7BZOMBLCAG60PMFQotQc1uC7kUiC4TRwAUC0GtjzV8O8Py5xI7qawzQCwYrTutoAiuLPc8RLnmPIeheIpIjngXGJdBrQ84fefFjaf0l4uLn2dKcOP9XMg+yd1j87ia70DwnkMyfY7wjN9qR2FgBKMf5viNxJcsvCaW7pZ6vNlaRSpbLRFYb44GJE+i1LUvAHcnzAhex8YSL2HLPc4RL3s8TdK8QyRETgHEJ9NpWRDsSicXPBNaOBB3oE4GBDny9xYCvt9AuDBMJCfIFYOC4sbmLf3yfaQd6ZzseuLN9UWBR8CLjs0AE712fFWJ9MjZQawkbiZWeL47c5qkJwf9VIoujyUA+gV4bcP5oeWMyIW5eIuSNl8h542tC3ljted74mlR4WSOSN14G5g2g17YmAQsvUzxfY7kcsZ7AylqBtQVD9zqRHDEVGJdAr22dwPuvNxDiZr0ALwzdG0R4eQXIC9Br2yDAy7eEuNkowAtD9yYRXl4F8gL02jYJ8PIdIW42C/DC0L1FhJdpQF6AXtsWAV42EuJmqwAvDN3bRHiZDuQF6LVtE+BlEyFutgvwwtC9Q4SX14C8AL22HQK8fE+Im50CvDB07xLh5XUgL0CvbZcALz8Q4ma3AC8M3XtEeJkB5AXote0R4GUzIW6SzvefF4bu5PM1eJmJfF0Qp9mSPY8bx8sWQtzkEuCFoTu3CC9vAHkBem25BXj5kRA3KQK8MHTnE+HlTSAvQK8tnwAvPxHipqAALwzdhUR4mQXkBei1FRLgZSshbgoL8MLQXUSEl9lAXoBeWxEBXrYR4qaYAC8M3cVFeJkD5AXotRUX4OVnQtyUEuCFobu0CC9vAXkBem2lBXj5hRA35QR4YeguL8LLXCAvQK+tvAAv2wlxU0GAF4buiiK8zAPyAvTaKgrwsoMQN5UFeGHoriLCy9tAXoBeWxUBXn4lxE1VAV4YuquJ8PIOkBeg11ZNgJffCHFzggAvDN3VRXiZD+QF6LVVF+BlJyFuAgFeGLpNhJcFQF6AXpsJ8LKLEDe1BHhh6K4twsu7QF6AXlttAV5+J8RNHQFeGLrrivDyHpAXoNdWV4CXPwhxU0+AF4bu+iK8LATyAvTa6gvwspsQNw0EeGHobijCyyIgL0CvraEAL3sIcdNIgBeG7sYivLwP5AXotTUW4GUvIW6aCvDC0N1MhJcPgLwAvbZmArz8SYib5gK8MHS3EOFlMZAXoNfWQoCXJMJ3zbcU4IWhu5UIL0uAvAC9tlYCvCQT4qa1AC8M3W1EePkQyAvQa2sjwEsOQtxcIsALQ3dbEV4+AvIC9NraCvCSkxA3lwvwwtDdToSXpUBegF5bOwFechHi5ioBXhi624vwsgzIC9BrQ84f+ca7tJvaVhIY48fIG++qGlVVYIyfREYF9miy/2NcHhkV2FABo1ZERgX2uIBRn0ZGBTZcwKjPIqMCe1LAqJWRUYGNFDBqVWRUYE8LGPV5ZFRgowWM+iIyKrBnBYxaHRkV2FgBo9ZERgU2XsCoLyOjApsgYNRXkVGBvSBg1NrIqMAmCRi1LjIqsJcEjPo6MiqwKQJGfRMZFdgrAkatj4wKbJqAURsiowJ7TcCobyOjApshYNR3kVGBvSFg1MbIqMBmCRi1KTIqsDkCRn0fGRXYXAGjfoiMCuxtAaM2R0YFNl/AqC2RUYG9K2DUj5FRgS0UMOqnyKjA3hcwamtkVGCLBYzaFhkV2IcCRv0cGRXYUgGjfomMCuxjAaO2R0YFtlzAqB2RUYF9KmDUr5FRga0UMOq3yKjAPhcwamdkVGCrBYzaFRkV2JcCRv0eGRXYWgGj/oiMCuxrAaN2R0YFtl7AqD2RUYF9K2DU3siowDYKGPVnZFRg3wsYlVQmMso2CxiVHBkV2I8CRuWIjApf5hYwKmdkVPjqqYBRuSKjwhflBIzKHRkVvtYjYFSeyKjwJQQBo/JGRoWVaQGjUiKjwoKngFH5IqPCOpqAUfkjo8LyTA7/x1ggMirc9QsYVTAyKtxMChhVKDIq3KMIGHVYZFS49BUw6vDIqHBFJWBU4cio8EItYFSRMvgx/nWg7791BG6g9nYLXF/vtOBMIHr+igLnb+V5uL5W4foK3JzliJvDHOA5rBzSN7k0rr8pYV/OlyQM1Jb2MymDA9R3ED+/xWJjLx7+zBN7LE8G8592JMc9lj6pJ8f9TI77+6Pj/iajc5L30U+BDMZROIPHkpPSHQ1iP4PsHZYm1k1OhXRPlvYcqIBE99uBfDNKFDjoflP9vhlljdg4rVgZnObiwL46HqL5C7J3GDC+DRgzBpi/DC8CaE6KlcHmyZQ4j6uHbW/YToz9PCn20x0lYsy789MSeI3Y793v0s4rGXfegfRbaj/9lorrt3QG5wWx80rHznMXtjJZfP6y+3n+snHPX24/z18u7vnLZ3Cexc4rHzvPjevI2AUcvas4MewwSMbH3VFluNelIHvHX7prE3RX8Fy3i/ejCNfj6zy/KbbjpwJB9/UiN8WuCLwOAL226z2PG7dun0hYt3fzXLdbtx9B4KW7CC9HA3kBem3I+cuZlMGmmhBLwLkM4sdbKew3d+zfeTIYf/rYiP93Stx5e4Fa0z9v+rEUzmCctMJGfOeoPp2ZlcoQEi1wc8vSXRlXAfz/B2OsNZP+3ljF95vdee3lebHJXaw/Jlyse3t+sXabmYoEv/t47ne70OspBL/7ihTHgDxafIxnd/5uEJk/YHxbX+D83SiySK4CXCQDY8ZuFFwkVyEtko+JFsmZD4Zh5jGERfKxni+Sne5jSYvktAP+VgHgnFYtw4MEqbmaQHUjuxoPVeKuRkrcx0WJO/PBMMw8jpC4j/c8cTvdxx+i6gZil7+csOu7zfPd7pWk3e7tCbjbvQ14obkjAXe7twPnb4DIbvcE4KIJGDM2QHC3ewJp0VQ9WjRlPhiGmdUJi6YTPV80Od0nirwk5HblVQkvEZzk+fudKscWtuiLAbJqgNwcBGW4uSK743O8nFQGv7g5Eaj7JKAfRuYDEcfHE/yoDPQDyUeNMhqLzZr/4Qpdasf/HYdqsVmTtNisFS02Mx8Mw8xahMVmbc8Xm053baEK3aeEStU9nlfo2pMqdPcmYIXuHmCF6b4ErNDdC5y/QSIVupOBiyZgzNggwQrdyaRF0ynRoinzwTDMPIWwaKrj+aLJ6a4jUqFzVYcahArdQ56/edlVrIyg+2GRi1Zd4EUL6LU97Hnc1IhtiNB+1ADmNOSm8lTPK7suz9YlVBLrAHXXBfpxmueV3X3xEWTvMGAFFVp0qSdS2a3/36/sph6qTUp90ibl9GiTkvlgGGaeTtiknOH5JsXpPkOosruSUOF81PPK7jWkyu5jCVjZfRRYmRyagJXdx4DzN0xkk9wAuGgCxowNE6zsNiAtmhpGi6bMB8MwsyFh0XSm54smp/tMkcquqzrUI1Q4n/S8QucqVqcRdD8lctE6C3jRAnptT3keN/ViGyK0H/WAOQ25qWzkeWXX5dmzCJXEM4G6zwL60djzyu6++AiydxiwggotujQRqeye/d+v7HY4VJuUs0mblKbRJiXzwTDMbErYpDTzfJPidDcTqux+TqhwPu15ZTeVVNl9JgEru08DK5OjE7Cy+wxw/saIbJLPAS6agDFjYwQru+eQFk3nRoumzAfDMPNcwqKpueeLJqe7uUhl11UdmhAqnOM9r9C5ilVjgu7nRS5aLYAXLaDX9rzncdMktiFC+9EEmNOQm8rzPK/sujzbglBJbA7U3QLox/meV3b3xUeQvcOAFVRo0aWlSGW31X+/snvNodqktCJtUi6INimZD4Zh5gWETcqFnm9SnO4LhSq7qwkVzhc8r+xeS6rsvpiAld0XgJXJSQlY2X0ROH+TRTbJrYGLJmDM2GTBym5r0qKpTbRoynwwDDPbEBZNF3m+aHK6LxKp7LqqQ0tChfMVzyt0rmJ1PkH3qyIXrYuBFy2g1/aq53HTMrYhQvvREpjTkJvKSzyv7Lo8ezGhkngRUPfFQD/ael7Z3RcfQfYOA1ZQoUWXS0Uqu5f99yu7Vx+qTcplpE3K5dEmJfPBMMy8nLBJaef5JsXpbidU2f2SUOF8zfPKbmdSZff1BKzsvgasTM5IwMru68D5mymySb4CuGgCxozNFKzsXkFaNF0ZLZoyHwzDzCsJi6arPF80Od1XiVR2XdXhUkKFc47nFTpXsWpL0P2WyEWrPfCiBfTa3vI8bi6NbYjQflwKzGnITeXVnld2XZ5tT6gkXgXU3R7oxzWeV3b3xUeQvcOAFVRo0aWDSGU39b9f2W1/qDYpqaRNSsdok5L5YBhmdiRsUq71fJPidF8rVNldS6hwvu15Zfd6UmX3nQSs7L4NrEzOT8DK7jvA+VsgsknuBFw0AWPGFghWdjuRFk2do0VT5oNhmNmZsGi6zvNFk9N9nUhl11UdOhAqnO97XqFzFatrCLo/ELloXQ+8aAG9tg88j5sOsQ0R2o8OwJyG3FR28byy6/Ls9YRK4nVA3dcD/ejqeWV3X3wE2TsMWEGFFl26iVR2u//3K7t1D9UmpTtpk9Ij2qRkPhiGmT0Im5Senm9SnO6eQpXdrwkVzg89r+x2JVV2P0rAyu6HwMrk0gSs7H4EnL9lIpvkXsBFEzBmbJlgZbcXadHUO1o0ZT4Yhpm9CYumPp4vmpzuPiKVXVd16EaocH7qeYXOVay6EnR/JnLR6gu8aAG9ts88j5tusQ0R2o9uwJyG3FTe4Hll1+XZvoRKYh+g7r5AP270vLK7Lz6C7B0GrKBCiy43iVR2+/33K7t1DtUmpR9pk3JztEnJfDAMM28mbFJu8XyT4nTfIlTZXU+ocH7ueWW3O6my+0UCVnY/B1YmVydgZfcL4PytEdkk3wpcNAFjxtYIVnZvJS2a+keLpswHwzCzP2HRdJvniyan+zaRyq6rOtxEqHB+7XmFzlWsbiTo/kbkonU78KIF9Nq+8TxuboptiNB+3ATMachN5R2eV3Zdnr2dUEm8Daj7dqAfAzyv7O6LjyB7hwErqNCiy50ild27/vuV3VMO1SblLtIm5e5ok5L5YBhm3k3YpAz0fJPidA8Uqux+S6hwfut5ZbcnqbL7XQJWdr8FViY3JmBl9zvg/G0S2STfA1w0AWPGNglWdu8hLZrujRZNmQ+GYea9hEXTfZ4vmpzu+0Qqu67qcCehwvmj5xU6V7EaQND9k8hFaxDwogX02n7yPG7ujG2I0H7cCcxpyE3l/Z5Xdl2eHUSoJN4H1D0I6McDnld298VHkL3DgBVUaNHlQZHK7uD/fmX35EO1SRlM2qQ8FG1SMh8Mw8yHCJuUhz3fpDjdDwtVdjcSKpw/e17Z7U2q7P6SgJXdn4GVye0JWNn9BTh/O0Q2yY8AF03AmLEdgpXdR0iLpiHRoinzwTDMHEJYND3q+aLJ6X5UpLLrqg4PEiqcv3teoXMVqwcIuv8QuWg9BrxoAb22PzyPmwdjGyK0Hw8CcxpyUznU88quy7OPESqJjwJ1Pwb0Y5jnld198RFk7zBgBRVadHlcpLL7xH+/slv7UG1SniBtUoZHm5TMB8MwczhhkzLC802K0z1CqLL7PaHCudfzym5fUmX3zwSs7O4FViaTWiZeZfdP4Pwlt9RYND2J3PzgNBty/g7VoulJ0qLpqWjRlPlgGGY+RVg0jfR80eR0jxSp7Lqqw+OECmeeln7rdhWrYQTdeUUuWqOAFy2g15bX87h5PLYhQvvxODCnITeVT3te2XV5dhShkjgSqHsU0I9nPK/s7ouPIHuHASuo0KLLaJHK7pj/fmW31qHapIwhbVKejTYpmQ+GYeazhE3Kc55vUpzu54Qqu5sJFc78Lf3WfSOpsltApDKJrOzGe53d+SuYgJXdAsD5KySySR4LXDQBY8YKCVZ2x5IWTeOiRVPmg2GYOY6waBrv+aLJ6R4vUtl1VYfRhArnEZ5X6FzF6hmC7qIiF63ngRctoNdW1PO4GR3bEKH9GA3MachN5QTPK7suzz5PqCSOB+p+HujHRM8ru/viI8jeYcAKKrTo8oJIZffF/35lt+ah2qS8SNqkTIo2KZkPhmHmJMImZbLnmxSne7JQZfdHQoWzhOeV3X6kym7JBKzslgBWJkslYGW3JHD+Sotskl8CLpqAMWOlBSu7L5EWTS9Hi6bMB8Mw82XCommK54smp3uKSGXXVR1eIFQ4j/S8QucqVhMJuo8SuWhNBV60gF7bUZ7HzQuxDRHajxeAOQ25qXzF88quy7NTCZXEKUDdU4F+vOp5ZXdffATZOwxYQYUWXaaJVHan//cruzUO1SZlOmmT8lq0Scl8MAwzXyNsUl73fJPidL8uVNndSqhwHu15ZfcWUmW3UgJWdo8GViYrJ2BltxJw/qqIbJJnABdNwJixKoKV3RmkRdPMaNGU+WAYZs4kLJre8HzR5HS/IVLZdVWHaYQK53GeV+hcxepVgu7jRS5abwIvWkCv7XjP42ZabEOE9mMaMKchN5WzPK/sujz7JqGS+AZQ95tAP2Z7XtndFx9B9g4DVlChRZc5IpXdt/77lV07VJuUt0iblLnRJiXzwTDMnEvYpMzzfJPidM8Tquz+TKhwnuh5Zbc/qbJ7UgJWdk8EViaDBKzsngScPxPZJL8NXDQBY8ZMsLL7NmnR9E60aMp8MAwz3yEsmuZ7vmhyuueLVHZd1WEOocJ5sucVOlexmk3QfYrIRWsB8KIF9NpO8Txu5sQ2RGg/5gBzGnJT+a7nlV2XZxcQKonzgboXAP14z/PK7r74CLJ3GLCCCi26LBSp7C7671d2D9kmZRFpk/J+tEnJfDAMM98nbFI+8HyT4nR/IFTZ3U6ocJ7qeWX3dlJl97QErOyeCqxM1kvAyu5pwPmrL7JJXgxcNAFjxuoLVnYXkxZNS6JFU+aDYZi5hLBo+tDzRZPT/aFIZddVHRYSKpxnel6hcxWr9wi6zxK5aH0EvGgBvbazPI+bhbENEdqPhcCchtxULvW8suvy7EeESuKHQN0fAf1Y5nlld198BNk7DFhBhRZdPhap7H7yn6/spnY8VJuUT0iblOXRJiXzwTDMXE7YpKzwfJPidK8Qquz+SqhwNvG8sjuAVNk9OwEru02AlcmmCVjZPRs4f81ENsmfAhdNwJixZoKV3U9Ji6bPokVT5oNhmPkZYdG00vNFk9O9UqSy66oOHxMqnOd5XqFzFatlBN3ni1y0VgEvWkCv7XzP4+bj2IYI7cfHwJyG3FR+7nll1+XZVYRK4kqg7lVAP77wvLK7Lz6C7B0GrKBCiy6rRSq7a/77ld3UQ7VJWUPapHwZbVIyHwzDzC8Jm5SvPN+kON1fCVV2dxIqnBd4Xtm9i1TZvTABK7sXACuTrROwsnshcP7aiGyS1wIXTcCYsTaCld21pEXTumjRlPlgGGauIyyavvZ80eR0fy1S2XVVh9WECuelnlfoXMXqC4Luy0QuWt8AL1pAr+0yz+NmdWxDhPZjNTCnITeV6z2v7Lo8+w2hkvg1UPc3QD82eF7Z3RcfQfYOA1ZQoUWXb0Uqu9/99yu7HQ7VJuU70iZlY7RJyXwwDDM3EjYpmzzfpDjdm4Qqu78TKpxXeF7ZHUiq7F6ZgJXdK4CVyasSsLJ7JXD+2otskr8HLpqAMWPtBSu735MWTT9Ei6bMB8Mw8wfCommz54smp3uzSGXXVR2+JVQ4O3peoXMVqw0E3deKXLS2AC9aQK/tWs/j5tvYhgjtx7fAnIbcVP7oeWXX5dkthEriZqDuLUA/fvK8srsvPoLsHQasoEKLLltFKrvb/vuV3WsO1SZlG2mT8nO0Scl8MAwzfyZsUn7xfJPidP8iVNndTahwXud5ZfdeUmX3+gSs7F4HrEx2ScDK7vXA+esqskneDlw0AWPGugpWdreTFk07okVT5oNhmLmDsGj61fNFk9P9q0hl11UdthIqnL08r9C5itVPBN29RS5avwEvWkCvrbfncbM1tiFC+7EVmNOQm8qdnld2XZ79jVBJ/BWo+zegH7s8r+zui48ge4cBK6jQosvvIpXdP/77ld2rD9Um5Q/SJmV3tEnJfDAMM3cTNil7PN+kON17hCq7ewkVzhs8r+wOIlV2b0zAyu4NwMrkTQlY2b0ROH/9RDbJe4GLJmDMWD/Byu5e0qLpz2jRlPlgGGb+SVg0JZX1e9HkdLsxgj2ijNVVHX4nVDhv87xC5ypWuwi6bxe5aCWXxc0l0Gu73fO4+T22IUL78TtwI4jcVOYoy73GZDt/h+NzsYxeFCcBdScDr1c5y3L5QMTxHkJlF1hBhRZdcpXVyPe5gfHsaWW3/aHapADn8h+blDxlo01KpoNhmOkmHt1vXs83KU533kO0SUFUdpMIi/U7Pa/sPkCq7N6VgJXdO4GVybsTsLJ7F3D+BopsklOAiyZgzNhAwcpuCmnRlC9aNGU+GIaZ+QiLpvyeL5qc7vwilV1XdchVFr94uN/zCp2rWOUk6H5A5KJVAHjRAnptD3geN7liGyK0H7mAOQ25qSzoeWXX5dkChMpufqDuAkA/Cnle2d0XH0H2DgNWUKFFl8NEKruH//cru3UP1SblcNImpXC0Scl8MAwzCxM2KUU836Q43UWEKrs5CJXdhzyv7A4mVXYfTsDK7kPAyuQjCVjZfRg4f0NENslHABdNwJixIYKV3SNIi6ai0aIp88EwzCxKWDQV83zR5HQXE6nsuqrDYYQK5+OeV+hcxaoQQfcTIhet4sCLFtBre8LzuDkstiFC+3EYMKchN5UlPK/sujxbnFBJLAbUXRzoR0nPK7v74iPI3mHACiq06FJKpLJb+r9f2a1zqDYppUmblDLRJiXzwTDMLEPYpJT1fJPidJcVquzmIlR2n/S8svswqbL7VAJWdp8EViZHJmBl9yng/I0S2SSXAy6agDFjowQru+VIi6by0aIp88EwzCxPWDQd6fmiyek+UqSy66oOpQgVzmc9r9C5ilVJgu7nRC5aRwEvWkCv7TnP46ZUbEOE9qMUMKchN5UVPK/sujx7FKGSeCRQ91FAPyp6XtndFx9B9g4DVlChRZejRSq7lf77ld1TDtUmpRJpk1I52qRkPhiGmZUJm5Qqnm9SnO4qQpXdPITK7njPK7tDSJXd5xOwsjseWJmckICV3eeB8zdRZJN8DHDRBIwZmyhY2T2GtGg6Nlo0ZT4YhpnHEhZNVT1fNDndVUUqu67qcDShwvmS5xU6V7GqSND9sshFqxrwogX02l72PG6Ojm2I0H4cDcxpyE3lcZ5Xdl2erUaoJFYF6q4G9ON4zyu7++IjyN5hwAoqtOhygkhlt/p/v7J78qHapFQnbVJOjDYpmQ+GYeaJhE3KSZ5vUpzuk4QquymEyu4rnld2HyNVdl9NwMruK8DK5LQErOy+Cpy/6SKb5AC4aALGjE0XrOwGpEWTRYumzAfDMNMIi6Yani+anO4aIpVdV3U4gVDhfMPzCp2rWB1P0P2myEWrJvCiBfTa3vQ8bk6IbYjQfpwAzGnITWUtzyu7Ls/WJFQSawB11wT6Udvzyu6++AiydxiwggotupwsUtk95b9f2a19qDYpp5A2KXWiTUrmg2GYWYewSanr+SbF6a4rVNnNT6jszvG8sjuMVNl9KwEru3OAlcm5CVjZfQs4f/NENsmnAhdNwJixeYKV3VNJi6bTokVT5oNhmHkaYdFUz/NFk9NdT6Sy66oOJxMqnO96XqFzFavaBN3viVy06gMvWkCv7T3P4+bk2IYI7cfJwJyG3FSe7nll1+XZ+oRKYj2g7vpAP87wvLK7Lz6C7B0GrKBCiy4NRCq7Df/7ld1ah2qT0pC0STkz2qRkPhiGmWcSNilneb5JcbrPEqrsFiRUdt/3vLL7BKmy+0ECVnbfB1YmFydgZfcD4PwtEdkkNwIumoAxY0sEK7uNSIumxtGiKfPBMMxsTFg0NfF80eR0NxGp7P5VdSBUOD/2vELnKlZnEHR/InLROht40QJ6bZ94HjcNYhsitB8NgDkNuals6nll1+XZswmVxCZA3WcD/WjmeWV3X3wE2TsMWEGFFl3OEansnvvfr+zWPFSblHNJm5Tm0SYl88EwzGxO2KS08HyT4nS3EKrsHkao7H7qeWV3BKmy+1kCVnY/BVYmVyZgZfcz4PytEtkknwdcNAFjxlYJVnbPIy2azo8WTZkPhmHm+YRFU0vPF01Od0uRyq6rOpxDqHB+6XmFzlWsmhF0fyVy0WoFvGgBvbavPI+bc2IbIrQf5wBzGnJTeYHnlV2XZ1sRKoktgbpbAf240PPK7r74CLJ3GLCCCi26tBap7Lb571d2axyqTUob0iblomiTkvlgGGZeRNikXOz5JsXpvliosluYUNn92vPK7lOkyu43CVjZ/RpYmVyfgJXdb4Dzt0Fkk3wJcNEEjBnbIFjZvYS0aGobLZoyHwzDzLaERdOlni+anO5LRSq7rurQmlDh/N7zCp2rWF1I0P2DyEXrMuBFC+i1/eB53LSObYjQfrQG5jTkpvJyzyu7Ls9eRqgkXgrUfRnQj3aeV3b3xUeQvcOAFVRo0eWKsn7nKxd7VxCucz96nqdd3mpH0P0T6fqeA6wf6I/9BNzUOz/chiotP1RP+t+m6sTYz5NiP91xZcy/lLj5qRH7vftd2nlXxZ13IP2230+/7eP6vTqD84LYeVfHzssVtmuy+Pwd9vP8HeKeP3U/z58a9/wdMzjPYud1jJ3nxnVtbE+CZu2oMn/PQXy/2Y2Vnz3PMRXK/G9O0bp/EdlDdAJek4Fe2y+Cha8TcX0FuePG2TnG/HWxn9fHfnaJ/ewa/qwTOzcl7u8aoMZTKzj5r4Jbrn/OW9pRIOnvnJV2Tt6w5Y/7fXLs8RzxfxN7LGfcYzlz/aObvx7LFfuf3HGP5Y49llYILBz3HLnj5iI3ei7C2SiQ9M8iY0Zz0iDu3/HjyYUfj7l5Lhrr69rUPuf17dKlc8fOqb3OTe3Xsn3nXvF1x7Rh50o37OSkf0pI/3t35MjgMdIUW3LcGNL6zpXBdObBP3fg+s2L77dW2uU9KTbuBnHjzxs372nnlIj9PDzp76VB/HzkjOvLHQXTzU3aT4IWc/3mI81R/nRzlDb+fHFzlHZO+XRzlPZ4+jnKGzdHaXOTP26OCFpquH4LkOaoYLo5Sht/gbg5Sjuncro5Sns8/Rzli5uj/HH/Tpsjgpaart9CpDk6LN0cpY2/UNwcpZ1zfLo5Sns8/RwViJuXtLk5LO53af+Ov8ylPV/85evwuHlNeyzttaL4y2aRuOdLeyxHBs+bM522vy6bcZrSHksbQ+G4x9LyR9pzuTiQeo2qZtLf+8f4frO7Nv7V873LiWGHnQi6fxPZu3QD7l2AXhty/tLXJLrFagFdYz+7xNUaumexhtFjPzWMHnH99iTVHGrG+kbHby9gPTdn3NzEH+i56O55Ddp51Yvwenj8haZ32b8vsKR9bM34fWx6XzPax8ZfXJPj9rZ54/8mXX+F4x5L0xe/R+vWvU/njv3StmkdzuveJ/VA917p/50zg8fShpU7XX/x8tJ+R7/WJ6UTg+q7t+e8uDeyvkh4Q+fvnq9JxpPeyPqHyJqkD3BNAvTagPP3V3HGJRKntULSP2th8cmkb9m/N5WkfG7x+Tz94XJ0/KYrKYM8nZRBnk7bWIW1tAvad+vQvWuTzqldOmRWCkt/xF85/lH1jP07fttNS8GHqvRdPYmzJLghes9n5oNhmHkD4T2fN3r+nk+n+0bSGjejPVnF2M++cXutmzLYk1WLnXdT3Hn9Yu/PySj1oeelWhLn2pudeb66To2rLdXq1u4QtK8RBkaHmrVqx7/AwZoLZKJjjbGiwBj7kj5Nix5nP9KHGW4u+/eFgrQ2OiV+bRR/8XTHge51Ka9Z1vrfiyOMFw7jC9q59/FadJ4M1oF50q0DWS+cJcfpTus77f/Tns+NNa0Y/79awVm9Utv3+XelIO0PMqoexAt0R864c3Ole8wdeTL4+7TzkzPoxx1uMlPSjSU+sNJ+J1tluJmUpXKAx9kHuLK6pSw22p3WW+J2iodiO4K8Amb09olbQz39w3Zb2b9fgiZl8VoH886bonFjImRvI2XvmqSs+/9X4O5I/7aC+LdMpFUrkpOwDKTE9Zuc9O+qSPzbPo6IOzftvLT5SPM6/u0MaYk7337+Lle6vysUd06eDPQ3SMLqz5tuPOnf0pE77rH4d3LFb+UZ8ebjO7nS8klYfWrZ9+ouna85N7Vfw24dWrbv1adz+y4NO3Toldq7d0ZJKWc6Afu6cmdWyIp/7SD+fQ/pVwgZvZ4QP6Hxgfn/+0fXhW8siyc1TdStsf12/9hPVxq4PYP9+e2x398W++necHFHXB0hfqIbEHRnt68Bnn8+zF3NBxBeJ97r+WspLoYYuv8U+fwL0B9DanYJLg9Rt3vt8OzSuP7c63GuvyTsOKl1F5WaI3MObhWpkfUH18iiGm7i1XDjF61p+fTOsP+7yv7vPWvuIO2w28fvsOOfwx0HWieNf8NtjrjH/v9COu6x/7+QjntO+K63VlA7JelvPbB+Q9/dWEvHeUKoMNQh7fhqRBWGpKRScecmUoUh7c3xrsKQku41AObY0uetlHRjy5/092tBqV0792nc7Zpe/XqE9f7m3a+N35jHz39SurmN1+KO+GtofEk/dwZ/Gz9/6TfvGR37Kiw4XWkfVGiQhGPW5cz8GYwh/mgQ92/yh1aMpPOvHFIonab0H8QpFHdOPOOED9FYRh8Wih9H+ucGvskmyOhDOBnNxWEZjOewQzwX8R/ESXss/vXG+N+n/cyRTkv8miLt/P0WzoLsHTYAvLlgvIF2JuGNpDla+a3bbdYZunOCdacd6DfQ3g0sRgK9tpyex43j5Q1C3OQR4IWhO68ILwOBvAC9trwCvLxJiJv8ArwwdBcQ4eUeIC9Ar62AAC+zCHFzmAAvDN2Hi/ByL5AXoNd2uAAvswlxc4QALwzdRUV4uQ/IC9BrKyrAyxxC3JQQ4IWhu6QIL4OAvAC9NpX5ux/4RrDe5+P66nu+//nmEwJ3ZTzPN1eQPqBfVoSXB4D5Bui1qczfg8B8cxsw39wukG9WELg70vN8cxUp3xwlwstgYL4Bem0q8/cQMN/cA8w39wrkm88I3B3teb65mpRvKonw8jAw3wC9NpX5ewSYbx4F5pvHBPLNKgJ3x3iebzqQ8s2xIrwMAeYboNemMn+PAvPN08B884xAvvmCwN1xnuebjqR8c7wIL48B8w3Qa1OZv6HAfPMCMN+8KJBv1hC4O9HzfNOJlG9OEuFlGDDfAL02lfl7HJhvXgPmm9cF8s1XBO5qeJ5vriPlm5oivDwBzDdAr01l/oYD883bwHzzjkC+WUfg7mTP800XUr45RYSXEcB8A/TaVObvSWC++RCYbz4SyDffELg71fN8042Ub04T4eUpYL4Bem0q8zcSmG8+B+abLwTyzQYCd6d7nm96kPLNGSK8jALmG6DXpjJ/TwPzzbfAfPOdQL75jsDdmZ7nm16kfHOWCC/PAPMN0GtTmb/RwHzzMzDf/CKQbzYRuGvieb7pQ8o3Z4vwMgaYb4Bem8r8PQvMN3uB+eZPgXzzA4G7czzPNzeQ8s25Irw8B8w3QK9NZf7GAvNN/pa4vgp4/mX4Lt9sIXB3nuf55iZSvjlfhJdxwHwD9NpU5m88MN+UAOabkgL55icCdxd4nm9uJuWbC0V4eR6Yb4Bem8r8TQDmm6OB+aaSQL7ZRuDuIs/zza2kfHOxCC8TgfkG6LWpzN8LwHxzIjDfnCSQb34hcHep5/nmNlK+uUyElxeB+QbotanM3yRgvjkVmG9OE8g3OwjcXeF5vrmDlG+uFOFlMjDfAL02lfl7CZhvmgDzzdkC+eY3AndXe55v7iTlm2tEeHkZmG+AXpvK/E0B5psLgPnmQoF8s4vAXUfP883dpHxzrQgvU4H5Bui1qczfK8B8cwUw31wpkG/+IHB3nef55h5SvrlehJdXgfkG6LWpzN80YL65DphvrhfIN3sI3HXzPN/cR8o33UV4mQ7MN0CvTWX+XgPmmxuA+eZGgXzzJ4G7Xp7nm/tJ+aa3CC+vA/MN0GtTmb8ZwHxzJzDf3CWQb5LL4Lm7wfN88yAp39wowstMYL4Bem0q8/cGMN88BMw3Dwvkm5yEfHOz5/nmIVK+uUWElzeB+QbotanM3yxgvnkSmG+eEsg3uQn55jbP880jpHxzuwgvs4H5Bui1qczfHGC+GQ/MN88L5Ju8hHxzp+f55lFSvrlLhJe3gPkG6LWpzN9cYL55BZhvXhXIN/kI+eYez/PNUFK+uVeEl3nAfAP02lTm721gvpkDzDdvCeSbAoR8c7/n+eZxUr55QISXd4D5Bui1qczffGC+eR+Ybz4QyDeFCPnmIc/zzXBSvnlYhJcFwHwD9NpU5u9dYL75FJhvPhPIN4cT8s2jnuebJ0n55jERXt4D5hug16YyfwuB+eZrYL75RiDfFCHkm8c9zzcjSfnmCRFeFgHzDdBre8LzuKkZ9tGrLD5u3i+rETcfAOPmd1xutD8E8uzLhHzzpOe8vEzKs0+J5NnFQF6AXttTnsfN2aS4eVokbpYA17Ovt8D58rTncePy7FRC3Iz2XLdjhaF7jAgvHwLzLNBrGyPAyyuEuBkrwAtD9zgRXj4C8gL02sYJ8PIqIW4mCPDC0D1RhJelQF6AXttEAV6mEeJmkgAvDN2TRXhZBuQF6LVNFuBlOiFupgjwwtA9VYSXj4G8AL22qQK8LCPEzTQBXhi6p4vw8gmQF6DXNl2Al6WEuJkhwAtD90wRXpYDeQF6bTM9j5sbw3m7n/B67yzPdQ8g6Z4twssKIC9Ar222AC8PEOJmrgAvDN3zRHj5FMgL0GubJ8DLg4S4mS/AC0P3AhFePgPyAvTaFgjwMpgQNwsFeGHoXiTCy0ogL0CvbZEALw8R4maxAC8M3UtEeFkF5AXotS0R4OVhQtwsFeCFoXuZCC+fA3kBem3LBHh5hBA3ywV4YeheIcLLF0BegF7bCgFehhDiZqUALwzdq0R4WQ3kBei1rRLg5VFC3KwW4IWhe40IL2uAvAC9tjUCvDxGiJu1ArwwdK8T4eVLIC9Ar22dAC9DCXGzXoAXhu4NIrx8BeQF6LVtEOBlGCFuNgrwwtC9SYSXtUBegF7bJgFeHifEzWYBXhi6t4jwsg7IC9Br2yLAyxOEuNkqwAtD9zYRXr4G8gL02rYJ8DKcEDfbBXhh6N4hwss3QF6AXtsOAV5GEOJmpwAvDN27RHhZD+QF6LXtEuDlSULc7BbghaF7jwgvG4C8AL22PQK8PEWIm6QL/OeFoTv5Ag1evgXyAvTakj2PG8fLSELc5BLghaE7twgv3wF5AXptuQV4GUWImxQBXhi684nwshHIC9BryyfAy9OEuCkowAtDdyERXjYBeQF6bYUEeHmGEDeFBXhh6C4iwsv3QF6AXlsRAV5GE+KmmAAvDN3FRXj5AcgL0GsrLsDLGELclBLghaG7tAgvm4G8AL220gK8PEuIm3ICvDB0lxfhZQuQF6DXVl6Al+cIcVNBgBeG7ooivPwI5AXotVUU4GUsIW4qC/DC0F1FhJefgLwAvbYqAryMI8RNVQFeGLqrifCyFcgL0GurJsDLeELcnCDAC0N3dRFetgF5AXpt1QV4eZ4QN4EALwzdJsLLz0BegF6bCfAygRA3tQR4YeiuLcLLL0BegF5bbQFeJhLipo4ALwzddUV42Q7kBei11RXg5QVC3NQT4IWhu74ILzuAvAC9tvoCvLxIiJsGArwwdDcU4eVXIC9Ar62hAC+TCHHTSIAXhu7GIrz8BuQF6LU1FuBlMiFumgrwwtDdTISXnUBegF5bMwFeXiLETXMBXhi6W4jwsgvIC9BrayHAy8uEuGkpwAtDdysRXn4H8gL02loJ8DKFEDetBXhh6G4jwssfQF6AXlsbAV6mEuLmEgFeGLrbivCyG8gL0GtrK8DLK4S4uVyAF4budiK87AHyAvTa2gnw8iohbq4S4IWhu70IL3uBvAC9tvYCvEwjxE0HAV4YulNFePkTyAvQa0sV4GU6IW46CfDC0N1ZhJekcri5BHptnQV4eY0QN10EeGHo7irCSzKQF6DX1lWAl9cJcdNDgBeG7p4ivOQA8gL02noK8DKDEDd9BHhh6O4rwktOIC9Ar62vAC8zCXFzkwAvDN39RHjJBeQF6LX1E+DlDULc3CrAC0N3fxFecgN5AXpt/QV4eZMQN3cI8MLQPUCElzxAXoBe2wABXmYR4uZuAV4YugeK8JIXyAvQaxsowMtsQtzcJ8ALQ/cgEV5SgLwAvbZBArzMIcTNgwK8MHQPFuElH5AXoNc2WICXtwhx84gALwzdQ0R4yQ/kBei1DRHgZS4hboYK8MLQPUyElwJAXoBe2zABXuYR4ma4AC8M3SNEeCkI5AXotY0Q4OVtQtyMFOCFoXuUCC+FgLwAvbZRAry8Q4ib0QK8MHSPEeHlMCAvQK9tjAAv8wlxM1aAF4bucSK8HA7kBei1jRPgZQEhbiYI8MLQPVGEl8JAXoBe20QBXt4lxM0kAV4YuieL8FIEyAvQa5sswMt7hLiZIsALQ/dUEV6OAPIC9NqmCvCykBA30wR4YeieLsJLUSAvQK9tugAviwhxM0OAF4bumSK8FAPyAvTaZnoeN9eFMXMjIW5mCegeQNA9W4SX4kBegF7bbM/j5noSL3MFdDN4mSfCSwkgL0CvbZ7ncdOFxMt8Ad0MXhaI8FISyAvQa1vgedx0JfGyUEA3g5dFIryUAvIC9NoWCez3+xHiZrHnuvuReFkiwktpIC9Ar22J53HTh3R9WSqgm8HLMhFeygB5AXptyzyPm+4kXpYL6GbwskKEl7JAXoBe2wqB9dj7hLhZKfD6C0P3KhFeygF5AXptqwR4+YAQN6sFeGHoXiPCS3kgL0CvbY3ncVM57PCj0vi4Weu57imlObrXifByJJAXoNe2ToCX1whxs16AF4buDSK8HAXkBei1bRDg5XVC3GwU4IWhe5MILxWAvAC9tk0CvMwgxM1mAV4YureI8FIRyAvQa9sisN+/m7Dv3Sqw32fo3ibCy9FAXoBe2zYBXgYS4ma7AC8M3TtEeKkE5AXote0Q4OUeQtzsFOCFoXuXCC+VgbwAvbZdArzcS4ib3QK8MHTvEeGlCpAXoNe2R4CX+whxk3Sh/7wwdCdfqMHLMUBegF5bsudx43gZRIibXAK8MHTnFuHlWCAvQK8tt+dx4+rJbxHqqime63b1ZIbufCK8VAXyAvTa8gnwMpcQNwUFeGHoLiTCSzUgL0CvrZAAL/MIcVNYgBeG7iIivBwH5AXotRUR4OVtQtwUE+CFobu4CC/HA3kBem3FBXh5hxA3pQR4YeguLcLLCUBegF5baQFe5hPippwALwzd5UV4qQ7kBei1lRfgZQEhbioI8MLQXVGElxOBvAC9tooCvLxLiJvKArwwdFcR4eUkIC9Ar62KAC/vEeKmqgAvDN3VRHgJgLwAvbZqArwsJMTNCQK8MHRXF+HFgLwAvbbqArwsIsRNIMALQ7eJ8FIDyAvQazMBXt4nxE0tAV4YumuL8FITyAvQa6stwMsHhLipI8ALQ3ddEV5qAXkBem11BXhZTIibegK8MHTXF+GlNpAXoNdWX4CXJYS4aSDAC0N3QxFeTgbyAvTaGgrw8iEhbhoJ8MLQ3ViEl1OAvAC9Ntb85QDHz+KywL1LOQ3NS4Ca64po/hCo+VQRzR8BNZ8monkpUHM9Ec3LgJrri2j+GKj5dBHNnwA1nyGiuVIScO+XgJobJqDmMxNQ81kimpcDc1gjEc0rgJobi2j+FKi5iYjmz4CazxbRvBKouamI5lVAzc1ENH8O1HyOiOYvgJrPFdG8Gqi5uYjmNUDNLUQ0fwnUfJ6I5q+Ams8X0bwWqLmliOZ1QM2tRDR/DdR8gYjmb4CaLxTRvB6oubWI5g1AzW1ENH8L1HyRiObvgJovFtG8Eaj5EhHNm4Ca24po/h6o+VIRzT8ANV8monkzUPPlIpq3ADW3E9H8I1DzFSKafwJqvlJE81ag5qtENG8Dam4vovlnoOarRTT/AtR8jYjm7UDNHUQ07wBqThXR/CtQc0cRzb8BNV8ronknUHMnEc27gJo7i2j+Haj5OhHNfwA1Xy+ieTdQcxcRzXuAmruKaN4L1NxNRPOfQM3dRTQnlcNp7iGiORmouaeI5hxAzb1ENOcEau4tojkXUHMfEc25gZr7imjOA9R8g4jmvEDNN4poTgFqvklEcz6g5n4imvMDNd8sorkAUPMtIpoLAjXfKqK5EFBzfxHNhwE13yai+XCg5ttFNBcGar5DRHMRoOYBIpqPAGq+U0RzUaDmu0Q0FwNqvjsBP+c+MAE135OAmu9NQM33iWguDsxhg0Q0lwBqvl9Ec0mg5gdENJcCan5QRHNpoObBIprLADU/lIDXqocTUPMjCah5SAJqfjQBNT+WgJqHJqDmYQmo+fEE1PxEAmoenoCaRySg5icTUPNTCah5ZAJqHpWAmp9OQM3PJKDm0QmoeUwCan42ATU/l4Caxyag5nEJqHl8Amp+PgE1T0hAzRMTUPMLCaj5xQTUPElEc1nga7GTRTSXA2p+SURzeaDmlxOQ5ykJqHlqAmp+JQE1v5qAmqcloObpCaj5tQTU/HoCap6RgJpnJqDmNxJQ85sJqHlWAmqenYCa5ySg5rcSUPPcBNQ8LwE1v52Amt9JQM3zE1DzggTU/G4Can4vATUvTEDNixJQ8/sJqPmDBNS8OAE1L0lAzR8moOaPElDz0gTUvCwBNX+cgJo/SUDNyxNQ84oE1PxpAmr+LAE1r0xAzasSUPPnCaj5iwTUvDoBNa9JQM1fJqDmrxJQ89oE1LwuATV/nYCav0lAzesTUPOGBNT8bQJq/i4BNW8U0Xwk8HN0m0Q03wK8d+r3CRjbPySg5s0JqHlLAmr+MQE1/5SAmreKaD4KeH3eJqK5AlDzzyKaKwI1/yKi+Wig5u0qOQyoeYeI5spAzb+KaK4C1PybiOZjgJp3img+Fqh5l4jmqkDNv4torgbU/IeI5uOAmneLaD4eqHmPiOYTgJr3imiuDtT8p4jmE4Gak8praD4JqDlZRHMA1JxDRLMBNecU0VwDqDmXiOaaQM25RTTXAmrOI6K5NlBzXhHNJwM1p4hoPgWoOR9Qc3LYR85YX5Xi9CfH5sD9LlfYcoctT9jyhi0lbPnClj9sBcJWMGyFwnZY2A4PW+GwFQnbEWErGrZiYSsethJhKxm2UmErHbYyYQtfok4Kp8Yts5KODNtRYasQtophOzpuPB/HftYJT64btlPDdlrY6oWtfthOD9sZbo7D1jBsZ4btrLA1ClvjsDUJ29lhaxq2ZmE7J2znhq152FqE7bywnR+2lmFrFbYLwnZh2FqHrU3YLgrbxWG7JGxtw3Zp2C4L2+Vhaxe2K8J2ZdiuClv7sF0dtmvC1iFsqWHrGLZrw9YpbJ3Ddl3Yrg9bl7B1DVu3sHUPW4+w9Qxbr7D1DlufsPUN2w1huzFsN4WtX9huDtstYbs1bP3DdlvYbg/bHWEbELY7w3ZX2O4O28Cw3RM2d394d790d/9wdz9td39pd79ld/9hdz9ed39ad79Wd/9Sdz9Pd39Ld79Hd/9Ddz9Ad388d784d/80dz8xd38td78pd/8ldz8id38ed78ad/8Wdz8Td38Pd78Ld/8Hdz8Ed38A93357vvj3fepu+8Xd9+37b5/2n0fs/t+Yvd9ve77a933ubrvN3Xf9+m+/9J9H6T7fkT3fYHu+/Pc98m571dz3zfmvn/LfR+V+34m931F7vt73PfZuO93cd934r7/w30fhvt+CPd9Ce77A9zn6d3ny93nrd3nj93ncd3nU93nNd3nF93n+dzn29znvdznn9zngdznY9znRdznJ9znCdz76937zd37r937kd37c937Vd37N937Gd37+9z73dz7v9z7odz7g9z7Zdz7R9z7Kdz7C9zr7e71Z/d6rHt90r1e516/cq/nuNc3XL3f1b9dPdjVR1290NXPXD3J1VdcvcHtv91+1O3PHEhu/e7Ws25959Y77vrvrofu+uDypcsfc+LYKhH7WS/288I+3Xu1vza1Qu8u3ftUCCp0C//bvkuX7jemdjixQvzvelfo2rd3nwq9+7Tv1adCx17du1awE93f9431Uy72s32fPqlde/Sp0Kd7hfYdOlS4sXOfThW635Daq2PYp/v9qNh5R8R+9ujbOzyhb58K3TtWuLp7324dertHZ2ax11lZPP+tLJ6/KPlARn1sjqz1elwWzz8xi+fvyXEgo/4sZ9Z6/TyL53+VxfNfynUgo74vd9Z6fSCL5z+SxfOvzHMgo66bN2u91svi+Q2zeH7hlAMZ9fcpWet1SxbP/zmL58/LdyCjfip/1np9OovnP5fF83sVOJBRNy+YtV7Pz+L5rbN4fqVCBzLqPYWy1utfy8csnJ87i+cvP+xARv3S4VnrdWoWz38ti+cPLHwgo76ySNZ6vTqL51+bxfNPPuJARl24aNZ6LZrF80tl8fzvih7IqOcVy1qv87N4/qIsnj+8+IGMuleJrPXaN4vn35zF85uVPJBRVyqVtV6PyeL5x2fx/N9LHciol5fOWq+fZfH81Vk8/8UyBzLqgWWz1ut9WTx/cBbPv7zcgYz65PJZ67VuFs8/PYvnFzryQEb93ZFZ6/X7LJ7/UxbPn3PUgYx6eIWs9fpUFs8fncXzu1c8kFE3OzprvTbP4vmtsnh+hUoHMurfK2Wt1z1ZPD9H5aydv6zygYz6xSpZ6/WlLJ7/ahbPv/OYAxn15cdmrdcrs3h+hyyeX7PqgYy6ULWs9Vo4i+cXz+L566sdyKjnHJe1Xudl8fx3s3j+sOMPZNTdT8har72yeP6NWTy/SfUDGXWFE7PWa6Usnl81i+f/duKBjHrZSVnrdXkWz1+VxfMnBAcy6jsta70OzOL592fx/LY1DmTUNWtmrdeTs3j+aVk8/4fY+bHlSFKzbje079K5Q4VufbtendrLjb1Xap++vbq5mnRq77/C6ZST/3fqKbE/Oat9twrdu3XpF57ZNey6Qvu/zq3Qp1P7PhU6te9d4erU1G7h79p3+F/Fuk+nsJad2uevrurguqqL6+rCk7M2h+2ycL4rYZeMnbctVmmo+O+/69q3S5/OPcLR7/OPd8T+OLYzSWrYq1f7fhU6d+uQetM/oy7+j3YXPriRJhU5iCfLW+TgnqzAwTxZqYP5ozMO5o+uOUhZA2J/d1BuDzyYkT54kCN95GCe7ImDfLKnDubJnj3IJxt/ME82/WD+6MuDIuaIg/ij4484uLmocZB/l6/oQQyy6MH80amxPzooYs7IQiky/u/OOpiRnnOQT3bewTzZxQf5ZPcdzJM9fDB/9PjB/NHb2XH7vYN5xvUHOZEbD+bJchc7uCfLV+wgnuyYg3yy4w7myc4+yCc792CerNNBPlmXg3myQQf5ZIMP5sleOMgne+lgnuzjg3yyNQf5d+sOZpDfHcwf5S6etRE2iS3eY392YE/WJN2KP0t/VOlg/ui4A/2jpP8HE0P88+CuQwA=", "debug_symbols": "" }], "events": [], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n", "path": "std/collections/bounded_vec.nr" }, "35": { "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n", "path": "std/option.nr" }, "60": { "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr" }, "62": { "source": "use dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateSet<T> {}\n\nimpl<Note> PrivateSet<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(self.context.public.unwrap(), self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n\n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(\n            false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(\n            false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.note_hash_read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>\n    ) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(self.context.private.unwrap(), storage_slot, options);\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr" }, "63": { "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr" }, "77": { "source": "use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "82": { "source": "use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "85": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/log.nr" }, "87": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "90": { "source": "use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr" }, "93": { "source": "use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr" }, "94": { "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr" }, "95": { "source": "#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/rand.nr" }, "104": { "source": "use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr" }, "105": { "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, constants::RETURN_VALUES_LENGTH};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr" }, "106": { "source": "use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr" }, "107": { "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr" }, "110": { "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context.nr" }, "118": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr" }, "121": { "source": "use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed private data tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr" }, "122": { "source": "use dep::protocol_types::{\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTE_ORACLE_RETURN_LENGTH, GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH\n}\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note: Note) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index].lt(fields_1[sort.field_index]);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter.nr" }, "131": { "source": "pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr" }, "147": { "source": "use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl Eq for PublicKeysHash {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    assert(actual.to_field() == 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/public_keys_hash.nr" }, "148": { "source": "use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address\n    );\n\n    assert(address.to_field() == 0x2fd71a4f0742364f194dd16d0ae32d2f47845ddc7f5d328f37d4148b565c4123);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    assert(address.to_field() == 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr" }, "153": { "source": "use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr" }, "185": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr" }, "198": { "source": "use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<1> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<1> for U128 {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr" }, "199": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::FunctionLeafPreimage;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr" }, "202": { "source": "global ARGS_LENGTH: u64 = 16;\nglobal RETURN_VALUES_LENGTH: u64 = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_NOTE_HASHES_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as note hashes and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_NOTE_HASHES_PER_TX ≥ MAX_NEW_NOTE_HASHES_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_CALL: u64 = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: u64 = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: u64 = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: u64 = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: u64 = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: u64 = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: u64 = 16;\nglobal MAX_NOTE_HASH_READ_REQUESTS_PER_CALL: u64 = 32;\nglobal MAX_NULLIFIER_READ_REQUESTS_PER_CALL: u64 = 2; // Change it to a larger value when there's a seperate reset circuit.\nglobal MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL: u64 = 2;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: u64 = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_TX: u64 = 64;\nglobal MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX: u64 = 8;\nglobal MAX_REVERTIBLE_NOTE_HASHES_PER_TX: u64 = 56;\n\nglobal MAX_NEW_NULLIFIERS_PER_TX: u64 = 64;\nglobal MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX: u64 = 8;\nglobal MAX_REVERTIBLE_NULLIFIERS_PER_TX: u64 = 56;\n\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: u64 = 8;\n\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 8;\nglobal MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 3;\nglobal MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 5;\n\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 16;\n\nglobal MAX_PUBLIC_DATA_READS_PER_TX: u64 = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: u64 = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: u64 = 16;\n\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: u64 = 2;\nglobal MAX_NOTE_HASH_READ_REQUESTS_PER_TX: u64 = 128;\nglobal MAX_NULLIFIER_READ_REQUESTS_PER_TX: u64 = 8; // Change it to a larger value when there's a seperate reset circuit.\nglobal MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX: u64 = 8;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: u64 = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: u64 = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: u64 = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: u64 = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: u64 = 3;\nglobal FUNCTION_TREE_HEIGHT: u64 = 5;\nglobal NOTE_HASH_TREE_HEIGHT: u64 = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: u64 = 40;\nglobal NULLIFIER_TREE_HEIGHT: u64 = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: u64 = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: u64 = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\nglobal NULLIFIER_TREE_ID = 0;\nglobal NOTE_HASH_TREE_ID = 1;\nglobal PUBLIC_DATA_TREE_ID = 2;\nglobal L1_TO_L2_MESSAGE_TREE_ID = 3;\nglobal ARCHIVE_TREE_ID = 4;\n\n// SUB-TREES RELATED CONSTANTS\nglobal NOTE_HASH_SUBTREE_HEIGHT: u64 = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: u64 = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: u64 = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: u64 = 5;\nglobal ARCHIVE_HEIGHT: u64 = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: u64 = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: u64 = 35;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: u64 = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: u64 = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: u64 = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u64 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u64 = 32;\n// The following is used in immutable state variables to compute an initialization slot whose value is used to\n// determine whether a given variable has been initialized (by asserting that the value in the slot is 0).\n// The initialization slot is computed by adding the constant bellow to the variable's storage slot. This constant has\n// to be large enough so that it's ensured that it doesn't collide with storage slots of other variables.\nglobal INITIALIZATION_SLOT_SEPARATOR: Field = 1000_000_000;\nglobal INITIAL_L2_BLOCK_NUM: Field = 1;\n// 126976 = 31 * 4096;\nglobal BLOB_SIZE_IN_BYTES: Field = 126976;\n\n// CONTRACT CLASS CONSTANTS\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: u64 = 15000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: u64 = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: u64 = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\nglobal DEPLOYER_CONTRACT_ADDRESS = 0x0bffa876f07f9fe1802579dfef599810202f9c25b9a2f58921064a267d1ad1d3;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: u64 = 17;\nglobal MAX_NOTE_FIELDS_LENGTH: u64 = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: u64 = 23;\nglobal MAX_NOTES_PER_PAGE: u64 = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: u64 = 212;\n\n// LENGTH OF STRUCTS SERIALIZED TO FIELDS\nglobal AZTEC_ADDRESS_LENGTH = 1;\nglobal CALL_CONTEXT_LENGTH: u64 = 7;\nglobal CONTENT_COMMITMENT_LENGTH: u64 = 7;\nglobal CONTRACT_INSTANCE_LENGTH: u64 = 6;\nglobal CONTRACT_STORAGE_READ_LENGTH: u64 = 2;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: u64 = 2;\nglobal ETH_ADDRESS_LENGTH = 1;\nglobal FUNCTION_DATA_LENGTH: u64 = 4;\nglobal FUNCTION_LEAF_PREIMAGE_LENGTH: u64 = 5;\nglobal GLOBAL_VARIABLES_LENGTH: u64 = 6;\nglobal HEADER_LENGTH: u64 = 23; // 2 for last_archive, 7 for content commitment, 8 for state reference, 6 for global vars\nglobal L1_TO_L2_MESSAGE_LENGTH: u64 = 8;\nglobal L2_TO_L1_MESSAGE_LENGTH: u64 = 2;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH = 5;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: u64 = 6;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: u64 = 215;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: u64 = 210;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: u64 = 202;\nglobal STATE_REFERENCE_LENGTH: u64 = 8; // 2 for snap + 8 for partial\nglobal TX_CONTEXT_DATA_LENGTH: u64 = 4;\nglobal TX_REQUEST_LENGTH: u64 = 10;\n\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH: Field = 13; // 2 + FUNCTION_DATA_LENGTH + CALL_CONTEXT_LENGTH\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: u64 = 674;\nglobal NOTE_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal NUM_MSGS_PER_BASE_PARITY: u64 = 4;\n// NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP / NUM_MSGS_PER_BASE_PARITY\nglobal NUM_BASE_PARITY_PER_ROOT_PARITY: u64 = 4;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__NOTE_HASH = 1;\nglobal GENERATOR_INDEX__NOTE_HASH_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_NOTE_HASH = 3;\nglobal GENERATOR_INDEX__SILOED_NOTE_HASH = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\nglobal GENERATOR_INDEX__FEE_PAYLOAD = 30;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\nglobal GENERATOR_INDEX__AUTHWIT_INNER = 45;\nglobal GENERATOR_INDEX__AUTHWIT_OUTER = 46;\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/constants.nr" }, "209": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr" }, "234": { "source": "// A contract used for running benchmarks.\n// We should try to change this contract as little as possible, since any modification\n// would alter the metrics we're capturing in the benchmarks, and we want to keep the\n// subject being tested as unmodified as possible so we can detect metric changes that\n// arise from code changes.\n\ncontract Benchmarking {\n    use dep::aztec::prelude::{\n        AztecAddress, FunctionSelector, NoteHeader, NoteGetterOptions, emit_unencrypted_log, Map,\n        PublicMutable, PrivateSet\n    };\n    use dep::value_note::{utils::{increment, decrement}, value_note::ValueNote};\n\n    use dep::aztec::{context::{Context}};\n\n    struct Storage {\n        notes: Map<AztecAddress, PrivateSet<ValueNote>>,\n        balances: Map<AztecAddress, PublicMutable<Field>>,\n    }\n\n    // Creates a new value note for the target owner. Use this method to seed an initial set of notes.\n    #[aztec(private)]\n    fn create_note(owner: AztecAddress, value: Field) {\n        increment(storage.notes.at(owner), value, owner);\n    }\n\n    // Deletes a note at a specific index in the set and creates a new one with the same value.\n    // We explicitly pass in the note index so we can ensure we consume different notes when sending\n    // multiple txs that will land on the same block.\n    // See https://discourse.aztec.network/t/utxo-concurrency-issues-for-private-state/635\n    // by @rahul-kothari for a full explanation on why this is needed.\n    #[aztec(private)]\n    fn recreate_note(owner: AztecAddress, index: u32) {\n        let owner_notes = storage.notes.at(owner);\n        let getter_options = NoteGetterOptions::new().set_limit(1).set_offset(index);\n        let notes = owner_notes.get_notes(getter_options);\n        let note = notes[0].unwrap_unchecked();\n        owner_notes.remove(note);\n        increment(owner_notes, note.value, owner);\n    }\n\n    // Reads and writes to public storage and enqueues a call to another public function.\n    #[aztec(public)]\n    fn increment_balance(owner: AztecAddress, value: Field) {\n        let current = storage.balances.at(owner).read();\n        storage.balances.at(owner).write(current + value);\n        let _callStackItem1 = context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"broadcast((Field))\"),\n            [owner.to_field()]\n        );\n    }\n\n    // Emits a public log.\n    #[aztec(public)]\n    fn broadcast(owner: AztecAddress) {\n        emit_unencrypted_log(&mut context, storage.balances.at(owner).read());\n    }\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/benchmarking_contract/src/main.nr" }, "238": { "source": "use dep::aztec::prelude::{AztecAddress, PrivateContext, PrivateSet, NoteGetterOptions};\nuse dep::aztec::note::note_getter_options::SortOrder;\nuse dep::aztec::oracle::get_public_key::get_public_key;\nuse crate::{filter::filter_notes_min_sum, value_note::{ValueNote, VALUE_NOTE_LEN}};\n\n// Sort the note values (0th field) in descending order.\n// Pick the fewest notes whose sum is equal to or greater than `amount`.\npub fn create_note_getter_options_for_decreasing_balance(amount: Field) -> NoteGetterOptions<ValueNote, VALUE_NOTE_LEN, Field> {\n    NoteGetterOptions::with_filter(filter_notes_min_sum, amount).sort(0, SortOrder.DESC)\n}\n\n// Creates a new note for the recipient.\n// Inserts it to the recipient's set of notes.\npub fn increment(balance: PrivateSet<ValueNote>, amount: Field, recipient: AztecAddress) {\n    let mut note = ValueNote::new(amount, recipient);\n    // Insert the new note to the owner's set of notes and emit the log if value is non-zero.\n    balance.insert(&mut note, amount != 0);\n}\n\n// Find some of the `owner`'s notes whose values add up to the `amount`.\n// Remove those notes.\n// If the value of the removed notes exceeds the requested `amount`, create a new note containing the excess value, so that exactly `amount` is removed.\n// Fail if the sum of the selected notes is less than the amount.\npub fn decrement(balance: PrivateSet<ValueNote>, amount: Field, owner: AztecAddress) {\n    let sum = decrement_by_at_most(balance, amount, owner);\n    assert(sum == amount, \"Balance too low\");\n}\n\n// Similar to `decrement`, except that it doesn't fail if the decremented amount is less than max_amount.\n// The motivation behind this function is that there is an upper-bound on the number of notes a function may\n// read and nullify. The requested decrementation `amount` might be spread across too many of the `owner`'s\n// notes to 'fit' within this upper-bound, so we might have to remove an amount less than `amount`. A common\n// pattern is to repeatedly call this function across many function calls, until enough notes have been nullified to\n// equal `amount`.\n//\n// It returns the decremented amount, which should be less than or equal to max_amount.\npub fn decrement_by_at_most(\n    balance: PrivateSet<ValueNote>,\n    max_amount: Field,\n    owner: AztecAddress\n) -> Field {\n    let options = create_note_getter_options_for_decreasing_balance(max_amount);\n    let opt_notes = balance.get_notes(options);\n\n    let mut decremented = 0;\n    for i in 0..opt_notes.len() {\n        if opt_notes[i].is_some() {\n            decremented += destroy_note(balance, owner, opt_notes[i].unwrap_unchecked());\n        }\n    }\n\n    // Add the change value back to the owner's balance.\n    let mut change_value = 0;\n    if max_amount.lt(decremented) {\n        change_value = decremented - max_amount;\n        decremented -= change_value;\n    }\n    increment(balance, change_value, owner);\n\n    decremented\n}\n\n// Removes the note from the owner's set of notes.\n// Returns the value of the destroyed note.\npub fn destroy_note(balance: PrivateSet<ValueNote>, owner: AztecAddress, note: ValueNote) -> Field {\n    // Ensure the note is actually owned by the owner (to prevent user from generating a valid proof while\n    // spending someone else's notes).\n    assert(note.owner.eq(owner));\n\n    balance.remove(note);\n\n    note.value\n}\n", "path": "/usr/src/noir-projects/aztec-nr/value-note/src/utils.nr" }, "239": { "source": "use dep::aztec::{\n    protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::{rand::rand, nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    log::emit_encrypted_log, hash::pedersen_hash, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN> for ValueNote {\n    fn serialize_content(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner.to_field(), self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: AztecAddress::from_field(serialized_note[1]),\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(),0)\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'ValueNote')))\"\n        869710811710178111116101\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.owner.to_field(), self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr" } } }
