{ "noir_version": "0.25.0+589a6cb62caf38445c768429150eee469ae35d77", "name": "Crowdfunding", "functions": [{ "name": "constructor", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(initializer)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "donation_token", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "operator", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "deadline", "type": { "kind": "integer", "sign": "unsigned", "width": 64 }, "visibility": "private" }], "param_witnesses": { "deadline": [{ "start": 39, "end": 40 }], "donation_token": [{ "start": 37, "end": 38 }], "inputs": [{ "start": 0, "end": 37 }], "operator": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241] }, "bytecode": "", "debug_symbols": "" }, { "name": "donate", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "amount", "type": { "kind": "integer", "sign": "unsigned", "width": 64 }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074] }, "bytecode": "", "debug_symbols": "" }, { "name": "withdraw", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "amount", "type": { "kind": "integer", "sign": "unsigned", "width": 64 }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379] }, "bytecode": "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", "debug_symbols": "" }, { "name": "compute_note_hash_and_nullifier", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "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", "debug_symbols": "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" }, { "name": "_check_deadline", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238] }, "bytecode": "", "debug_symbols": "" }], "events": [{ "name": "WithdrawalProcessed", "path": "Crowdfunding::WithdrawalProcessed", "fields": [{ "name": "who", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "amount", "type": { "kind": "integer", "sign": "unsigned", "width": 64 } }] }], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n", "path": "std/collections/bounded_vec.nr" }, "19": { "source": "// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n    let borrow = lt_unsafe(PLO, xlo, 16);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Check that (xlo < plo && xhi <= phi) || (xlo >= plo && xhi < phi)\n    let rlo = PLO - xlo + (borrow as Field) * TWO_POW_128;\n    let rhi = PHI - xhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let (alo, ahi) = decompose(a);\n    let (blo, bhi) = decompose(b);\n\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    // Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n", "path": "std/field/bn254.nr" }, "20": { "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n", "path": "std/field.nr" }, "30": { "source": "mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\n// TODO: add implementations for the remainder of primitive types.\nimpl Hash for Field{\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        let input: [Field] = [self];\n        H::write(state, input);\n    }\n}\n", "path": "std/hash.nr" }, "33": { "source": "// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n", "path": "std/merkle.nr" }, "35": { "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n", "path": "std/option.nr" }, "62": { "source": "use dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateSet<T> {}\n\nimpl<Note> PrivateSet<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(self.context.public.unwrap(), self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n\n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(\n            false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(\n            false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.note_hash_read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>\n    ) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(self.context.private.unwrap(), storage_slot, options);\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr" }, "64": { "source": "use crate::{\n    context::Context, history::public_value_inclusion::prove_public_value_inclusion,\n    oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for SharedImmutable<T> {}\n\nimpl<T> SharedImmutable<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"SharedImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"SharedImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        // Read the value from storage (using the public tree)\n        let fields = storage_read(self.storage_slot);\n\n        // Loop over the fields and prove their inclusion in the public tree\n        for i in 0..fields.len() {\n            // TODO: Update membership proofs to use current header (Requires #4179)\n            // Currently executing unnecessary computation:\n            // - a membership proof of the value in the public tree of the header \n            prove_public_value_inclusion(\n                fields[i],\n                self.storage_slot + i as Field,\n                (*private_context).this_address(),\n                (*private_context)\n            )\n        }\n        T::deserialize(fields)\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr" }, "65": { "source": "use crate::{context::Context, oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T> Storage<T> for PublicImmutable<T> {}\n\nimpl<T> PublicImmutable<T> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"PublicImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"PublicImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicImmutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_immutable_struct_read\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr" }, "70": { "source": "use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::{AztecAddress},\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::{get_public_data_witness}};\n\nfn _public_value_inclusion(\n    value: Field,\n    storage_slot: Field,\n    contract_address: AztecAddress,\n    header: Header\n) {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 3) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 4) Check that the witness matches the corresponding public_value\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    if is_in_range {\n        assert_eq(value, 0, \"Non-existant public data leaf value is non-zero\");\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot don't match witness\");\n        assert_eq(preimage.value, value, \"Public value does not match the witness\");\n    }\n\n    // 5) Prove that the leaf we validated is in the public data tree\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and that way verified that a specific\n    // `value` was really set in a given contract storage slot at block `block_number` in public data tree.\n}\n\npub fn prove_public_value_inclusion(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    context: PrivateContext\n) {\n    _public_value_inclusion(\n        value,\n        storage_slot,\n        contract_address,\n        context.historical_header\n    );\n}\n\npub fn prove_public_value_inclusion_at(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32, // The block at which we'll prove that the note exists\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _public_value_inclusion(value, storage_slot, contract_address, header);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/history/public_value_inclusion.nr" }, "71": { "source": "use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::{PrivateContext, ContextInterface},\n    oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion<TContext>(\n    nullifier: Field,\n    context: TContext\n) where TContext: ContextInterface {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr" }, "77": { "source": "use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "82": { "source": "use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "85": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/log.nr" }, "87": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "90": { "source": "use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr" }, "91": { "source": "use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr" }, "93": { "source": "use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr" }, "94": { "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr" }, "95": { "source": "#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/rand.nr" }, "98": { "source": "use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr" }, "99": { "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr" }, "100": { "source": "use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr" }, "103": { "source": "use dep::protocol_types::{address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr" }, "104": { "source": "use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr" }, "106": { "source": "use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr" }, "107": { "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr" }, "110": { "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context.nr" }, "114": { "source": "use dep::protocol_types::{\n    hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    history::nullifier_inclusion::prove_nullifier_inclusion,\n};\n\npub fn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(*context);\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_contract_initialization_nullifier(*context);\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\npub fn compute_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    let address = context.this_address();\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(context)\n    )\n}\n\npub fn compute_unsiloed_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    context.this_address().to_field()\n}\n\npub fn assert_initialization_args_match_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address(); \n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash([init_selector.to_field(), init_args_hash], GENERATOR_INDEX__CONSTRUCTOR)\n}", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr" }, "118": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr" }, "121": { "source": "use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed private data tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr" }, "130": { "source": "use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{\n    GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH,\n    CONTENT_COMMITMENT_LENGTH\n},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr" }, "131": { "source": "pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr" }, "132": { "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr" }, "144": { "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr" }, "145": { "source": "use crate::{\n    address::eth_address::EthAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash,\n    traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr" }, "146": { "source": "use crate::{\n    address::{eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr" }, "147": { "source": "use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl Eq for PublicKeysHash {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    assert(actual.to_field() == 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/public_keys_hash.nr" }, "148": { "source": "use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address\n    );\n\n    assert(address.to_field() == 0x2fd71a4f0742364f194dd16d0ae32d2f47845ddc7f5d328f37d4148b565c4123);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    assert(address.to_field() == 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr" }, "150": { "source": "use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr" }, "153": { "source": "use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr" }, "155": { "source": "use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr" }, "163": { "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr" }, "167": { "source": "use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr" }, "168": { "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr" }, "182": { "source": "use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x19196a5f02621a64ce289fb09fada7fd650a6874cb63e7d10c0d9a9bf5a366f5;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr" }, "183": { "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0xedd2f10c0cdf776ee2fff3c799bae6df5771f5013a2d5d7154601dffdcf869;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x1cec0b51f9394405a626c3b77081c96f1bdcb8bacf96960ae4749068f9b4da0d;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr" }, "185": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr" }, "188": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr" }, "191": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr" }, "192": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    read_request::ReadRequest, side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    min_revertible_side_effect_counter: u32,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x2b5ba01a6b73b68b4f44196e2dea49afd4076333e2dee8eddc9186e080f18201;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr" }, "193": { "source": "use crate::{\n    address::AztecAddress, constants::{GENERATOR_INDEX__SIDE_EFFECT},\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr" }, "194": { "source": "global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr" }, "196": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr" }, "197": { "source": "use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr" }, "198": { "source": "use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<1> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<1> for U128 {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr" }, "199": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::FunctionLeafPreimage;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr" }, "200": { "source": "use crate::{\n    constants::{NUM_FIELDS_PER_SHA256, CONTENT_COMMITMENT_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::{arr_copy_slice}\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: [Field; NUM_FIELDS_PER_SHA256],\n  in_hash: [Field; NUM_FIELDS_PER_SHA256],\n  out_hash: [Field; NUM_FIELDS_PER_SHA256],\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array([self.tx_tree_height]);\n    fields.extend_from_array(self.txs_effects_hash);\n    fields.extend_from_array(self.in_hash);\n    fields.extend_from_array(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n    let mut offset = 1;\n\n    let txs_effects_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let in_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let out_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: [0; NUM_FIELDS_PER_SHA256],\n      in_hash: [0; NUM_FIELDS_PER_SHA256],\n      out_hash: [0; NUM_FIELDS_PER_SHA256],\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr" }, "202": { "source": "global ARGS_LENGTH: u64 = 16;\nglobal RETURN_VALUES_LENGTH: u64 = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_NOTE_HASHES_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as note hashes and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_NOTE_HASHES_PER_TX ≥ MAX_NEW_NOTE_HASHES_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_CALL: u64 = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: u64 = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: u64 = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: u64 = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: u64 = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: u64 = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: u64 = 16;\nglobal MAX_NOTE_HASH_READ_REQUESTS_PER_CALL: u64 = 32;\nglobal MAX_NULLIFIER_READ_REQUESTS_PER_CALL: u64 = 2; // Change it to a larger value when there's a seperate reset circuit.\nglobal MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL: u64 = 2;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: u64 = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_TX: u64 = 64;\nglobal MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX: u64 = 8;\nglobal MAX_REVERTIBLE_NOTE_HASHES_PER_TX: u64 = 56;\n\nglobal MAX_NEW_NULLIFIERS_PER_TX: u64 = 64;\nglobal MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX: u64 = 8;\nglobal MAX_REVERTIBLE_NULLIFIERS_PER_TX: u64 = 56;\n\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: u64 = 8;\n\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 8;\nglobal MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 3;\nglobal MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: u64 = 5;\n\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u64 = 16;\n\nglobal MAX_PUBLIC_DATA_READS_PER_TX: u64 = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: u64 = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: u64 = 16;\n\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: u64 = 2;\nglobal MAX_NOTE_HASH_READ_REQUESTS_PER_TX: u64 = 128;\nglobal MAX_NULLIFIER_READ_REQUESTS_PER_TX: u64 = 8; // Change it to a larger value when there's a seperate reset circuit.\nglobal MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX: u64 = 8;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: u64 = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: u64 = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: u64 = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: u64 = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: u64 = 3;\nglobal FUNCTION_TREE_HEIGHT: u64 = 5;\nglobal NOTE_HASH_TREE_HEIGHT: u64 = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: u64 = 40;\nglobal NULLIFIER_TREE_HEIGHT: u64 = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: u64 = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: u64 = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\nglobal NULLIFIER_TREE_ID = 0;\nglobal NOTE_HASH_TREE_ID = 1;\nglobal PUBLIC_DATA_TREE_ID = 2;\nglobal L1_TO_L2_MESSAGE_TREE_ID = 3;\nglobal ARCHIVE_TREE_ID = 4;\n\n// SUB-TREES RELATED CONSTANTS\nglobal NOTE_HASH_SUBTREE_HEIGHT: u64 = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: u64 = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: u64 = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: u64 = 5;\nglobal ARCHIVE_HEIGHT: u64 = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: u64 = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: u64 = 35;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: u64 = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: u64 = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: u64 = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u64 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u64 = 32;\n// The following is used in immutable state variables to compute an initialization slot whose value is used to\n// determine whether a given variable has been initialized (by asserting that the value in the slot is 0).\n// The initialization slot is computed by adding the constant bellow to the variable's storage slot. This constant has\n// to be large enough so that it's ensured that it doesn't collide with storage slots of other variables.\nglobal INITIALIZATION_SLOT_SEPARATOR: Field = 1000_000_000;\nglobal INITIAL_L2_BLOCK_NUM: Field = 1;\n// 126976 = 31 * 4096;\nglobal BLOB_SIZE_IN_BYTES: Field = 126976;\n\n// CONTRACT CLASS CONSTANTS\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: u64 = 15000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: u64 = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: u64 = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\nglobal DEPLOYER_CONTRACT_ADDRESS = 0x0bffa876f07f9fe1802579dfef599810202f9c25b9a2f58921064a267d1ad1d3;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: u64 = 17;\nglobal MAX_NOTE_FIELDS_LENGTH: u64 = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: u64 = 23;\nglobal MAX_NOTES_PER_PAGE: u64 = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: u64 = 212;\n\n// LENGTH OF STRUCTS SERIALIZED TO FIELDS\nglobal AZTEC_ADDRESS_LENGTH = 1;\nglobal CALL_CONTEXT_LENGTH: u64 = 7;\nglobal CONTENT_COMMITMENT_LENGTH: u64 = 7;\nglobal CONTRACT_INSTANCE_LENGTH: u64 = 6;\nglobal CONTRACT_STORAGE_READ_LENGTH: u64 = 2;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: u64 = 2;\nglobal ETH_ADDRESS_LENGTH = 1;\nglobal FUNCTION_DATA_LENGTH: u64 = 4;\nglobal FUNCTION_LEAF_PREIMAGE_LENGTH: u64 = 5;\nglobal GLOBAL_VARIABLES_LENGTH: u64 = 6;\nglobal HEADER_LENGTH: u64 = 23; // 2 for last_archive, 7 for content commitment, 8 for state reference, 6 for global vars\nglobal L1_TO_L2_MESSAGE_LENGTH: u64 = 8;\nglobal L2_TO_L1_MESSAGE_LENGTH: u64 = 2;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH = 5;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: u64 = 6;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: u64 = 215;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: u64 = 210;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: u64 = 202;\nglobal STATE_REFERENCE_LENGTH: u64 = 8; // 2 for snap + 8 for partial\nglobal TX_CONTEXT_DATA_LENGTH: u64 = 4;\nglobal TX_REQUEST_LENGTH: u64 = 10;\n\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH: Field = 13; // 2 + FUNCTION_DATA_LENGTH + CALL_CONTEXT_LENGTH\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: u64 = 674;\nglobal NOTE_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal NUM_MSGS_PER_BASE_PARITY: u64 = 4;\n// NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP / NUM_MSGS_PER_BASE_PARITY\nglobal NUM_BASE_PARITY_PER_ROOT_PARITY: u64 = 4;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__NOTE_HASH = 1;\nglobal GENERATOR_INDEX__NOTE_HASH_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_NOTE_HASH = 3;\nglobal GENERATOR_INDEX__SILOED_NOTE_HASH = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\nglobal GENERATOR_INDEX__FEE_PAYLOAD = 30;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\nglobal GENERATOR_INDEX__AUTHWIT_INNER = 45;\nglobal GENERATOR_INDEX__AUTHWIT_OUTER = 46;\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/constants.nr" }, "208": { "source": "use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr" }, "209": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr" }, "210": { "source": "use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr" }, "225": { "source": "use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address\n            )\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr" }, "239": { "source": "use dep::aztec::{\n    protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::{rand::rand, nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    log::emit_encrypted_log, hash::pedersen_hash, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN> for ValueNote {\n    fn serialize_content(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner.to_field(), self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: AztecAddress::from_field(serialized_note[1]),\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(),0)\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'ValueNote')))\"\n        869710811710178111116101\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.owner.to_field(), self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr" }, "259": { "source": "use dep::aztec::protocol_types::{abis::function_selector::FunctionSelector, address::{AztecAddress, EthAddress}};\nuse dep::aztec::{context::{PrivateContext, PublicContext}};\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn transfer(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ret = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/crowdfunding_contract/src/interfaces.nr" }, "260": { "source": "contract Crowdfunding {\n    mod interfaces;\n\n    use dep::aztec::{\n        log::emit_unencrypted_log_from_private,\n        protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, traits::Serialize},\n        state_vars::{PrivateSet, PublicImmutable, SharedImmutable}\n    };\n    use dep::value_note::value_note::ValueNote;\n    use interfaces::Token;\n\n    #[event]\n    struct WithdrawalProcessed {\n        who: AztecAddress,\n        amount: u64,\n    }\n\n    impl Serialize<2> for WithdrawalProcessed {\n        fn serialize(self: Self) -> [Field; 2] {\n            [self.who.to_field(), self.amount as Field]\n        }\n    }\n\n    struct Storage {\n        // Token used for donations (e.g. DAI)\n        donation_token: SharedImmutable<AztecAddress>,\n        // Crowdfunding campaign operator\n        operator: SharedImmutable<AztecAddress>,\n        // End of the crowdfunding campaign after which no more donations are accepted\n        // TODO(#4990): Make deadline a u64 once the neccessary traits are implemented\n        deadline: PublicImmutable<Field>,\n        // Notes emitted to donors when they donate (later on used to claim rewards in the Claim contract)\n        claim_notes: PrivateSet<ValueNote>,\n    }\n\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(donation_token: AztecAddress, operator: AztecAddress, deadline: u64) {\n        // TODO(#4990): Make deadline a u64 once the neccessary traits are implemented\n        storage.donation_token.initialize(donation_token);\n        storage.operator.initialize(operator);\n        storage.deadline.initialize(deadline as Field);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _check_deadline() {\n        // TODO(#4990): Remove the cast here once u64 is used directly\n        let deadline = storage.deadline.read() as u64;\n        assert(context.timestamp() as u64 < deadline, \"Deadline has passed\");\n    }\n\n    #[aztec(private)]\n    fn donate(amount: u64) {\n        // 1) Check that the deadline has not passed\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_check_deadline()\"),\n            []\n        );\n\n        // 2) Transfer the donation tokens from donor to this contract\n        let donation_token = Token::at(storage.donation_token.read_private());\n        donation_token.transfer(\n            &mut context,\n            context.msg_sender(),\n            context.this_address(),\n            amount as Field,\n            0\n        );\n\n        // 3) Create a value note for the donor so that he can later on claim a rewards token in the Claim\n        // contract by proving that the hash of this note exists in the note hash tree.\n        let mut note = ValueNote::new(amount as Field, context.msg_sender());\n        storage.claim_notes.insert(&mut note, true);\n    }\n\n    // Withdraws balance to the operator. Requires that msg_sender() is the operator.\n    #[aztec(private)]\n    fn withdraw(amount: u64) {\n        // 1) Check that msg_sender() is the operator\n        let operator_address = storage.operator.read_private();\n        assert(context.msg_sender() == operator_address, \"Not an operator\");\n\n        // 2) Transfer the donation tokens from this contract to the operator\n        let donation_token = Token::at(storage.donation_token.read_private());\n        donation_token.transfer(\n            &mut context,\n            context.this_address(),\n            operator_address,\n            amount as Field,\n            0\n        );\n\n        // 3) Emit an unencrypted event so that anyone can audit how much the operator has withdrawn\n        let event = WithdrawalProcessed { amount, who: operator_address };\n        emit_unencrypted_log_from_private(&mut context, event.serialize());\n    }\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/crowdfunding_contract/src/main.nr" } } }
