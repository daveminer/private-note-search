import { AztecAddress, AztecAddressLike, ContractArtifact, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, PublicKey, Wallet } from '@aztec/aztec.js';
export declare const ClaimContractArtifact: ContractArtifact;
/**
 * Type-safe interface for contract Claim;
 */
export declare class ClaimContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(address: AztecAddress, wallet: Wallet): Promise<ClaimContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet: Wallet, target_contract: AztecAddressLike, reward_token: AztecAddressLike): DeployMethod<ClaimContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, target_contract: AztecAddressLike, reward_token: AztecAddressLike): DeployMethod<ClaimContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts<M extends keyof ClaimContract['methods']>(opts: {
        publicKey?: PublicKey;
        method?: M;
        wallet: Wallet;
    }, ...args: Parameters<ClaimContract['methods'][M]>): DeployMethod<ClaimContract>;
    /**
     * Returns this contract's artifact.
     */
    static get artifact(): ContractArtifact;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** claim(proof_note: struct) */
        claim: ((proof_note: {
            value: FieldLike;
            owner: AztecAddressLike;
            randomness: FieldLike;
            header: {
                contract_address: AztecAddressLike;
                nonce: FieldLike;
                storage_slot: FieldLike;
                is_transient: boolean;
            };
        }) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** constructor(target_contract: struct, reward_token: struct) */
        constructor: ((target_contract: AztecAddressLike, reward_token: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, serialized_note: array) */
        compute_note_hash_and_nullifier: ((contract_address: AztecAddressLike, nonce: FieldLike, storage_slot: FieldLike, note_type_id: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
//# sourceMappingURL=Claim.d.ts.map