/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import ClaimContractArtifactJson from '../artifacts/claim_contract-Claim.json' assert { type: 'json' };

export const ClaimContractArtifact = loadContractArtifact(ClaimContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract Claim;
 */
export class ClaimContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, ClaimContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, ClaimContract.artifact, wallet) as Promise<ClaimContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, target_contract: AztecAddressLike, reward_token: AztecAddressLike) {
    return new DeployMethod<ClaimContract>(
      Point.ZERO,
      wallet,
      ClaimContractArtifact,
      ClaimContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(
    publicKey: PublicKey,
    wallet: Wallet,
    target_contract: AztecAddressLike,
    reward_token: AztecAddressLike,
  ) {
    return new DeployMethod<ClaimContract>(
      publicKey,
      wallet,
      ClaimContractArtifact,
      ClaimContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof ClaimContract['methods']>(
    opts: { publicKey?: PublicKey; method?: M; wallet: Wallet },
    ...args: Parameters<ClaimContract['methods'][M]>
  ) {
    return new DeployMethod<ClaimContract>(
      opts.publicKey ?? Point.ZERO,
      opts.wallet,
      ClaimContractArtifact,
      ClaimContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return ClaimContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** claim(proof_note: struct) */
    claim: ((proof_note: {
      value: FieldLike;
      owner: AztecAddressLike;
      randomness: FieldLike;
      header: { contract_address: AztecAddressLike; nonce: FieldLike; storage_slot: FieldLike; is_transient: boolean };
    }) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** constructor(target_contract: struct, reward_token: struct) */
    constructor: ((target_contract: AztecAddressLike, reward_token: AztecAddressLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      note_type_id: FieldLike,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
