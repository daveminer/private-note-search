/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import CrowdfundingContractArtifactJson from '../artifacts/crowdfunding_contract-Crowdfunding.json' assert { type: 'json' };

export const CrowdfundingContractArtifact = loadContractArtifact(
  CrowdfundingContractArtifactJson as NoirCompiledContract,
);

/**
 * Type-safe interface for contract Crowdfunding;
 */
export class CrowdfundingContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, CrowdfundingContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, CrowdfundingContract.artifact, wallet) as Promise<CrowdfundingContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(
    wallet: Wallet,
    donation_token: AztecAddressLike,
    operator: AztecAddressLike,
    deadline: bigint | number,
  ) {
    return new DeployMethod<CrowdfundingContract>(
      Point.ZERO,
      wallet,
      CrowdfundingContractArtifact,
      CrowdfundingContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(
    publicKey: PublicKey,
    wallet: Wallet,
    donation_token: AztecAddressLike,
    operator: AztecAddressLike,
    deadline: bigint | number,
  ) {
    return new DeployMethod<CrowdfundingContract>(
      publicKey,
      wallet,
      CrowdfundingContractArtifact,
      CrowdfundingContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof CrowdfundingContract['methods']>(
    opts: { publicKey?: PublicKey; method?: M; wallet: Wallet },
    ...args: Parameters<CrowdfundingContract['methods'][M]>
  ) {
    return new DeployMethod<CrowdfundingContract>(
      opts.publicKey ?? Point.ZERO,
      opts.wallet,
      CrowdfundingContractArtifact,
      CrowdfundingContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return CrowdfundingContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** constructor(donation_token: struct, operator: struct, deadline: integer) */
    constructor: ((
      donation_token: AztecAddressLike,
      operator: AztecAddressLike,
      deadline: bigint | number,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** donate(amount: integer) */
    donate: ((amount: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** withdraw(amount: integer) */
    withdraw: ((amount: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      note_type_id: FieldLike,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
