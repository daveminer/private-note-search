// Define these utils here as their design is very specific to kernel's accumulated data and not general enough to be put in foundation.
// Returns number of non-empty items in an array.
export function countAccumulatedItems(arr) {
    return arr.reduce((num, item, i) => {
        if (!item.isEmpty()) {
            if (num !== i) {
                throw new Error('Non-empty items must be placed continuously from index 0.');
            }
            return num + 1;
        }
        return num;
    }, 0);
}
// Merges two arrays of length N into an array of length N.
export function mergeAccumulatedData(_length, arr0, arr1) {
    const numNonEmptyItems0 = countAccumulatedItems(arr0);
    const numNonEmptyItems1 = countAccumulatedItems(arr1);
    if (numNonEmptyItems0 + numNonEmptyItems1 > arr0.length) {
        throw new Error('Combined non-empty items exceeded the maximum allowed.');
    }
    const arr = [...arr0];
    arr1.slice(0, numNonEmptyItems1).forEach((item, i) => (arr[i + numNonEmptyItems0] = item));
    return arr;
}
// Combines an array of length N and an array of length M into an array of length N + M.
// All non-empty items are aggregated continuously from index 0.
export function concatAccumulatedData(length, arr0, arr1) {
    const combinedLength = arr0.length + arr1.length;
    if (combinedLength !== length) {
        throw new Error(`Provided length does not match combined length. Expected ${combinedLength}. Got ${length}.`);
    }
    const numNonEmptyItems0 = countAccumulatedItems(arr0);
    const numNonEmptyItems1 = countAccumulatedItems(arr1);
    const arr = [...arr0, ...arr1];
    if (numNonEmptyItems0 < arr0.length) {
        const emptyItem = arr0[numNonEmptyItems0];
        arr1.slice(0, numNonEmptyItems1).forEach((item, i) => {
            arr[i + numNonEmptyItems0] = item;
            arr[arr0.length + i] = emptyItem;
        });
    }
    return arr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGludHMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsd0lBQXdJO0FBRXhJLGlEQUFpRDtBQUNqRCxNQUFNLFVBQVUscUJBQXFCLENBQW9CLEdBQVE7SUFDL0QsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDcEIsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFDO1lBQy9FLENBQUM7WUFDRCxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDakIsQ0FBQztRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQ0FBQztBQUVELDJEQUEyRDtBQUMzRCxNQUFNLFVBQVUsb0JBQW9CLENBQ2xDLE9BQVUsRUFDVixJQUFpQixFQUNqQixJQUFpQjtJQUVqQixNQUFNLGlCQUFpQixHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RELE1BQU0saUJBQWlCLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEQsSUFBSSxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDeEQsTUFBTSxJQUFJLEtBQUssQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFnQixDQUFDO0lBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzRixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCx3RkFBd0Y7QUFDeEYsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxxQkFBcUIsQ0FDbkMsTUFBVSxFQUNWLElBQWlCLEVBQ2pCLElBQWlCO0lBRWpCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNqRCxJQUFJLGNBQWMsS0FBSyxNQUFNLEVBQUUsQ0FBQztRQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLDREQUE0RCxjQUFjLFNBQVMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNoSCxDQUFDO0lBRUQsTUFBTSxpQkFBaUIsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxNQUFNLGlCQUFpQixHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RELE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQWlCLENBQUM7SUFDL0MsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDcEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkQsR0FBRyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIn0=