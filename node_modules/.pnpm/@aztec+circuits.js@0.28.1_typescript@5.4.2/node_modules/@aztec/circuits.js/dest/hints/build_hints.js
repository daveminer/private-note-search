import { padArrayEnd } from '@aztec/foundation/collection';
import { MAX_NEW_NULLIFIERS_PER_TX, } from '../constants.gen.js';
import { siloNullifier } from '../hash/index.js';
import { NullifierNonExistentReadRequestHintsBuilder } from '../structs/non_existent_read_request_hints.js';
import { NullifierReadRequestHintsBuilder } from '../structs/read_request_hints.js';
import { SideEffectLinkedToNoteHash } from '../structs/side_effects.js';
import { countAccumulatedItems } from './utils.js';
export async function buildNullifierReadRequestHints(oracle, nullifierReadRequests, nullifiers) {
    const builder = new NullifierReadRequestHintsBuilder();
    const numReadRequests = countAccumulatedItems(nullifierReadRequests);
    const nullifierIndexMap = new Map();
    nullifiers.forEach((n, i) => nullifierIndexMap.set(n.value.toBigInt(), i));
    for (let i = 0; i < numReadRequests; ++i) {
        const readRequest = nullifierReadRequests[i];
        // TODO - Should be comparing un-siloed values and contract addresses.
        const value = siloNullifier(readRequest.contractAddress, readRequest.value);
        const pendingValueIndex = nullifierIndexMap.get(value.toBigInt());
        if (pendingValueIndex !== undefined) {
            builder.addPendingReadRequest(i, pendingValueIndex);
        }
        else {
            const membershipWitnessWithPreimage = await oracle.getNullifierMembershipWitness(value);
            if (!membershipWitnessWithPreimage) {
                throw new Error('Read request is reading an unknown nullifier value.');
            }
            builder.addSettledReadRequest(i, membershipWitnessWithPreimage.membershipWitness, membershipWitnessWithPreimage.leafPreimage);
        }
    }
    return builder.toHints();
}
function sortNullifiersByValues(nullifiers) {
    const numNullifiers = countAccumulatedItems(nullifiers);
    const sorted = nullifiers
        .slice(0, numNullifiers)
        .map((nullifier, originalIndex) => ({ nullifier, originalIndex }))
        .sort((a, b) => (b.nullifier.value.lt(a.nullifier.value) ? 1 : -1));
    const sortedIndexHints = [];
    for (let i = 0; i < numNullifiers; ++i) {
        sortedIndexHints[sorted[i].originalIndex] = i;
    }
    return {
        sortedValues: padArrayEnd(sorted.map(s => s.nullifier), SideEffectLinkedToNoteHash.empty(), MAX_NEW_NULLIFIERS_PER_TX),
        sortedIndexHints: padArrayEnd(sortedIndexHints, 0, MAX_NEW_NULLIFIERS_PER_TX),
    };
}
export async function buildNullifierNonExistentReadRequestHints(oracle, nullifierNonExistentReadRequests, pendingNullifiers) {
    const { sortedValues, sortedIndexHints } = sortNullifiersByValues(pendingNullifiers);
    const builder = new NullifierNonExistentReadRequestHintsBuilder(sortedValues, sortedIndexHints);
    const numPendingNullifiers = countAccumulatedItems(pendingNullifiers);
    const numReadRequests = countAccumulatedItems(nullifierNonExistentReadRequests);
    for (let i = 0; i < numReadRequests; ++i) {
        const readRequest = nullifierNonExistentReadRequests[i];
        const siloedValue = siloNullifier(readRequest.contractAddress, readRequest.value);
        const { membershipWitness, leafPreimage } = await oracle.getLowNullifierMembershipWitness(siloedValue);
        let nextPendingValueIndex = sortedValues.findIndex(v => !v.value.lt(siloedValue));
        if (nextPendingValueIndex == -1) {
            nextPendingValueIndex = numPendingNullifiers;
        }
        else if (sortedValues[nextPendingValueIndex].value.equals(siloedValue)) {
            throw new Error('Nullifier exists in the pending set.');
        }
        builder.addHint(membershipWitness, leafPreimage, nextPendingValueIndex);
    }
    return builder.toHints();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRfaGludHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGludHMvYnVpbGRfaGludHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBSzNELE9BQU8sRUFDTCx5QkFBeUIsR0FJMUIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsT0FBTyxFQUFFLDJDQUEyQyxFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFFNUcsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBT25ELE1BQU0sQ0FBQyxLQUFLLFVBQVUsOEJBQThCLENBQ2xELE1BRUMsRUFDRCxxQkFBMkYsRUFDM0YsVUFBK0U7SUFFL0UsTUFBTSxPQUFPLEdBQUcsSUFBSSxnQ0FBZ0MsRUFBRSxDQUFDO0lBRXZELE1BQU0sZUFBZSxHQUFHLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFFckUsTUFBTSxpQkFBaUIsR0FBd0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUN6RCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDekMsTUFBTSxXQUFXLEdBQUcscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0Msc0VBQXNFO1FBQ3RFLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU1RSxNQUFNLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNsRSxJQUFJLGlCQUFpQixLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3BDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUN0RCxDQUFDO2FBQU0sQ0FBQztZQUNOLE1BQU0sNkJBQTZCLEdBQUcsTUFBTSxNQUFNLENBQUMsNkJBQTZCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEYsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUM7Z0JBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztZQUN6RSxDQUFDO1lBRUQsT0FBTyxDQUFDLHFCQUFxQixDQUMzQixDQUFDLEVBQ0QsNkJBQTZCLENBQUMsaUJBQWlCLEVBQy9DLDZCQUE2QixDQUFDLFlBQVksQ0FDM0MsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDM0IsQ0FBQztBQU9ELFNBQVMsc0JBQXNCLENBQzdCLFVBQStFO0lBRS9FLE1BQU0sYUFBYSxHQUFHLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sTUFBTSxHQUFHLFVBQVU7U0FDdEIsS0FBSyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUM7U0FDdkIsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1NBQ2pFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRFLE1BQU0sZ0JBQWdCLEdBQWEsRUFBRSxDQUFDO0lBQ3RDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN2QyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxPQUFPO1FBQ0wsWUFBWSxFQUFFLFdBQVcsQ0FDdkIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFDNUIsMEJBQTBCLENBQUMsS0FBSyxFQUFFLEVBQ2xDLHlCQUF5QixDQUMxQjtRQUNELGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUseUJBQXlCLENBQUM7S0FDOUUsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLHlDQUF5QyxDQUM3RCxNQUVDLEVBQ0QsZ0NBQW1ILEVBQ25ILGlCQUFzRjtJQUV0RixNQUFNLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVyRixNQUFNLE9BQU8sR0FBRyxJQUFJLDJDQUEyQyxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWhHLE1BQU0sb0JBQW9CLEdBQUcscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN0RSxNQUFNLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ2hGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxlQUFlLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN6QyxNQUFNLFdBQVcsR0FBRyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbEYsTUFBTSxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLGdDQUFnQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXZHLElBQUkscUJBQXFCLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNsRixJQUFJLHFCQUFxQixJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDaEMscUJBQXFCLEdBQUcsb0JBQW9CLENBQUM7UUFDL0MsQ0FBQzthQUFNLElBQUksWUFBWSxDQUFDLHFCQUFxQixDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQ3pFLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBRUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDM0IsQ0FBQyJ9