import { FunctionSelector, FunctionType } from '@aztec/foundation/abi';
import { Fr } from '@aztec/foundation/fields';
import { computeArtifactHash } from './artifact_hash.js';
import { computeContractClassIdWithPreimage } from './contract_class_id.js';
import { packBytecode } from './public_bytecode.js';
const cmpFunctionArtifacts = (a, b) => a.selector.toField().cmp(b.selector.toField());
/** Creates a ContractClass from a contract compilation artifact. */
export function getContractClassFromArtifact(artifact) {
    const artifactHash = 'artifactHash' in artifact ? artifact.artifactHash : computeArtifactHash(artifact);
    const publicFunctions = artifact.functions
        .filter(f => f.functionType === FunctionType.OPEN)
        .map(f => ({
        selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
        bytecode: Buffer.from(f.bytecode, 'base64'),
        isInternal: f.isInternal,
    }))
        .sort(cmpFunctionArtifacts);
    const packedBytecode = packBytecode(publicFunctions);
    const privateFunctions = artifact.functions
        .filter(f => f.functionType === FunctionType.SECRET)
        .map(f => ({
        selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
        vkHash: getVerificationKeyHash(f.verificationKey),
        isInternal: f.isInternal,
    }))
        .sort(cmpFunctionArtifacts);
    const contractClass = {
        version: 1,
        artifactHash,
        publicFunctions,
        packedBytecode,
        privateFunctions,
    };
    return { ...contractClass, ...computeContractClassIdWithPreimage(contractClass) };
}
/**
 * Calculates the hash of a verification key.
 * Returns zero for consistency with Noir.
 */
function getVerificationKeyHash(_verificationKeyInBase64) {
    // return Fr.fromBuffer(hashVKStr(verificationKeyInBase64));
    return Fr.ZERO;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfY2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3RfY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQixnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RixPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHOUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUEyQixrQ0FBa0MsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3JHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUtwRCxNQUFNLG9CQUFvQixHQUFHLENBQTJDLENBQUksRUFBRSxDQUFJLEVBQUUsRUFBRSxDQUNwRixDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFakQsb0VBQW9FO0FBQ3BFLE1BQU0sVUFBVSw0QkFBNEIsQ0FDMUMsUUFBcUQ7SUFFckQsTUFBTSxZQUFZLEdBQUcsY0FBYyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEcsTUFBTSxlQUFlLEdBQXFDLFFBQVEsQ0FBQyxTQUFTO1NBQ3pFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLEtBQUssWUFBWSxDQUFDLElBQUksQ0FBQztTQUNqRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUN0RSxRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztRQUMzQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLFVBQVU7S0FDekIsQ0FBQyxDQUFDO1NBQ0YsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFFOUIsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXJELE1BQU0sZ0JBQWdCLEdBQXNDLFFBQVEsQ0FBQyxTQUFTO1NBQzNFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLEtBQUssWUFBWSxDQUFDLE1BQU0sQ0FBQztTQUNuRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUN0RSxNQUFNLEVBQUUsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLGVBQWdCLENBQUM7UUFDbEQsVUFBVSxFQUFFLENBQUMsQ0FBQyxVQUFVO0tBQ3pCLENBQUMsQ0FBQztTQUNGLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBRTlCLE1BQU0sYUFBYSxHQUFrQjtRQUNuQyxPQUFPLEVBQUUsQ0FBQztRQUNWLFlBQVk7UUFDWixlQUFlO1FBQ2YsY0FBYztRQUNkLGdCQUFnQjtLQUNqQixDQUFDO0lBQ0YsT0FBTyxFQUFFLEdBQUcsYUFBYSxFQUFFLEdBQUcsa0NBQWtDLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztBQUNwRixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxzQkFBc0IsQ0FBQyx3QkFBZ0M7SUFDOUQsNERBQTREO0lBQzVELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztBQUNqQixDQUFDIn0=