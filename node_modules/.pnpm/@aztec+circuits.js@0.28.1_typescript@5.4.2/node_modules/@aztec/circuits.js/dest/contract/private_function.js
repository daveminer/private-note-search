import { pedersenHash } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { FUNCTION_TREE_HEIGHT, GeneratorIndex } from '../constants.gen.js';
import { MerkleTreeCalculator } from '../merkle/merkle_tree_calculator.js';
// Memoize the merkle tree calculators to avoid re-computing the zero-hash for each level in each call
let privateFunctionTreeCalculator;
const PRIVATE_FUNCTION_SIZE = 2;
/** Returns a Merkle tree for the set of private functions in a contract. */
export function computePrivateFunctionsTree(fns) {
    return getPrivateFunctionTreeCalculator().computeTree(computePrivateFunctionLeaves(fns));
}
/** Returns the Merkle tree root for the set of private functions in a contract. */
export function computePrivateFunctionsRoot(fns) {
    return Fr.fromBuffer(getPrivateFunctionTreeCalculator().computeTreeRoot(computePrivateFunctionLeaves(fns)));
}
function computePrivateFunctionLeaves(fns) {
    const leaves = [...fns].sort((a, b) => a.selector.value - b.selector.value);
    return leaves.map(computePrivateFunctionLeaf);
}
/** Returns the leaf for a given private function. */
export function computePrivateFunctionLeaf(fn) {
    return pedersenHash([fn.selector, fn.vkHash].map(x => x.toBuffer()), GeneratorIndex.FUNCTION_LEAF).toBuffer();
}
function getPrivateFunctionTreeCalculator() {
    if (!privateFunctionTreeCalculator) {
        const functionTreeZeroLeaf = pedersenHash(new Array(PRIVATE_FUNCTION_SIZE).fill(Buffer.alloc(32))).toBuffer();
        privateFunctionTreeCalculator = new MerkleTreeCalculator(FUNCTION_TREE_HEIGHT, functionTreeZeroLeaf);
    }
    return privateFunctionTreeCalculator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9wcml2YXRlX2Z1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHOUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRTNFLHNHQUFzRztBQUN0RyxJQUFJLDZCQUErRCxDQUFDO0FBRXBFLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0FBRWhDLDRFQUE0RTtBQUM1RSxNQUFNLFVBQVUsMkJBQTJCLENBQUMsR0FBc0I7SUFDaEUsT0FBTyxnQ0FBZ0MsRUFBRSxDQUFDLFdBQVcsQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFFRCxtRkFBbUY7QUFDbkYsTUFBTSxVQUFVLDJCQUEyQixDQUFDLEdBQXNCO0lBQ2hFLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUcsQ0FBQztBQUVELFNBQVMsNEJBQTRCLENBQUMsR0FBc0I7SUFDMUQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUVELHFEQUFxRDtBQUNyRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsRUFBbUI7SUFDNUQsT0FBTyxZQUFZLENBQ2pCLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQy9DLGNBQWMsQ0FBQyxhQUFhLENBQzdCLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDZixDQUFDO0FBRUQsU0FBUyxnQ0FBZ0M7SUFDdkMsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUM7UUFDbkMsTUFBTSxvQkFBb0IsR0FBRyxZQUFZLENBQUMsSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUcsNkJBQTZCLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxvQkFBb0IsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7SUFDRCxPQUFPLDZCQUE2QixDQUFDO0FBQ3ZDLENBQUMifQ==