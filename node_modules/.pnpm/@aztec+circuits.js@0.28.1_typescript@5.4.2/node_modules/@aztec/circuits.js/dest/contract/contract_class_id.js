import { pedersenHash, sha256 } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { GeneratorIndex } from '../constants.gen.js';
import { computePrivateFunctionsRoot } from './private_function.js';
/**
 * Returns the id of a contract class computed as its hash.
 *
 * ```
 * version = 1
 * private_function_leaves = private_functions.map(fn => pedersen([fn.function_selector as Field, fn.vk_hash], GENERATOR__FUNCTION_LEAF))
 * private_functions_root = merkleize(private_function_leaves)
 * bytecode_commitment = calculate_commitment(packed_bytecode)
 * contract_class_id = pedersen([version, artifact_hash, private_functions_root, bytecode_commitment], GENERATOR__CLASS_IDENTIFIER)
 * ```
 * @param contractClass - Contract class.
 * @returns The identifier.
 */
export function computeContractClassId(contractClass) {
    return computeContractClassIdWithPreimage(contractClass).id;
}
/** Computes a contract class id and returns it along with its preimage. */
export function computeContractClassIdWithPreimage(contractClass) {
    const artifactHash = contractClass.artifactHash;
    const privateFunctionsRoot = 'privateFunctionsRoot' in contractClass
        ? contractClass.privateFunctionsRoot
        : computePrivateFunctionsRoot(contractClass.privateFunctions);
    const publicBytecodeCommitment = 'publicBytecodeCommitment' in contractClass
        ? contractClass.publicBytecodeCommitment
        : computePublicBytecodeCommitment(contractClass.packedBytecode);
    const id = pedersenHash([artifactHash.toBuffer(), privateFunctionsRoot.toBuffer(), publicBytecodeCommitment.toBuffer()], GeneratorIndex.CONTRACT_LEAF);
    return { id, artifactHash, privateFunctionsRoot, publicBytecodeCommitment };
}
/** Returns the preimage of a contract class id given a contract class. */
export function computeContractClassIdPreimage(contractClass) {
    const privateFunctionsRoot = computePrivateFunctionsRoot(contractClass.privateFunctions);
    const publicBytecodeCommitment = computePublicBytecodeCommitment(contractClass.packedBytecode);
    return { artifactHash: contractClass.artifactHash, privateFunctionsRoot, publicBytecodeCommitment };
}
// TODO(@spalladino): Replace with actual implementation
export function computePublicBytecodeCommitment(bytecode) {
    return Fr.fromBufferReduce(sha256(bytecode));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfY2xhc3NfaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3RfY2xhc3NfaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHOUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXBFOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxhQUFzRDtJQUMzRixPQUFPLGtDQUFrQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUM5RCxDQUFDO0FBRUQsMkVBQTJFO0FBQzNFLE1BQU0sVUFBVSxrQ0FBa0MsQ0FDaEQsYUFBc0Q7SUFFdEQsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQztJQUNoRCxNQUFNLG9CQUFvQixHQUN4QixzQkFBc0IsSUFBSSxhQUFhO1FBQ3JDLENBQUMsQ0FBQyxhQUFhLENBQUMsb0JBQW9CO1FBQ3BDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNsRSxNQUFNLHdCQUF3QixHQUM1QiwwQkFBMEIsSUFBSSxhQUFhO1FBQ3pDLENBQUMsQ0FBQyxhQUFhLENBQUMsd0JBQXdCO1FBQ3hDLENBQUMsQ0FBQywrQkFBK0IsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDcEUsTUFBTSxFQUFFLEdBQUcsWUFBWSxDQUNyQixDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFBRSxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUMvRixjQUFjLENBQUMsYUFBYSxDQUM3QixDQUFDO0lBQ0YsT0FBTyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQztBQUM5RSxDQUFDO0FBRUQsMEVBQTBFO0FBQzFFLE1BQU0sVUFBVSw4QkFBOEIsQ0FBQyxhQUE0QjtJQUN6RSxNQUFNLG9CQUFvQixHQUFHLDJCQUEyQixDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3pGLE1BQU0sd0JBQXdCLEdBQUcsK0JBQStCLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9GLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLFlBQVksRUFBRSxvQkFBb0IsRUFBRSx3QkFBd0IsRUFBRSxDQUFDO0FBQ3RHLENBQUM7QUFTRCx3REFBd0Q7QUFDeEQsTUFBTSxVQUFVLCtCQUErQixDQUFDLFFBQWdCO0lBQzlELE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQy9DLENBQUMifQ==