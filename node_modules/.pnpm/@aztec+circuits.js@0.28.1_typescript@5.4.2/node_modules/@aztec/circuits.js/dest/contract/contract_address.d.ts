import { FunctionAbi, FunctionSelector } from '@aztec/foundation/abi';
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { Fr } from '@aztec/foundation/fields';
import { ContractInstance } from '@aztec/types/contracts';
import { PublicKey } from '../types/public_key.js';
/**
 * Returns the deployment address for a given contract instance as defined on the [Yellow Paper](../../../../yellow-paper/docs/addresses-and-keys/specification.md).
 * ```
 * salted_initialization_hash = pedersen([salt, initialization_hash, portal_contract_address as Field], GENERATOR__SALTED_INITIALIZATION_HASH)
 * partial_address = pedersen([contract_class_id, salted_initialization_hash], GENERATOR__CONTRACT_PARTIAL_ADDRESS_V1)
 * address = pedersen([public_keys_hash, partial_address], GENERATOR__CONTRACT_ADDRESS_V1)
 * ```
 * @param instance - A contract instance for which to calculate the deployment address.
 */
export declare function computeContractAddressFromInstance(instance: ContractInstance | ({
    contractClassId: Fr;
    saltedInitializationHash: Fr;
} & Pick<ContractInstance, 'publicKeysHash'>)): AztecAddress;
/**
 * Computes the partial address defined as the hash of the contract class id and salted initialization hash.
 * @param instance - Contract instance for which to calculate the partial address.
 */
export declare function computePartialAddress(instance: Pick<ContractInstance, 'contractClassId' | 'initializationHash' | 'salt' | 'portalContractAddress'> | {
    contractClassId: Fr;
    saltedInitializationHash: Fr;
}): Fr;
/**
 * Computes the salted initialization hash for an address, defined as the hash of the salt, initialization hash, and portal address.
 * @param instance - Contract instance for which to compute the salted initialization hash.
 */
export declare function computeSaltedInitializationHash(instance: Pick<ContractInstance, 'initializationHash' | 'salt' | 'portalContractAddress'>): Fr;
/**
 * Computes a contract address from its partial address and the pubkeys hash.
 * @param args - The hash of the public keys or the plain public key to be hashed, along with the partial address.
 * @returns The partially constructed contract address.
 */
export declare function computeContractAddressFromPartial(args: ({
    publicKeyHash: Fr;
} | {
    publicKey: PublicKey;
}) & {
    partialAddress: Fr;
}): AztecAddress;
/**
 * Computes the hash of a set of public keys to be used for computing the deployment address of a contract.
 * @param publicKey - Single public key (for now!).
 * @returns The hash of the public keys.
 */
export declare function computePublicKeysHash(publicKey: PublicKey | undefined): Fr;
/**
 * Computes the initialization hash for an instance given its constructor function and arguments.
 * @param initFn - Constructor function or empty if no initialization is expected.
 * @param args - Unencoded arguments, will be encoded as fields according to the constructor function abi.
 * @returns The hash, or zero if no initialization function is provided.
 */
export declare function computeInitializationHash(initFn: FunctionAbi | undefined, args: any[]): Fr;
/**
 * Computes the initialization hash for an instance given its constructor function selector and encoded arguments.
 * @param initFn - Constructor function selector.
 * @param args - Encoded arguments.
 * @returns The hash.
 */
export declare function computeInitializationHashFromEncodedArgs(initFn: FunctionSelector, encodedArgs: Fr[]): Fr;
//# sourceMappingURL=contract_address.d.ts.map