import { BarretenbergSync, RawBuffer } from '@aztec/bb.js';
import { Buffer } from 'buffer';
/**
 * AES-128-CBC encryption/decryption.
 */
export class Aes128 {
    /**
     * Encrypt a buffer using AES-128-CBC.
     * @param data - Data to encrypt.
     * @param iv - AES initialization vector.
     * @param key - Key to encrypt with.
     * @returns Encrypted data.
     */
    encryptBufferCBC(data, iv, key) {
        const rawLength = data.length;
        const numPaddingBytes = rawLength % 16 != 0 ? 16 - (rawLength % 16) : 0;
        const paddingBuffer = Buffer.alloc(numPaddingBytes);
        // input num bytes needs to be a multiple of 16
        // node uses PKCS#7-Padding scheme, where padding byte value = the number of padding bytes
        if (numPaddingBytes != 0) {
            paddingBuffer.fill(numPaddingBytes);
        }
        const input = Buffer.concat([data, paddingBuffer]);
        const api = BarretenbergSync.getSingleton();
        return Buffer.from(api.aesEncryptBufferCbc(new RawBuffer(input), new RawBuffer(iv), new RawBuffer(key), input.length));
    }
    /**
     * Decrypt a buffer using AES-128-CBC.
     * @param data - Data to decrypt.
     * @param iv - AES initialization vector.
     * @param key - Key to decrypt with.
     * @returns Decrypted data.
     */
    decryptBufferCBC(data, iv, key) {
        const api = BarretenbergSync.getSingleton();
        return Buffer.from(api.aesDecryptBufferCbc(new RawBuffer(data), new RawBuffer(iv), new RawBuffer(key), data.length));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnL2NyeXB0by9hZXMxMjgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUzRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWhDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLE1BQU07SUFDakI7Ozs7OztPQU1HO0lBQ0ksZ0JBQWdCLENBQUMsSUFBZ0IsRUFBRSxFQUFjLEVBQUUsR0FBZTtRQUN2RSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzlCLE1BQU0sZUFBZSxHQUFHLFNBQVMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RSxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BELCtDQUErQztRQUMvQywwRkFBMEY7UUFDMUYsSUFBSSxlQUFlLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDekIsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQ0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBRW5ELE1BQU0sR0FBRyxHQUFHLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FDaEIsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FDbkcsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxnQkFBZ0IsQ0FBQyxJQUFnQixFQUFFLEVBQWMsRUFBRSxHQUFlO1FBQ3ZFLE1BQU0sR0FBRyxHQUFHLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FDaEIsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDakcsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9