import { pedersenHash } from '@aztec/foundation/crypto';
import { Fr, GrumpkinScalar } from '@aztec/foundation/fields';
import { Grumpkin } from '../barretenberg/crypto/grumpkin/index.js';
/**
 *  Derives the public key of a secret key.
 */
export function derivePublicKey(secretKey) {
    const grumpkin = new Grumpkin();
    return grumpkin.mul(grumpkin.generator(), secretKey);
}
/**
 * Derives a new secret key from a secret key and an index.
 */
function deriveSecretKey(secretKey, index) {
    // TODO: Temporary hack. Should replace it with a secure way to derive the secret key.
    // Match the way keys are derived in noir-protocol-circuits/crates/private_kernel_lib/src/common.nr
    const hash = pedersenHash([secretKey.high, secretKey.low, index].map(v => v.toBuffer()));
    return new GrumpkinScalar(hash.toBuffer());
}
/**
 * Computes the nullifier secret key from seed secret key.
 */
export function computeNullifierSecretKey(seedSecretKey) {
    return deriveSecretKey(seedSecretKey, new Fr(1));
}
/**
 * Computes the nullifier secret key for a contract.
 */
export function computeSiloedNullifierSecretKey(nullifierSecretKey, contractAddress) {
    return deriveSecretKey(nullifierSecretKey, contractAddress);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMva2V5cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUU5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFHcEU7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZUFBZSxDQUFDLFNBQTZCO0lBQzNELE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7SUFDaEMsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFTLGVBQWUsQ0FBQyxTQUE2QixFQUFFLEtBQVM7SUFDL0Qsc0ZBQXNGO0lBQ3RGLG1HQUFtRztJQUNuRyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6RixPQUFPLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxhQUFpQztJQUN6RSxPQUFPLGVBQWUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsK0JBQStCLENBQzdDLGtCQUFzQyxFQUN0QyxlQUE2QjtJQUU3QixPQUFPLGVBQWUsQ0FBQyxrQkFBa0IsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUM5RCxDQUFDIn0=