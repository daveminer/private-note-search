import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { FUNCTION_TREE_HEIGHT, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, } from '../../constants.gen.js';
import { CallRequest } from '../call_request.js';
import { MembershipWitness } from '../membership_witness.js';
import { NoteHashReadRequestMembershipWitness } from '../note_hash_read_request_membership_witness.js';
import { PrivateCallStackItem } from '../private_call_stack_item.js';
import { Proof } from '../proof.js';
import { VerificationKey } from '../verification_key.js';
/**
 * Private call data.
 */
export class PrivateCallData {
    constructor(
    /**
     * The call stack item currently being processed.
     */
    callStackItem, 
    /**
     * Other private call stack items to be processed.
     */
    privateCallStack, 
    /**
     * Other public call stack items to be processed.
     */
    publicCallStack, 
    /**
     * The proof of the execution of this private call.
     */
    proof, 
    /**
     * The verification key for the function being invoked.
     */
    vk, 
    /**
     * Artifact hash of the contract class for this private call.
     */
    contractClassArtifactHash, 
    /**
     * Public bytecode commitment for the contract class for this private call.
     */
    contractClassPublicBytecodeCommitment, 
    /**
     * Public keys hash of the contract instance.
     */
    publicKeysHash, 
    /**
     * Salted initialization hash of the contract instance.
     */
    saltedInitializationHash, 
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness, 
    /**
     * The membership witnesses for read requests created by the function being invoked.
     */
    noteHashReadRequestMembershipWitnesses, 
    /**
     * The address of the portal contract corresponding to the contract on which the function is being invoked.
     */
    portalContractAddress, 
    /**
     * The hash of the ACIR of the function being invoked.
     */
    acirHash) {
        this.callStackItem = callStackItem;
        this.privateCallStack = privateCallStack;
        this.publicCallStack = publicCallStack;
        this.proof = proof;
        this.vk = vk;
        this.contractClassArtifactHash = contractClassArtifactHash;
        this.contractClassPublicBytecodeCommitment = contractClassPublicBytecodeCommitment;
        this.publicKeysHash = publicKeysHash;
        this.saltedInitializationHash = saltedInitializationHash;
        this.functionLeafMembershipWitness = functionLeafMembershipWitness;
        this.noteHashReadRequestMembershipWitnesses = noteHashReadRequestMembershipWitnesses;
        this.portalContractAddress = portalContractAddress;
        this.acirHash = acirHash;
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.callStackItem,
            fields.privateCallStack,
            fields.publicCallStack,
            fields.proof,
            fields.vk,
            fields.contractClassArtifactHash,
            fields.contractClassPublicBytecodeCommitment,
            fields.publicKeysHash,
            fields.saltedInitializationHash,
            fields.functionLeafMembershipWitness,
            fields.noteHashReadRequestMembershipWitnesses,
            fields.portalContractAddress,
            fields.acirHash,
        ];
    }
    static from(fields) {
        return new PrivateCallData(...PrivateCallData.getFields(fields));
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...PrivateCallData.getFields(this));
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateCallData(reader.readObject(PrivateCallStackItem), reader.readArray(MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, CallRequest), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, CallRequest), reader.readObject(Proof), reader.readObject(VerificationKey), reader.readObject(Fr), reader.readObject(Fr), reader.readObject(Fr), reader.readObject(Fr), reader.readObject(MembershipWitness.deserializer(FUNCTION_TREE_HEIGHT)), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, NoteHashReadRequestMembershipWitness), reader.readObject(Fr), reader.readObject(Fr));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9jYWxsX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHJpdmF0ZV9jYWxsX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQVMsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUdyRixPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLG9DQUFvQyxFQUNwQyxzQ0FBc0MsRUFDdEMscUNBQXFDLEdBQ3RDLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXpEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFDMUI7SUFDRTs7T0FFRztJQUNJLGFBQW1DO0lBQzFDOztPQUVHO0lBQ0ksZ0JBQW1GO0lBQzFGOztPQUVHO0lBQ0ksZUFBaUY7SUFDeEY7O09BRUc7SUFDSSxLQUFZO0lBQ25COztPQUVHO0lBQ0ksRUFBbUI7SUFDMUI7O09BRUc7SUFDSSx5QkFBNkI7SUFDcEM7O09BRUc7SUFDSSxxQ0FBeUM7SUFDaEQ7O09BRUc7SUFDSSxjQUFrQjtJQUN6Qjs7T0FFRztJQUNJLHdCQUE0QjtJQUNuQzs7T0FFRztJQUNJLDZCQUE2RTtJQUNwRjs7T0FFRztJQUNJLHNDQUdOO0lBQ0Q7O09BRUc7SUFDSSxx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