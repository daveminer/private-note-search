import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { PARTIAL_STATE_REFERENCE_LENGTH } from '../constants.gen.js';
import { AppendOnlyTreeSnapshot } from './rollup/append_only_tree_snapshot.js';
/**
 * Stores snapshots of trees which are commonly needed by base or merge rollup circuits.
 */
export class PartialStateReference {
    constructor(
    /** Snapshot of the note hash tree. */
    noteHashTree, 
    /** Snapshot of the nullifier tree. */
    nullifierTree, 
    /** Snapshot of the public data tree. */
    publicDataTree) {
        this.noteHashTree = noteHashTree;
        this.nullifierTree = nullifierTree;
        this.publicDataTree = publicDataTree;
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PartialStateReference(reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        const noteHashTree = AppendOnlyTreeSnapshot.fromFields(reader);
        const nullifierTree = AppendOnlyTreeSnapshot.fromFields(reader);
        const publicDataTree = AppendOnlyTreeSnapshot.fromFields(reader);
        return new PartialStateReference(noteHashTree, nullifierTree, publicDataTree);
    }
    static empty() {
        return new PartialStateReference(AppendOnlyTreeSnapshot.zero(), AppendOnlyTreeSnapshot.zero(), AppendOnlyTreeSnapshot.zero());
    }
    toBuffer() {
        return serializeToBuffer(this.noteHashTree, this.nullifierTree, this.publicDataTree);
    }
    toFields() {
        const fields = [
            ...this.noteHashTree.toFields(),
            ...this.nullifierTree.toFields(),
            ...this.publicDataTree.toFields(),
        ];
        if (fields.length !== PARTIAL_STATE_REFERENCE_LENGTH) {
            throw new Error(`Invalid number of fields for PartialStateReference. Expected ${PARTIAL_STATE_REFERENCE_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    isEmpty() {
        return this.noteHashTree.isZero() && this.nullifierTree.isZero() && this.publicDataTree.isZero();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGlhbF9zdGF0ZV9yZWZlcmVuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RydWN0cy9wYXJ0aWFsX3N0YXRlX3JlZmVyZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTNGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBRS9FOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUNoQztJQUNFLHNDQUFzQztJQUN0QixZQUFvQztJQUNwRCxzQ0FBc0M7SUFDdEIsYUFBcUM7SUFDckQsd0NBQXdDO0lBQ3hCLGNBQXNDO1FBSnRDLGlCQUFZLEdBQVosWUFBWSxDQUF3QjtRQUVwQyxrQkFBYSxHQUFiLGFBQWEsQ0FBd0I7UUFFckMsbUJBQWMsR0FBZCxjQUFjLENBQXdCO0lBQ3JELENBQUM7SUFFSixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLHFCQUFxQixDQUM5QixNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUMxQyxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBMEI7UUFDMUMsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1QyxNQUFNLFlBQVksR0FBRyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsTUFBTSxhQUFhLEdBQUcsc0JBQXNCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sY0FBYyxHQUFHLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqRSxPQUFPLElBQUkscUJBQXFCLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDVixPQUFPLElBQUkscUJBQXFCLENBQzlCLHNCQUFzQixDQUFDLElBQUksRUFBRSxFQUM3QixzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsRUFDN0Isc0JBQXNCLENBQUMsSUFBSSxFQUFFLENBQzlCLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFHO1lBQ2IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRTtZQUMvQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFO1lBQ2hDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUU7U0FDbEMsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyw4QkFBOEIsRUFBRSxDQUFDO1lBQ3JELE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0VBQWdFLDhCQUE4QixTQUFTLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FDdkgsQ0FBQztRQUNKLENBQUM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbkcsQ0FBQztDQUNGIn0=