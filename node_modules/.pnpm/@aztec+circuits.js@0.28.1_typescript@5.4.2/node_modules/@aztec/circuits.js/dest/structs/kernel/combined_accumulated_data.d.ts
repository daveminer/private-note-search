/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_TX, MAX_NEW_NULLIFIERS_PER_TX, MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX, MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX, MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX, MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX, MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_PUBLIC_DATA_READS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, MAX_REVERTIBLE_NOTE_HASHES_PER_TX, MAX_REVERTIBLE_NULLIFIERS_PER_TX, MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX, MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, NUM_FIELDS_PER_SHA256 } from '../../constants.gen.js';
import { CallRequest } from '../call_request.js';
import { NullifierKeyValidationRequestContext } from '../nullifier_key_validation_request.js';
import { ReadRequestContext } from '../read_request.js';
import { SideEffect, SideEffectLinkedToNoteHash } from '../side_effects.js';
/**
 * Read operations from the public state tree.
 */
export declare class PublicDataRead {
    /**
     * Index of the leaf in the public data tree.
     */
    readonly leafSlot: Fr;
    /**
     * Returned value from the public data tree.
     */
    readonly value: Fr;
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    readonly sideEffectCounter?: number | undefined;
    constructor(
    /**
     * Index of the leaf in the public data tree.
     */
    leafSlot: Fr, 
    /**
     * Returned value from the public data tree.
     */
    value: Fr, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter?: number | undefined);
    static from(args: {
        /**
         * Index of the leaf in the public data tree.
         */
        leafIndex: Fr;
        /**
         * Returned value from the public data tree.
         */
        value: Fr;
    }): PublicDataRead;
    toBuffer(): Buffer;
    isEmpty(): boolean;
    static fromBuffer(buffer: Buffer | BufferReader): PublicDataRead;
    static empty(): PublicDataRead;
    toFriendlyJSON(): string;
    equals(other: PublicDataRead): boolean;
}
/**
 * Write operations on the public data tree including the previous value.
 */
export declare class PublicDataUpdateRequest {
    /**
     * Index of the leaf in the public data tree which is to be updated.
     */
    readonly leafSlot: Fr;
    /**
     * New value of the leaf.
     */
    readonly newValue: Fr;
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    readonly sideEffectCounter?: number | undefined;
    constructor(
    /**
     * Index of the leaf in the public data tree which is to be updated.
     */
    leafSlot: Fr, 
    /**
     * New value of the leaf.
     */
    newValue: Fr, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter?: number | undefined);
    static from(args: {
        /**
         * Index of the leaf in the public data tree which is to be updated.
         */
        leafIndex: Fr;
        /**
         * New value of the leaf.
         */
        newValue: Fr;
    }): PublicDataUpdateRequest;
    toBuffer(): Buffer;
    isEmpty(): boolean;
    static isEmpty(x: PublicDataUpdateRequest): boolean;
    equals(other: PublicDataUpdateRequest): boolean;
    static fromBuffer(buffer: Buffer | BufferReader): PublicDataUpdateRequest;
    static empty(): PublicDataUpdateRequest;
    toFriendlyJSON(): string;
}
/**
 * Data that is accumulated during the execution of the transaction.
 */
export declare class CombinedAccumulatedData {
    /**
     * All the read requests made in this transaction.
     */
    noteHashReadRequests: Tuple<SideEffect, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>;
    /**
     * All the nullifier read requests made in this transaction.
     */
    nullifierReadRequests: Tuple<ReadRequestContext, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>;
    /**
     * All the nullifier key validation requests made in this transaction.
     */
    nullifierKeyValidationRequests: Tuple<NullifierKeyValidationRequestContext, typeof MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX>;
    /**
     * The new note hashes made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_NEW_NOTE_HASHES_PER_TX>;
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    /**
     * Current private call stack.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>;
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX>;
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>;
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr;
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr;
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests: Tuple<PublicDataUpdateRequest, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>;
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_PUBLIC_DATA_READS_PER_TX>;
    constructor(
    /**
     * All the read requests made in this transaction.
     */
    noteHashReadRequests: Tuple<SideEffect, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>, 
    /**
     * All the nullifier read requests made in this transaction.
     */
    nullifierReadRequests: Tuple<ReadRequestContext, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>, 
    /**
     * All the nullifier key validation requests made in this transaction.
     */
    nullifierKeyValidationRequests: Tuple<NullifierKeyValidationRequestContext, typeof MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX>, 
    /**
     * The new note hashes made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_NEW_NOTE_HASHES_PER_TX>, 
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NEW_NULLIFIERS_PER_TX>, 
    /**
     * Current private call stack.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>, 
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr, 
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr, 
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests: Tuple<PublicDataUpdateRequest, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>, 
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_PUBLIC_DATA_READS_PER_TX>);
    toBuffer(): Buffer;
    toString(): string;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): CombinedAccumulatedData;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str: string): CombinedAccumulatedData;
    static empty(): CombinedAccumulatedData;
    /**
     *
     * @param nonRevertible the non-revertible accumulated data
     * @param revertible the revertible accumulated data
     * @returns a new CombinedAccumulatedData object, squashing the two inputs, and condensing arrays
     */
    static recombine(nonRevertible: PublicAccumulatedNonRevertibleData, revertible: PublicAccumulatedRevertibleData, reverted: boolean): CombinedAccumulatedData;
}
export declare class PublicAccumulatedRevertibleData {
    /**
     * All the read requests made in this transaction.
     */
    noteHashReadRequests: Tuple<SideEffect, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>;
    /**
     * All the read requests for nullifiers made in this transaction.
     */
    nullifierReadRequests: Tuple<ReadRequestContext, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>;
    /**
     * All the nullifier key validation requests made in this transaction.
     */
    nullifierKeyValidationRequests: Tuple<NullifierKeyValidationRequestContext, typeof MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX>;
    /**
     * The new note hashes made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_REVERTIBLE_NOTE_HASHES_PER_TX>;
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_REVERTIBLE_NULLIFIERS_PER_TX>;
    /**
     * Current private call stack.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>;
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX>;
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>;
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr;
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr;
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests: Tuple<PublicDataUpdateRequest, typeof MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>;
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX>;
    constructor(
    /**
     * All the read requests made in this transaction.
     */
    noteHashReadRequests: Tuple<SideEffect, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>, 
    /**
     * All the read requests for nullifiers made in this transaction.
     */
    nullifierReadRequests: Tuple<ReadRequestContext, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>, 
    /**
     * All the nullifier key validation requests made in this transaction.
     */
    nullifierKeyValidationRequests: Tuple<NullifierKeyValidationRequestContext, typeof MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX>, 
    /**
     * The new note hashes made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_REVERTIBLE_NOTE_HASHES_PER_TX>, 
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_REVERTIBLE_NULLIFIERS_PER_TX>, 
    /**
     * Current private call stack.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>, 
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr, 
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr, 
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests: Tuple<PublicDataUpdateRequest, typeof MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>, 
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX>);
    toBuffer(): Buffer;
    toString(): string;
    isEmpty(): boolean;
    [inspect.custom](): string;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PublicAccumulatedRevertibleData;
    static fromPrivateAccumulatedRevertibleData(finalData: PrivateAccumulatedRevertibleData): PublicAccumulatedRevertibleData;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str: string): PublicAccumulatedRevertibleData;
    static empty(): PublicAccumulatedRevertibleData;
}
/**
 * Specific accumulated data structure for the final ordering private kernel circuit. It is included
 *  in the final public inputs of private kernel circuit.
 */
export declare class PrivateAccumulatedRevertibleData {
    /**
     * The new note hashes made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_REVERTIBLE_NOTE_HASHES_PER_TX>;
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_REVERTIBLE_NULLIFIERS_PER_TX>;
    /**
     * Current private call stack.
     * TODO(#3417): Given this field must empty, should we just remove it?
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>;
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX>;
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>;
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>;
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr;
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr;
    constructor(
    /**
     * The new note hashes made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_REVERTIBLE_NOTE_HASHES_PER_TX>, 
    /**
     * The new nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_REVERTIBLE_NULLIFIERS_PER_TX>, 
    /**
     * Current private call stack.
     * TODO(#3417): Given this field must empty, should we just remove it?
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * Current public call stack.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    newL2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>, 
    /**
     * Accumulated encrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Accumulated unencrypted logs hash from all the previous kernel iterations.
     * Note: Represented as a tuple of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: Tuple<Fr, typeof NUM_FIELDS_PER_SHA256>, 
    /**
     * Total accumulated length of the encrypted log preimages emitted in all the previous kernel iterations
     */
    encryptedLogPreimagesLength: Fr, 
    /**
     * Total accumulated length of the unencrypted log preimages emitted in all the previous kernel iterations
     */
    unencryptedLogPreimagesLength: Fr);
    toBuffer(): Buffer;
    toString(): string;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateAccumulatedRevertibleData;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str: string): PrivateAccumulatedRevertibleData;
    static empty(): PrivateAccumulatedRevertibleData;
}
export declare class PrivateAccumulatedNonRevertibleData {
    /**
     * The new non-revertible commitments made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX>;
    /**
     * The new non-revertible nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX>;
    /**
     * Current public call stack that will produce non-revertible side effects.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX>;
    constructor(
    /**
     * The new non-revertible commitments made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX>, 
    /**
     * The new non-revertible nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX>, 
    /**
     * Current public call stack that will produce non-revertible side effects.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX>);
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): PrivateAccumulatedNonRevertibleData;
    toString(): string;
    static fromString(str: string): PrivateAccumulatedNonRevertibleData;
    static empty(): PrivateAccumulatedNonRevertibleData;
}
export declare class PublicAccumulatedNonRevertibleData {
    /**
     * The nullifier read requests made in this transaction.
     */
    nullifierReadRequests: Tuple<ReadRequestContext, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>;
    /**
     * The nullifier read requests made in this transaction.
     */
    nullifierNonExistentReadRequests: Tuple<ReadRequestContext, typeof MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX>;
    /**
     * The new non-revertible commitments made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX>;
    /**
     * The new non-revertible nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX>;
    /**
     * Current public call stack that will produce non-revertible side effects.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX>;
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests: Tuple<PublicDataUpdateRequest, typeof MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>;
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX>;
    constructor(
    /**
     * The nullifier read requests made in this transaction.
     */
    nullifierReadRequests: Tuple<ReadRequestContext, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>, 
    /**
     * The nullifier read requests made in this transaction.
     */
    nullifierNonExistentReadRequests: Tuple<ReadRequestContext, typeof MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX>, 
    /**
     * The new non-revertible commitments made in this transaction.
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX>, 
    /**
     * The new non-revertible nullifiers made in this transaction.
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX>, 
    /**
     * Current public call stack that will produce non-revertible side effects.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX>, 
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests: Tuple<PublicDataUpdateRequest, typeof MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>, 
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX>);
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer | BufferReader): PublicAccumulatedNonRevertibleData;
    toString(): string;
    static fromString(str: string): PublicAccumulatedNonRevertibleData;
    static empty(): PublicAccumulatedNonRevertibleData;
    static fromPrivateAccumulatedNonRevertibleData(data: PrivateAccumulatedNonRevertibleData): PublicAccumulatedNonRevertibleData;
    [inspect.custom](): string;
}
//# sourceMappingURL=combined_accumulated_data.d.ts.map