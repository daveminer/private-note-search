/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
/**
 * Essential members and functions of all SideEffect variants
 */
export interface SideEffectType {
    /** The actual value associated with the SideEffect */
    value: Fr;
    /** The counter associated with the SideEffect */
    counter: Fr;
    /** Convert to a buffer */
    toBuffer(): Buffer;
    /** Convert to a field array */
    toFields(): Fr[];
    /** Are all of the fields of the SideEffect zero? */
    isEmpty(): boolean;
}
/**
 * Side-effect object consisting of a value and a counter.
 * cpp/src/aztec3/circuits/abis/side_effects.hpp.
 */
export declare class SideEffect implements SideEffectType {
    /**
     * The value of the side-effect object.
     */
    value: Fr;
    /**
     * The side-effect counter.
     */
    counter: Fr;
    constructor(
    /**
     * The value of the side-effect object.
     */
    value: Fr, 
    /**
     * The side-effect counter.
     */
    counter: Fr);
    toString(): string;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Convert to an array of fields.
     * @returns The array of fields.
     */
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): SideEffect;
    /**
     * Returns whether this instance of side-effect is empty.
     * @returns True if the value and counter both are zero.
     */
    isEmpty(): boolean;
    /**
     * Checks whether this instance of side-effect is empty.
     * @returns True if the value and counter both are zero.
     */
    static isEmpty(sideEffect: SideEffect): boolean;
    /**
     * Returns an empty instance of side-effect.
     * @returns Side-effect with both value and counter being zero.
     */
    static empty(): SideEffect;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of SideEffect.
     */
    static fromBuffer(buffer: Buffer | BufferReader): SideEffect;
}
/**
 * Side-effect object consisting of a value, a start counter and an end counter.
 * cpp/src/aztec3/circuits/abis/side_effects.hpp.
 */
export declare class SideEffectLinkedToNoteHash implements SideEffectType {
    /**
     * The value of the side-effect object.
     */
    value: Fr;
    /**
     * The note hash corresponding to the side-effect value.
     */
    noteHash: Fr;
    /**
     * The counter.
     */
    counter: Fr;
    constructor(
    /**
     * The value of the side-effect object.
     */
    value: Fr, 
    /**
     * The note hash corresponding to the side-effect value.
     */
    noteHash: Fr, 
    /**
     * The counter.
     */
    counter: Fr);
    toString(): string;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Convert to an array of fields.
     * @returns The array of fields.
     */
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): SideEffectLinkedToNoteHash;
    /**
     * Returns whether this instance of side-effect is empty.
     * @returns True if the value, note hash and counter are all zero.
     */
    isEmpty(): boolean;
    /**
     * Returns whether this instance of side-effect is empty.
     * @returns True if the value, note hash and counter are all zero.
     */
    static isEmpty(sideEffect: SideEffectLinkedToNoteHash): boolean;
    /**
     * Returns an empty instance of side-effect.
     * @returns Side-effect with value, note hash and counter being zero.
     */
    static empty(): SideEffectLinkedToNoteHash;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of SideEffectLinkedToNoteHash.
     */
    static fromBuffer(buffer: Buffer | BufferReader): SideEffectLinkedToNoteHash;
}
/**
 * Convert an array of side effects to an array only non-empty side effects.
 * @param sideEffects - array to be converted
 * @returns the array of the non-empty side effects
 */
export declare function nonEmptySideEffects(sideEffects: SideEffectType[]): SideEffectType[];
/**
 * Convert an array of side effects to an array of their values.
 * @param sideEffects - array to be converted
 * @returns the array of field values (excluding SideEffect metadata like counter)
 */
export declare function sideEffectArrayToValueArray(sideEffects: SideEffectType[]): Fr[];
/**
 * Compare two side effects based on their counter.
 * @param a - A side effect
 * @param b - Another side effect
 * @returns - The order of the two side effects
 */
export declare function sideEffectCmp(a: SideEffectType, b: SideEffectType): -1 | 0 | 1;
//# sourceMappingURL=side_effects.d.ts.map