import { makeTuple } from '@aztec/foundation/array';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { MAX_NEW_NULLIFIERS_PER_TX, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, NULLIFIER_TREE_HEIGHT, } from '../constants.gen.js';
import { MembershipWitness } from './membership_witness.js';
import { NullifierLeafPreimage } from './rollup/nullifier_leaf/index.js';
import { SideEffectLinkedToNoteHash } from './side_effects.js';
export class NonMembershipHint {
    constructor(membershipWitness, leafPreimage) {
        this.membershipWitness = membershipWitness;
        this.leafPreimage = leafPreimage;
    }
    static empty(treeHeight, makeEmptyLeafPreimage) {
        return new NonMembershipHint(MembershipWitness.empty(treeHeight, 0n), makeEmptyLeafPreimage());
    }
    static fromBuffer(buffer, treeHeight, leafPreimageFromBuffer) {
        const reader = BufferReader.asReader(buffer);
        return new NonMembershipHint(MembershipWitness.fromBuffer(reader, treeHeight), reader.readObject(leafPreimageFromBuffer));
    }
    toBuffer() {
        return serializeToBuffer(this.membershipWitness, this.leafPreimage);
    }
}
export class NonExistentReadRequestHints {
    constructor(
    /**
     * The hints for the low leaves of the read requests.
     */
    nonMembershipHints, 
    /**
     * Indices of the smallest pending values greater than the read requests.
     */
    nextPendingValueIndices, sortedPendingValues, sortedPendingValueHints) {
        this.nonMembershipHints = nonMembershipHints;
        this.nextPendingValueIndices = nextPendingValueIndices;
        this.sortedPendingValues = sortedPendingValues;
        this.sortedPendingValueHints = sortedPendingValueHints;
    }
    static fromBuffer(buffer, readRequestLen, treeHeight, leafPreimageFromBuffer, pendingValueLen, orderedValueFromBuffer) {
        const reader = BufferReader.asReader(buffer);
        return new NonExistentReadRequestHints(reader.readArray(readRequestLen, {
            fromBuffer: buf => NonMembershipHint.fromBuffer(buf, treeHeight, leafPreimageFromBuffer),
        }), reader.readNumbers(readRequestLen), reader.readArray(pendingValueLen, orderedValueFromBuffer), reader.readNumbers(pendingValueLen));
    }
    toBuffer() {
        return serializeToBuffer(this.nonMembershipHints, this.nextPendingValueIndices);
    }
}
export function nullifierNonExistentReadRequestHintsFromBuffer(buffer) {
    return NonExistentReadRequestHints.fromBuffer(buffer, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, NULLIFIER_TREE_HEIGHT, NullifierLeafPreimage, MAX_NEW_NULLIFIERS_PER_TX, SideEffectLinkedToNoteHash);
}
export class NullifierNonExistentReadRequestHintsBuilder {
    constructor(sortedPendingNullifiers, sortedPendingNullifierIndexHints) {
        this.readRequestIndex = 0;
        this.hints = new NonExistentReadRequestHints(makeTuple(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, () => NonMembershipHint.empty(NULLIFIER_TREE_HEIGHT, NullifierLeafPreimage.empty)), makeTuple(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, () => 0), sortedPendingNullifiers, sortedPendingNullifierIndexHints);
    }
    static empty() {
        const emptySortedPendingNullifiers = makeTuple(MAX_NEW_NULLIFIERS_PER_TX, SideEffectLinkedToNoteHash.empty);
        const emptySortedPendingNullifierIndexHints = makeTuple(MAX_NEW_NULLIFIERS_PER_TX, () => 0);
        return new NullifierNonExistentReadRequestHintsBuilder(emptySortedPendingNullifiers, emptySortedPendingNullifierIndexHints).toHints();
    }
    addHint(membershipWitness, lowLeafPreimage, nextPendingValueIndex) {
        this.hints.nonMembershipHints[this.readRequestIndex] = new NonMembershipHint(membershipWitness, lowLeafPreimage);
        this.hints.nextPendingValueIndices[this.readRequestIndex] = nextPendingValueIndex;
        this.readRequestIndex++;
    }
    toHints() {
        return this.hints;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9uX2V4aXN0ZW50X3JlYWRfcmVxdWVzdF9oaW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL25vbl9leGlzdGVudF9yZWFkX3JlcXVlc3RfaGludHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQVMsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUdyRixPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLCtDQUErQyxFQUMvQyxxQkFBcUIsR0FDdEIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsMEJBQTBCLEVBQWtCLE1BQU0sbUJBQW1CLENBQUM7QUFFL0UsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUFtQixpQkFBaUQsRUFBUyxZQUEyQjtRQUFyRixzQkFBaUIsR0FBakIsaUJBQWlCLENBQWdDO1FBQVMsaUJBQVksR0FBWixZQUFZLENBQWU7SUFBRyxDQUFDO0lBRTVHLE1BQU0sQ0FBQyxLQUFLLENBQ1YsVUFBdUIsRUFDdkIscUJBQTBDO1FBRTFDLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FDZixNQUE2QixFQUM3QixVQUF1QixFQUN2QixzQkFBK0U7UUFFL0UsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksaUJBQWlCLENBQzFCLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQ2hELE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTywyQkFBMkI7SUFPdEM7SUFDRTs7T0FFRztJQUNJLGtCQUEwRjtJQUNqRzs7T0FFRztJQUNJLHVCQUF3RCxFQUN4RCxtQkFBNEQsRUFDNUQsdUJBQXlEO1FBTnpELHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBd0U7UUFJMUYsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFpQztRQUN4RCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXlDO1FBQzVELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBa0M7SUFDL0QsQ0FBQztJQUVKLE1BQU0sQ0FBQyxVQUFVLENBT2YsTUFBNkIsRUFDN0IsY0FBZ0MsRUFDaEMsVUFBdUIsRUFDdkIsc0JBQStFLEVBQy9FLGVBQWtDLEVBQ2xDLHNCQUErRTtRQUUvRSxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSwyQkFBMkIsQ0FDcEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUU7WUFDL0IsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsc0JBQXNCLENBQUM7U0FDekYsQ0FBQyxFQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEVBQ2xDLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLHNCQUFzQixDQUFDLEVBQ3pELE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQ3BDLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7Q0FDRjtBQVVELE1BQU0sVUFBVSw4Q0FBOEMsQ0FDNUQsTUFBNkI7SUFFN0IsT0FBTywyQkFBMkIsQ0FBQyxVQUFVLENBQzNDLE1BQU0sRUFDTiwrQ0FBK0MsRUFDL0MscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUNyQix5QkFBeUIsRUFDekIsMEJBQTBCLENBQzNCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxPQUFPLDJDQUEyQztJQUl0RCxZQUNFLHVCQUE0RixFQUM1RixnQ0FBaUY7UUFKM0UscUJBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBTTNCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSwyQkFBMkIsQ0FDMUMsU0FBUyxDQUFDLCtDQUErQyxFQUFFLEdBQUcsRUFBRSxDQUM5RCxpQkFBaUIsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQzVFLEVBQ0QsU0FBUyxDQUFDLCtDQUErQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNuRSx1QkFBdUIsRUFDdkIsZ0NBQWdDLENBQ2pDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDVixNQUFNLDRCQUE0QixHQUFHLFNBQVMsQ0FBQyx5QkFBeUIsRUFBRSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RyxNQUFNLHFDQUFxQyxHQUFHLFNBQVMsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RixPQUFPLElBQUksMkNBQTJDLENBQ3BELDRCQUE0QixFQUM1QixxQ0FBcUMsQ0FDdEMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLENBQ0wsaUJBQWtFLEVBQ2xFLGVBQXdDLEVBQ3hDLHFCQUE2QjtRQUU3QixJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLElBQUksaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDakgsSUFBSSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxxQkFBcUIsQ0FBQztRQUNsRixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0NBQ0YifQ==