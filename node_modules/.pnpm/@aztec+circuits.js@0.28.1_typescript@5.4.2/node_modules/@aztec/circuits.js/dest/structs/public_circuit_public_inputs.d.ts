/// <reference types="node" resolution-mode="require"/>
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, Tuple } from '@aztec/foundation/serialize';
import { FieldsOf } from '@aztec/foundation/types';
import { MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, RETURN_VALUES_LENGTH } from '../constants.gen.js';
import { CallContext } from './call_context.js';
import { ContractStorageRead } from './contract_storage_read.js';
import { ContractStorageUpdateRequest } from './contract_storage_update_request.js';
import { Header } from './header.js';
import { L2ToL1Message } from './l2_to_l1_message.js';
import { ReadRequest } from './read_request.js';
import { SideEffect, SideEffectLinkedToNoteHash } from './side_effects.js';
/**
 * Public inputs to a public circuit.
 */
export declare class PublicCircuitPublicInputs {
    /**
     * Current call context.
     */
    callContext: CallContext;
    /**
     * Pedersen hash of the arguments of the call.
     */
    argsHash: Fr;
    /**
     * Return values of the call.
     */
    returnValues: Tuple<Fr, typeof RETURN_VALUES_LENGTH>;
    /**
     * Nullifier read requests executed during the call.
     */
    nullifierReadRequests: Tuple<ReadRequest, typeof MAX_NULLIFIER_READ_REQUESTS_PER_CALL>;
    /**
     * Nullifier non existent read requests executed during the call.
     */
    nullifierNonExistentReadRequests: Tuple<ReadRequest, typeof MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>;
    /**
     * Contract storage update requests executed during the call.
     */
    contractStorageUpdateRequests: Tuple<ContractStorageUpdateRequest, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>;
    /**
     * Contract storage reads executed during the call.
     */
    contractStorageReads: Tuple<ContractStorageRead, typeof MAX_PUBLIC_DATA_READS_PER_CALL>;
    /**
     * Public call stack of the current kernel iteration.
     */
    publicCallStackHashes: Tuple<Fr, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>;
    /**
     * New note hashes created within a public execution call
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_NEW_NOTE_HASHES_PER_CALL>;
    /**
     * New nullifiers created within a public execution call
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NEW_NULLIFIERS_PER_CALL>;
    /**
     * New L2 to L1 messages generated during the call.
     */
    newL2ToL1Msgs: Tuple<L2ToL1Message, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>;
    /**
     * The side effect counter when this context was started.
     */
    startSideEffectCounter: Fr;
    /**
     * The side effect counter when this context finished.
     */
    endSideEffectCounter: Fr;
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: [Fr, Fr];
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength: Fr;
    /**
     * Header of a block whose state is used during public execution. Set by sequencer to be a header of a block
     * previous to the one in which the tx is included.
     */
    historicalHeader: Header;
    /**
     * Address of the prover.
     */
    proverAddress: AztecAddress;
    /**
     * Flag indicating if the call was reverted.
     */
    reverted: boolean;
    constructor(
    /**
     * Current call context.
     */
    callContext: CallContext, 
    /**
     * Pedersen hash of the arguments of the call.
     */
    argsHash: Fr, 
    /**
     * Return values of the call.
     */
    returnValues: Tuple<Fr, typeof RETURN_VALUES_LENGTH>, 
    /**
     * Nullifier read requests executed during the call.
     */
    nullifierReadRequests: Tuple<ReadRequest, typeof MAX_NULLIFIER_READ_REQUESTS_PER_CALL>, 
    /**
     * Nullifier non existent read requests executed during the call.
     */
    nullifierNonExistentReadRequests: Tuple<ReadRequest, typeof MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>, 
    /**
     * Contract storage update requests executed during the call.
     */
    contractStorageUpdateRequests: Tuple<ContractStorageUpdateRequest, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>, 
    /**
     * Contract storage reads executed during the call.
     */
    contractStorageReads: Tuple<ContractStorageRead, typeof MAX_PUBLIC_DATA_READS_PER_CALL>, 
    /**
     * Public call stack of the current kernel iteration.
     */
    publicCallStackHashes: Tuple<Fr, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>, 
    /**
     * New note hashes created within a public execution call
     */
    newNoteHashes: Tuple<SideEffect, typeof MAX_NEW_NOTE_HASHES_PER_CALL>, 
    /**
     * New nullifiers created within a public execution call
     */
    newNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NEW_NULLIFIERS_PER_CALL>, 
    /**
     * New L2 to L1 messages generated during the call.
     */
    newL2ToL1Msgs: Tuple<L2ToL1Message, typeof MAX_NEW_L2_TO_L1_MSGS_PER_CALL>, 
    /**
     * The side effect counter when this context was started.
     */
    startSideEffectCounter: Fr, 
    /**
     * The side effect counter when this context finished.
     */
    endSideEffectCounter: Fr, 
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash: [Fr, Fr], 
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength: Fr, 
    /**
     * Header of a block whose state is used during public execution. Set by sequencer to be a header of a block
     * previous to the one in which the tx is included.
     */
    historicalHeader: Header, 
    /**
     * Address of the prover.
     */
    proverAddress: AztecAddress, 
    /**
     * Flag indicating if the call was reverted.
     */
    reverted: boolean);
    /**
     * Create PublicCircuitPublicInputs from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PublicCircuitPublicInputs object.
     */
    static from(fields: FieldsOf<PublicCircuitPublicInputs>): PublicCircuitPublicInputs;
    /**
     * Returns an empty instance.
     * @returns An empty instance.
     */
    static empty(): PublicCircuitPublicInputs;
    isEmpty(): boolean;
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<PublicCircuitPublicInputs>): readonly [CallContext, Fr, [Fr, Fr, Fr, Fr], [ReadRequest, ReadRequest], [ReadRequest, ReadRequest], [ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest, ContractStorageUpdateRequest], [ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead, ContractStorageRead], [Fr, Fr, Fr, Fr], [SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect, SideEffect], [SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash, SideEffectLinkedToNoteHash], [L2ToL1Message, L2ToL1Message], Fr, Fr, [Fr, Fr], Fr, Header, AztecAddress, boolean];
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    toFields(): Fr[];
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PublicCircuitPublicInputs;
    static fromFields(fields: Fr[] | FieldReader): PublicCircuitPublicInputs;
    hash(): Fr;
}
//# sourceMappingURL=public_circuit_public_inputs.d.ts.map