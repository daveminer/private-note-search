/// <reference types="node" resolution-mode="require"/>
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { MAX_NEW_NOTE_HASHES_PER_TX, MAX_NEW_NULLIFIERS_PER_TX, MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX } from '../../constants.gen.js';
import { GrumpkinPrivateKey } from '../../index.js';
import { Fr } from '../index.js';
import { NullifierReadRequestHints } from '../read_request_hints.js';
import { SideEffect, SideEffectLinkedToNoteHash } from '../side_effects.js';
import { PrivateKernelInnerData } from './private_kernel_inner_data.js';
/**
 * Input to the private kernel circuit - tail call.
 */
export declare class PrivateKernelTailCircuitPrivateInputs {
    /**
     * The previous kernel data
     */
    previousKernel: PrivateKernelInnerData;
    /**
     * The sorted new note hashes.
     */
    sortedNewNoteHashes: Tuple<SideEffect, typeof MAX_NEW_NOTE_HASHES_PER_TX>;
    /**
     * The sorted new note hashes indexes. Maps original to sorted.
     */
    sortedNewNoteHashesIndexes: Tuple<number, typeof MAX_NEW_NOTE_HASHES_PER_TX>;
    /**
     * Contains hints for the transient read requests to localize corresponding commitments.
     */
    readCommitmentHints: Tuple<Fr, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>;
    /**
     * The sorted new nullifiers. Maps original to sorted.
     */
    sortedNewNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    /**
     * The sorted new nullifiers indexes.
     */
    sortedNewNullifiersIndexes: Tuple<number, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    /**
     * Contains hints for the nullifier read requests to locate corresponding pending or settled nullifiers.
     */
    nullifierReadRequestHints: NullifierReadRequestHints;
    /**
     * Contains hints for the transient nullifiers to localize corresponding commitments.
     */
    nullifierCommitmentHints: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    /**
     * The master nullifier secret keys for the nullifier key validation requests.
     */
    masterNullifierSecretKeys: Tuple<GrumpkinPrivateKey, typeof MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX>;
    constructor(
    /**
     * The previous kernel data
     */
    previousKernel: PrivateKernelInnerData, 
    /**
     * The sorted new note hashes.
     */
    sortedNewNoteHashes: Tuple<SideEffect, typeof MAX_NEW_NOTE_HASHES_PER_TX>, 
    /**
     * The sorted new note hashes indexes. Maps original to sorted.
     */
    sortedNewNoteHashesIndexes: Tuple<number, typeof MAX_NEW_NOTE_HASHES_PER_TX>, 
    /**
     * Contains hints for the transient read requests to localize corresponding commitments.
     */
    readCommitmentHints: Tuple<Fr, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>, 
    /**
     * The sorted new nullifiers. Maps original to sorted.
     */
    sortedNewNullifiers: Tuple<SideEffectLinkedToNoteHash, typeof MAX_NEW_NULLIFIERS_PER_TX>, 
    /**
     * The sorted new nullifiers indexes.
     */
    sortedNewNullifiersIndexes: Tuple<number, typeof MAX_NEW_NULLIFIERS_PER_TX>, 
    /**
     * Contains hints for the nullifier read requests to locate corresponding pending or settled nullifiers.
     */
    nullifierReadRequestHints: NullifierReadRequestHints, 
    /**
     * Contains hints for the transient nullifiers to localize corresponding commitments.
     */
    nullifierCommitmentHints: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>, 
    /**
     * The master nullifier secret keys for the nullifier key validation requests.
     */
    masterNullifierSecretKeys: Tuple<GrumpkinPrivateKey, typeof MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX>);
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateKernelTailCircuitPrivateInputs;
}
//# sourceMappingURL=private_kernel_tail_circuit_private_inputs.d.ts.map