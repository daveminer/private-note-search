/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { FieldsOf } from '@aztec/foundation/types';
import { FUNCTION_TREE_HEIGHT, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL } from '../../constants.gen.js';
import { CallRequest } from '../call_request.js';
import { MembershipWitness } from '../membership_witness.js';
import { NoteHashReadRequestMembershipWitness } from '../note_hash_read_request_membership_witness.js';
import { PrivateCallStackItem } from '../private_call_stack_item.js';
import { Proof } from '../proof.js';
import { VerificationKey } from '../verification_key.js';
/**
 * Private call data.
 */
export declare class PrivateCallData {
    /**
     * The call stack item currently being processed.
     */
    callStackItem: PrivateCallStackItem;
    /**
     * Other private call stack items to be processed.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>;
    /**
     * Other public call stack items to be processed.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>;
    /**
     * The proof of the execution of this private call.
     */
    proof: Proof;
    /**
     * The verification key for the function being invoked.
     */
    vk: VerificationKey;
    /**
     * Artifact hash of the contract class for this private call.
     */
    contractClassArtifactHash: Fr;
    /**
     * Public bytecode commitment for the contract class for this private call.
     */
    contractClassPublicBytecodeCommitment: Fr;
    /**
     * Public keys hash of the contract instance.
     */
    publicKeysHash: Fr;
    /**
     * Salted initialization hash of the contract instance.
     */
    saltedInitializationHash: Fr;
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness: MembershipWitness<typeof FUNCTION_TREE_HEIGHT>;
    /**
     * The membership witnesses for read requests created by the function being invoked.
     */
    noteHashReadRequestMembershipWitnesses: Tuple<NoteHashReadRequestMembershipWitness, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>;
    /**
     * The address of the portal contract corresponding to the contract on which the function is being invoked.
     */
    portalContractAddress: Fr;
    /**
     * The hash of the ACIR of the function being invoked.
     */
    acirHash: Fr;
    constructor(
    /**
     * The call stack item currently being processed.
     */
    callStackItem: PrivateCallStackItem, 
    /**
     * Other private call stack items to be processed.
     */
    privateCallStack: Tuple<CallRequest, typeof MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>, 
    /**
     * Other public call stack items to be processed.
     */
    publicCallStack: Tuple<CallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>, 
    /**
     * The proof of the execution of this private call.
     */
    proof: Proof, 
    /**
     * The verification key for the function being invoked.
     */
    vk: VerificationKey, 
    /**
     * Artifact hash of the contract class for this private call.
     */
    contractClassArtifactHash: Fr, 
    /**
     * Public bytecode commitment for the contract class for this private call.
     */
    contractClassPublicBytecodeCommitment: Fr, 
    /**
     * Public keys hash of the contract instance.
     */
    publicKeysHash: Fr, 
    /**
     * Salted initialization hash of the contract instance.
     */
    saltedInitializationHash: Fr, 
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness: MembershipWitness<typeof FUNCTION_TREE_HEIGHT>, 
    /**
     * The membership witnesses for read requests created by the function being invoked.
     */
    noteHashReadRequestMembershipWitnesses: Tuple<NoteHashReadRequestMembershipWitness, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, 
    /**
     * The address of the portal contract corresponding to the contract on which the function is being invoked.
     */
    portalContractAddress: Fr, 
    /**
     * The hash of the ACIR of the function being invoked.
     */
    acirHash: Fr);
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<PrivateCallData>): readonly [PrivateCallStackItem, [CallRequest, CallRequest, CallRequest, CallRequest], [CallRequest, CallRequest, CallRequest, CallRequest], Proof, VerificationKey, Fr, Fr, Fr, Fr, MembershipWitness<5>, [NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness, NoteHashReadRequestMembershipWitness], Fr, Fr];
    static from(fields: FieldsOf<PrivateCallData>): PrivateCallData;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateCallData;
}
//# sourceMappingURL=private_call_data.d.ts.map