import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { L2_TO_L1_MESSAGE_LENGTH } from '../constants.gen.js';
export class L2ToL1Message {
    constructor(recipient, content) {
        this.recipient = recipient;
        this.content = content;
    }
    /**
     * Creates an empty L2ToL1Message with default values.
     * @returns An instance of L2ToL1Message with empty fields.
     */
    static empty() {
        return new L2ToL1Message(EthAddress.ZERO, Fr.zero());
    }
    /**
     * Checks if another L2ToL1Message is equal to this instance.
     * @param other Another L2ToL1Message instance to compare with.
     * @returns True if both recipient and content are equal.
     */
    equals(other) {
        return this.recipient.equals(other.recipient) && this.content.equals(other.content);
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.recipient, this.content);
    }
    /**
     * Serializes the L2ToL1Message into an array of fields.
     * @returns An array of fields representing the serialized message.
     */
    toFields() {
        const fields = [this.recipient.toField(), this.content];
        if (fields.length !== L2_TO_L1_MESSAGE_LENGTH) {
            throw new Error(`Invalid number of fields for L2ToL1Message. Expected ${L2_TO_L1_MESSAGE_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    /**
     * Deserializes an array of fields into an L2ToL1Message instance.
     * @param fields An array of fields to deserialize from.
     * @returns An instance of L2ToL1Message.
     */
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new L2ToL1Message(reader.readObject(EthAddress), reader.readField());
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of L2ToL1Message.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new L2ToL1Message(reader.readObject(EthAddress), reader.readObject(Fr));
    }
    /**
     * Convenience method to check if the message is empty.
     * @returns True if both recipient and content are zero.
     */
    isEmpty() {
        return this.recipient.isZero() && this.content.isZero();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDJfdG9fbDFfbWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL2wyX3RvX2wxX21lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTNGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTlELE1BQU0sT0FBTyxhQUFhO0lBQ3hCLFlBQW1CLFNBQXFCLEVBQVMsT0FBVztRQUF6QyxjQUFTLEdBQVQsU0FBUyxDQUFZO1FBQVMsWUFBTyxHQUFQLE9BQU8sQ0FBSTtJQUFHLENBQUM7SUFFaEU7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLEtBQUs7UUFDVixPQUFPLElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsS0FBb0I7UUFDekIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLHVCQUF1QixFQUFFLENBQUM7WUFDOUMsTUFBTSxJQUFJLEtBQUssQ0FDYix3REFBd0QsdUJBQXVCLFNBQVMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUN4RyxDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUEwQjtRQUMxQyxNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLE9BQU8sSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRDs7O09BR0c7SUFDSCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDMUQsQ0FBQztDQUNGIn0=