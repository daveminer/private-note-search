/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import { AggregationObject } from '../aggregation_object.js';
import { PrivateAccumulatedNonRevertibleData, PrivateAccumulatedRevertibleData } from './combined_accumulated_data.js';
import { CombinedConstantData } from './combined_constant_data.js';
/**
 * Output from to the private kernel circuit - tail call.
 */
export declare class PrivateKernelTailCircuitPublicInputs {
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject: AggregationObject;
    /**
     * Accumulated side effects that are not revertible.
     */
    endNonRevertibleData: PrivateAccumulatedNonRevertibleData;
    /**
     * Data accumulated from both public and private circuits.
     */
    end: PrivateAccumulatedRevertibleData;
    /**
     * Data which is not modified by the circuits.
     */
    constants: CombinedConstantData;
    /**
     * Indicates whether the setup kernel is needed.
     */
    needsSetup: boolean;
    /**
     * Indicates whether the app logic kernel is needed.
     */
    needsAppLogic: boolean;
    /**
     * Indicates whether the teardown kernel is needed.
     */
    needsTeardown: boolean;
    constructor(
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject: AggregationObject, // Contains the aggregated proof of all previous kernel iterations
    /**
     * Accumulated side effects that are not revertible.
     */
    endNonRevertibleData: PrivateAccumulatedNonRevertibleData, 
    /**
     * Data accumulated from both public and private circuits.
     */
    end: PrivateAccumulatedRevertibleData, 
    /**
     * Data which is not modified by the circuits.
     */
    constants: CombinedConstantData, 
    /**
     * Indicates whether the setup kernel is needed.
     */
    needsSetup: boolean, 
    /**
     * Indicates whether the app logic kernel is needed.
     */
    needsAppLogic: boolean, 
    /**
     * Indicates whether the teardown kernel is needed.
     */
    needsTeardown: boolean);
    toBuffer(): Buffer;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of PrivateKernelTailCircuitPublicInputs.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateKernelTailCircuitPublicInputs;
    static empty(): PrivateKernelTailCircuitPublicInputs;
}
//# sourceMappingURL=private_kernel_tail_circuit_public_inputs.d.ts.map