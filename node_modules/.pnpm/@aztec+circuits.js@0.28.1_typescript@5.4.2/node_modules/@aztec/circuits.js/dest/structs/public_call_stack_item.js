import { AztecAddress } from '@aztec/foundation/aztec-address';
import { pedersenHash } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { GeneratorIndex } from '../constants.gen.js';
import { CallRequest, CallerContext } from './call_request.js';
import { FunctionData } from './function_data.js';
import { PublicCircuitPublicInputs } from './public_circuit_public_inputs.js';
/**
 * Call stack item on a public call.
 */
export class PublicCallStackItem {
    constructor(
    /**
     * Address of the contract on which the function is invoked.
     */
    contractAddress, 
    /**
     * Data identifying the function being called.
     */
    functionData, 
    /**
     * Public inputs to the public kernel circuit.
     */
    publicInputs, 
    /**
     * Whether the current callstack item should be considered a public fn execution request.
     */
    isExecutionRequest) {
        this.contractAddress = contractAddress;
        this.functionData = functionData;
        this.publicInputs = publicInputs;
        this.isExecutionRequest = isExecutionRequest;
    }
    static getFields(fields) {
        return [fields.contractAddress, fields.functionData, fields.publicInputs, fields.isExecutionRequest];
    }
    toBuffer() {
        return serializeToBuffer(...PublicCallStackItem.getFields(this));
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicCallStackItem(reader.readObject(AztecAddress), reader.readObject(FunctionData), reader.readObject(PublicCircuitPublicInputs), reader.readBoolean());
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        const contractAddress = AztecAddress.fromFields(reader);
        const functionData = FunctionData.fromFields(reader);
        const publicInputs = PublicCircuitPublicInputs.fromFields(reader);
        const isExecutionRequest = reader.readBoolean();
        return new PublicCallStackItem(contractAddress, functionData, publicInputs, isExecutionRequest);
    }
    /**
     * Returns a new instance of PublicCallStackItem with zero contract address, function data and public inputs.
     * @returns A new instance of PublicCallStackItem with zero contract address, function data and public inputs.
     */
    static empty() {
        return new PublicCallStackItem(AztecAddress.ZERO, FunctionData.empty({ isPrivate: false }), PublicCircuitPublicInputs.empty(), false);
    }
    isEmpty() {
        return this.contractAddress.isZero() && this.functionData.isEmpty() && this.publicInputs.isEmpty();
    }
    /**
     * Computes this call stack item hash.
     * @returns Hash.
     */
    hash() {
        if (this.isExecutionRequest) {
            const { callContext, argsHash } = this.publicInputs;
            this.publicInputs = PublicCircuitPublicInputs.empty();
            this.publicInputs.callContext = callContext;
            this.publicInputs.argsHash = argsHash;
        }
        return pedersenHash([this.contractAddress, this.functionData.hash(), this.publicInputs.hash()].map(f => f.toBuffer()), GeneratorIndex.CALL_STACK_ITEM);
    }
    /**
     * Creates a new CallRequest with values of the calling contract.
     * @returns A CallRequest instance with the contract address, caller context, and the hash of the call stack item.
     */
    toCallRequest(parentCallContext) {
        if (this.isEmpty()) {
            return CallRequest.empty();
        }
        const currentCallContext = this.publicInputs.callContext;
        const callerContext = currentCallContext.isDelegateCall
            ? new CallerContext(parentCallContext.msgSender, parentCallContext.storageContractAddress)
            : CallerContext.empty();
        // todo: populate side effect counters correctly
        return new CallRequest(this.hash(), parentCallContext.storageContractAddress, callerContext, Fr.ZERO, Fr.ZERO);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2NhbGxfc3RhY2tfaXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL3B1YmxpY19jYWxsX3N0YWNrX2l0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUczRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFOUU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUJBQW1CO0lBQzlCO0lBQ0U7O09BRUc7SUFDSSxlQUE2QjtJQUNwQzs7T0FFRztJQUNJLFlBQTBCO0lBQ2pDOztPQUVHO0lBQ0ksWUFBdUM7SUFDOUM7O09BRUc7SUFDSSxrQkFBMkI7UUFaM0Isb0JBQWUsR0FBZixlQUFlLENBQWM7UUFJN0IsaUJBQVksR0FBWixZQUFZLENBQWM7UUFJMUIsaUJBQVksR0FBWixZQUFZLENBQTJCO1FBSXZDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBUztJQUNqQyxDQUFDO0lBRUosTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFxQztRQUNwRCxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLGtCQUFr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