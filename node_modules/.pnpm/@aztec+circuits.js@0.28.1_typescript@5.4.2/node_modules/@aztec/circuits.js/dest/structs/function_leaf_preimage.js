import { FunctionSelector } from '@aztec/foundation/abi';
import { pedersenHash } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { FUNCTION_LEAF_PREIMAGE_LENGTH, GeneratorIndex } from '../constants.gen.js';
/**
 * A class representing the "preimage" of a function tree leaf.
 */
export class FunctionLeafPreimage {
    constructor(
    /**
     * Function selector.
     */
    functionSelector, 
    /**
     * Indicates whether the function is only callable by self or not.
     */
    isInternal, 
    /**
     * Indicates whether the function is private or public.
     */
    isPrivate, 
    /**
     * Verification key hash of the function.
     */
    vkHash, 
    /**
     * Hash of the ACIR of the function.
     */
    acirHash) {
        this.functionSelector = functionSelector;
        this.isInternal = isInternal;
        this.isPrivate = isPrivate;
        this.vkHash = vkHash;
        this.acirHash = acirHash;
    }
    static getFields(fields) {
        return [fields.functionSelector, fields.isInternal, fields.isPrivate, fields.vkHash, fields.acirHash];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...FunctionLeafPreimage.getFields(this));
    }
    toFields() {
        const fields = serializeToFields(...FunctionLeafPreimage.getFields(this));
        if (fields.length !== FUNCTION_LEAF_PREIMAGE_LENGTH) {
            throw new Error(`Invalid number of fields for FunctionLeafPreimage. Expected ${FUNCTION_LEAF_PREIMAGE_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of FunctionLeafPreimage.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new FunctionLeafPreimage(reader.readObject(FunctionSelector), reader.readBoolean(), reader.readBoolean(), Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    hash() {
        return pedersenHash(this.toFields().map(field => field.toBuffer()), GeneratorIndex.FUNCTION_LEAF);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25fbGVhZl9wcmVpbWFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL2Z1bmN0aW9uX2xlYWZfcHJlaW1hZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHakcsT0FBTyxFQUFFLDZCQUE2QixFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXBGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFvQjtJQUMvQjtJQUNFOztPQUVHO0lBQ0ksZ0JBQWtDO0lBQ3pDOztPQUVHO0lBQ0ksVUFBbUI7SUFDMUI7O09BRUc7SUFDSSxTQUFrQjtJQUN6Qjs7T0FFRztJQUNJLE1BQVU7SUFDakI7O09BRUc7SUFDSSxRQUFZO1FBaEJaLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFJbEMsZUFBVSxHQUFWLFVBQVUsQ0FBUztRQUluQixjQUFTLEdBQVQsU0FBUyxDQUFTO1FBSWxCLFdBQU0sR0FBTixNQUFNLENBQUk7UUFJVixhQUFRLEdBQVIsUUFBUSxDQUFJO0lBQ2xCLENBQUM7SUFFSixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQXNDO1FBQ3JELE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBVSxDQUFDO0lBQ2pILENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssNkJBQTZCLEVBQUUsQ0FBQztZQUNwRCxNQUFNLElBQUksS0FBSyxDQUNiLCtEQUErRCw2QkFBNkIsU0FBUyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQ3JILENBQUM7UUFDSixDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLG9CQUFvQixDQUM3QixNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQ25DLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFDcEIsTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUNwQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUN0QixDQUFDO0lBQ0osQ0FBQztJQUVELElBQUk7UUFDRixPQUFPLFlBQVksQ0FDakIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUM5QyxjQUFjLENBQUMsYUFBYSxDQUM3QixDQUFDO0lBQ0osQ0FBQztDQUNGIn0=