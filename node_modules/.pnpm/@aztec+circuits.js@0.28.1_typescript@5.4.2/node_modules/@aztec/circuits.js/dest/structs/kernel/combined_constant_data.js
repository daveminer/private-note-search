import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { Header } from '../header.js';
import { TxContext } from '../tx_context.js';
/**
 * Data that is constant/not modified by neither of the kernels.
 */
export class CombinedConstantData {
    constructor(
    /**
     * Header of a block whose state is used during execution (not the block the transaction is included in).
     */
    historicalHeader, 
    /**
     * Context of the transaction.
     *
     * Note: `chainId` and `version` in txContext are not redundant to the values in
     * self.historical_header.global_variables because they can be different in case of a protocol upgrade. In such
     * a situation we could be using header from a block before the upgrade took place but be using the updated
     * protocol to execute and prove the transaction.
     */
    txContext) {
        this.historicalHeader = historicalHeader;
        this.txContext = txContext;
    }
    toBuffer() {
        return serializeToBuffer(this.historicalHeader, this.txContext);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or buffer reader to read from.
     * @returns A new instance of CombinedConstantData.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new CombinedConstantData(reader.readObject(Header), reader.readObject(TxContext));
    }
    static empty() {
        return new CombinedConstantData(Header.empty(), TxContext.empty());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluZWRfY29uc3RhbnRfZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL2tlcm5lbC9jb21iaW5lZF9jb25zdGFudF9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUU5RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU3Qzs7R0FFRztBQUNILE1BQU0sT0FBTyxvQkFBb0I7SUFDL0I7SUFDRTs7T0FFRztJQUNJLGdCQUF3QjtJQUMvQjs7Ozs7OztPQU9HO0lBQ0ksU0FBb0I7UUFUcEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFRO1FBU3hCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFDMUIsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSztRQUNWLE9BQU8sSUFBSSxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQztDQUNGIn0=