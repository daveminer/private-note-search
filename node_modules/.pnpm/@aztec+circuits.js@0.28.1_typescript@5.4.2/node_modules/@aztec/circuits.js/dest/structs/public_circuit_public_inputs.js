import { makeTuple } from '@aztec/foundation/array';
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { isArrayEmpty } from '@aztec/foundation/collection';
import { pedersenHash } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { GeneratorIndex, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH, RETURN_VALUES_LENGTH, } from '../constants.gen.js';
import { CallContext } from './call_context.js';
import { ContractStorageRead } from './contract_storage_read.js';
import { ContractStorageUpdateRequest } from './contract_storage_update_request.js';
import { Header } from './header.js';
import { L2ToL1Message } from './l2_to_l1_message.js';
import { ReadRequest } from './read_request.js';
import { SideEffect, SideEffectLinkedToNoteHash } from './side_effects.js';
/**
 * Public inputs to a public circuit.
 */
export class PublicCircuitPublicInputs {
    constructor(
    /**
     * Current call context.
     */
    callContext, 
    /**
     * Pedersen hash of the arguments of the call.
     */
    argsHash, 
    /**
     * Return values of the call.
     */
    returnValues, 
    /**
     * Nullifier read requests executed during the call.
     */
    nullifierReadRequests, 
    /**
     * Nullifier non existent read requests executed during the call.
     */
    nullifierNonExistentReadRequests, 
    /**
     * Contract storage update requests executed during the call.
     */
    contractStorageUpdateRequests, 
    /**
     * Contract storage reads executed during the call.
     */
    contractStorageReads, 
    /**
     * Public call stack of the current kernel iteration.
     */
    publicCallStackHashes, 
    /**
     * New note hashes created within a public execution call
     */
    newNoteHashes, 
    /**
     * New nullifiers created within a public execution call
     */
    newNullifiers, 
    /**
     * New L2 to L1 messages generated during the call.
     */
    newL2ToL1Msgs, 
    /**
     * The side effect counter when this context was started.
     */
    startSideEffectCounter, 
    /**
     * The side effect counter when this context finished.
     */
    endSideEffectCounter, 
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash, 
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength, 
    /**
     * Header of a block whose state is used during public execution. Set by sequencer to be a header of a block
     * previous to the one in which the tx is included.
     */
    historicalHeader, 
    /**
     * Address of the prover.
     */
    proverAddress, 
    /**
     * Flag indicating if the call was reverted.
     */
    reverted) {
        this.callContext = callContext;
        this.argsHash = argsHash;
        this.returnValues = returnValues;
        this.nullifierReadRequests = nullifierReadRequests;
        this.nullifierNonExistentReadRequests = nullifierNonExistentReadRequests;
        this.contractStorageUpdateRequests = contractStorageUpdateRequests;
        this.contractStorageReads = contractStorageReads;
        this.publicCallStackHashes = publicCallStackHashes;
        this.newNoteHashes = newNoteHashes;
        this.newNullifiers = newNullifiers;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.startSideEffectCounter = startSideEffectCounter;
        this.endSideEffectCounter = endSideEffectCounter;
        this.unencryptedLogsHash = unencryptedLogsHash;
        this.unencryptedLogPreimagesLength = unencryptedLogPreimagesLength;
        this.historicalHeader = historicalHeader;
        this.proverAddress = proverAddress;
        this.reverted = reverted;
    }
    /**
     * Create PublicCircuitPublicInputs from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PublicCircuitPublicInputs object.
     */
    static from(fields) {
        return new PublicCircuitPublicInputs(...PublicCircuitPublicInputs.getFields(fields));
    }
    /**
     * Returns an empty instance.
     * @returns An empty instance.
     */
    static empty() {
        return new PublicCircuitPublicInputs(CallContext.empty(), Fr.ZERO, makeTuple(RETURN_VALUES_LENGTH, Fr.zero), makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_CALL, ReadRequest.empty), makeTuple(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, ReadRequest.empty), makeTuple(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, ContractStorageUpdateRequest.empty), makeTuple(MAX_PUBLIC_DATA_READS_PER_CALL, ContractStorageRead.empty), makeTuple(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, Fr.zero), makeTuple(MAX_NEW_NOTE_HASHES_PER_CALL, SideEffect.empty), makeTuple(MAX_NEW_NULLIFIERS_PER_CALL, SideEffectLinkedToNoteHash.empty), makeTuple(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, L2ToL1Message.empty), Fr.ZERO, Fr.ZERO, makeTuple(2, Fr.zero), Fr.ZERO, Header.empty(), AztecAddress.ZERO, false);
    }
    isEmpty() {
        const isSideEffectArrayEmpty = (arr) => isArrayEmpty(arr, item => item.isEmpty());
        const isSideEffectLinkedArrayEmpty = (arr) => isArrayEmpty(arr, item => item.isEmpty());
        const isFrArrayEmpty = (arr) => isArrayEmpty(arr, item => item.isZero());
        return (this.callContext.isEmpty() &&
            this.argsHash.isZero() &&
            isFrArrayEmpty(this.returnValues) &&
            isArrayEmpty(this.nullifierReadRequests, item => item.isEmpty()) &&
            isArrayEmpty(this.nullifierNonExistentReadRequests, item => item.isEmpty()) &&
            isArrayEmpty(this.contractStorageUpdateRequests, item => item.isEmpty()) &&
            isArrayEmpty(this.contractStorageReads, item => item.isEmpty()) &&
            isFrArrayEmpty(this.publicCallStackHashes) &&
            isSideEffectArrayEmpty(this.newNoteHashes) &&
            isSideEffectLinkedArrayEmpty(this.newNullifiers) &&
            isArrayEmpty(this.newL2ToL1Msgs, item => item.isEmpty()) &&
            this.startSideEffectCounter.isZero() &&
            this.endSideEffectCounter.isZero() &&
            isFrArrayEmpty(this.unencryptedLogsHash) &&
            this.unencryptedLogPreimagesLength.isZero() &&
            this.historicalHeader.isEmpty() &&
            this.proverAddress.isZero() &&
            this.reverted === false);
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.callContext,
            fields.argsHash,
            fields.returnValues,
            fields.nullifierReadRequests,
            fields.nullifierNonExistentReadRequests,
            fields.contractStorageUpdateRequests,
            fields.contractStorageReads,
            fields.publicCallStackHashes,
            fields.newNoteHashes,
            fields.newNullifiers,
            fields.newL2ToL1Msgs,
            fields.startSideEffectCounter,
            fields.endSideEffectCounter,
            fields.unencryptedLogsHash,
            fields.unencryptedLogPreimagesLength,
            fields.historicalHeader,
            fields.proverAddress,
            fields.reverted,
        ];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...PublicCircuitPublicInputs.getFields(this));
    }
    toFields() {
        const fields = serializeToFields(...PublicCircuitPublicInputs.getFields(this));
        if (fields.length !== PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH) {
            throw new Error(`Invalid number of fields for PublicCircuitPublicInputs. Expected ${PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicCircuitPublicInputs(reader.readObject(CallContext), reader.readObject(Fr), reader.readArray(RETURN_VALUES_LENGTH, Fr), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_CALL, ReadRequest), reader.readArray(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, ReadRequest), reader.readArray(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, ContractStorageUpdateRequest), reader.readArray(MAX_PUBLIC_DATA_READS_PER_CALL, ContractStorageRead), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, Fr), reader.readArray(MAX_NEW_NOTE_HASHES_PER_CALL, SideEffect), reader.readArray(MAX_NEW_NULLIFIERS_PER_CALL, SideEffectLinkedToNoteHash), reader.readArray(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, L2ToL1Message), reader.readObject(Fr), reader.readObject(Fr), reader.readArray(NUM_FIELDS_PER_SHA256, Fr), reader.readObject(Fr), reader.readObject(Header), reader.readObject(AztecAddress), reader.readBoolean());
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PublicCircuitPublicInputs(CallContext.fromFields(reader), reader.readField(), reader.readFieldArray(RETURN_VALUES_LENGTH), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_CALL, ReadRequest), reader.readArray(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, ReadRequest), reader.readArray(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, ContractStorageUpdateRequest), reader.readArray(MAX_PUBLIC_DATA_READS_PER_CALL, ContractStorageRead), reader.readFieldArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL), reader.readArray(MAX_NEW_NOTE_HASHES_PER_CALL, SideEffect), reader.readArray(MAX_NEW_NULLIFIERS_PER_CALL, SideEffectLinkedToNoteHash), reader.readArray(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, L2ToL1Message), reader.readField(), reader.readField(), reader.readFieldArray(NUM_FIELDS_PER_SHA256), reader.readField(), Header.fromFields(reader), AztecAddress.fromFields(reader), reader.readBoolean());
    }
    hash() {
        return pedersenHash(this.toFields().map(field => field.toBuffer()), GeneratorIndex.PUBLIC_CIRCUIT_PUBLIC_INPUTS);
    }
}
//# sourceMappingURL=data:application/json;base64,