import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { NUM_FIELDS_PER_SHA256, } from '../../constants.gen.js';
import { AggregationObject } from '../aggregation_object.js';
import { Header } from '../header.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
/**
 * Represents inputs of the root rollup circuit.
 */
export class RootRollupInputs {
    constructor(
    /**
     * The previous rollup data.
     * Note: Root rollup circuit is the latest circuit the chain of circuits and the previous rollup data is the data
     * from 2 merge or base rollup circuits.
     */
    previousRollupData, 
    /**
     * The original and converted roots of the L1 to L2 messages subtrees.
     */
    l1ToL2Roots, 
    /**
     * New L1 to L2 messages.
     */
    newL1ToL2Messages, 
    /**
     * Sibling path of the new L1 to L2 message tree root.
     */
    newL1ToL2MessageTreeRootSiblingPath, 
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessageTreeSnapshot, 
    /**
     * Snapshot of the historical block roots tree at the start of the rollup.
     */
    startArchiveSnapshot, 
    /**
     * Sibling path of the new block tree root.
     */
    newArchiveSiblingPath) {
        this.previousRollupData = previousRollupData;
        this.l1ToL2Roots = l1ToL2Roots;
        this.newL1ToL2Messages = newL1ToL2Messages;
        this.newL1ToL2MessageTreeRootSiblingPath = newL1ToL2MessageTreeRootSiblingPath;
        this.startL1ToL2MessageTreeSnapshot = startL1ToL2MessageTreeSnapshot;
        this.startArchiveSnapshot = startArchiveSnapshot;
        this.newArchiveSiblingPath = newArchiveSiblingPath;
    }
    toBuffer() {
        return serializeToBuffer(...RootRollupInputs.getFields(this));
    }
    static from(fields) {
        return new RootRollupInputs(...RootRollupInputs.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.previousRollupData,
            fields.l1ToL2Roots,
            fields.newL1ToL2Messages,
            fields.newL1ToL2MessageTreeRootSiblingPath,
            fields.startL1ToL2MessageTreeSnapshot,
            fields.startArchiveSnapshot,
            fields.newArchiveSiblingPath,
        ];
    }
}
/**
 * Represents public inputs of the root rollup circuit.
 *
 * NOTE: in practice, we'll hash all of this up into a single public input, for cheap on-chain verification.
 */
export class RootRollupPublicInputs {
    constructor(
    /** Native aggregation state at the end of the rollup. */
    aggregationObject, 
    /** Snapshot of archive tree after this block/rollup been processed */
    archive, 
    /** A header of an L2 block. */
    header, 
    /** Hash of the L1 to L2 messages. */
    l1ToL2MessagesHash) {
        this.aggregationObject = aggregationObject;
        this.archive = archive;
        this.header = header;
        this.l1ToL2MessagesHash = l1ToL2MessagesHash;
    }
    static getFields(fields) {
        return [fields.aggregationObject, fields.archive, fields.header, fields.l1ToL2MessagesHash];
    }
    toBuffer() {
        return serializeToBuffer(...RootRollupPublicInputs.getFields(this));
    }
    static from(fields) {
        return new RootRollupPublicInputs(...RootRollupPublicInputs.getFields(fields));
    }
    /**
     * Deserializes a buffer into a `RootRollupPublicInputs` object.
     * @param buffer - The buffer to deserialize.
     * @returns The deserialized `RootRollupPublicInputs` object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new RootRollupPublicInputs(reader.readObject(AggregationObject), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(Header), reader.readArray(NUM_FIELDS_PER_SHA256, Fr));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdF9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvcm9vdF9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQVMsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUdyRixPQUFPLEVBSUwscUJBQXFCLEdBQ3RCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV0QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUd4RTs7R0FFRztBQUNILE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0I7SUFDRTs7OztPQUlHO0lBQ0ksa0JBQTREO0lBQ25FOztPQUVHO0lBQ0ksV0FBNEI7SUFDbkM7O09BRUc7SUFDSSxpQkFBd0U7SUFDL0U7O09BRUc7SUFDSSxtQ0FBK0Y7SUFDdEc7O09BRUc7SUFDSSw4QkFBc0Q7SUFDN0Q7O09BRUc7SUFDSSxvQkFBNEM7SUFDbkQ7O09BRUc7SUFDSSxxQkFBdUQ7UUF4QnZELHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMEM7UUFJNUQsZ0JBQVcsR0FBWCxXQUFXLENBQWlCO1FBSTVCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBdUQ7UUFJeEUsd0NBQW1DLEdBQW5DLG1DQUFtQyxDQUE0RDtRQUkvRixtQ0FBOEIsR0FBOUIsOEJBQThCLENBQXdCO1FBSXRELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBd0I7UUFJNUMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFrQztJQUM3RCxDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFrQztRQUM1QyxPQUFPLElBQUksZ0JBQWdCLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFrQztRQUNqRCxPQUFPO1lBQ0wsTUFBTSxDQUFDLGtCQUFrQjtZQUN6QixNQUFNLENBQUMsV0FBVztZQUNsQixNQUFNLENBQUMsaUJBQWlCO1lBQ3hCLE1BQU0sQ0FBQyxtQ0FBbUM7WUFDMUMsTUFBTSxDQUFDLDhCQUE4QjtZQUNyQyxNQUFNLENBQUMsb0JBQW9CO1lBQzNCLE1BQU0sQ0FBQyxxQkFBcUI7U0FDcEIsQ0FBQztJQUNiLENBQUM7Q0FDRjtBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sc0JBQXNCO0lBQ2pDO0lBQ0UseURBQXlEO0lBQ2xELGlCQUFvQztJQUMzQyxzRUFBc0U7SUFDL0QsT0FBK0I7SUFDdEMsK0JBQStCO0lBQ3hCLE1BQWM7SUFDckIscUNBQXFDO0lBQzlCLGtCQUE0QjtRQU41QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBRXBDLFlBQU8sR0FBUCxPQUFPLENBQXdCO1FBRS9CLFdBQU0sR0FBTixNQUFNLENBQVE7UUFFZCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVU7SUFDbEMsQ0FBQztJQUVKLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBd0M7UUFDdkQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixDQUFVLENBQUM7SUFDdkcsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLEdBQUcsc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBd0M7UUFDbEQsT0FBTyxJQUFJLHNCQUFzQixDQUFDLEdBQUcsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQ3BELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLHNCQUFzQixDQUMvQixNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEVBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFDekIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQWEsQ0FDeEQsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9