import { makeTuple } from '@aztec/foundation/array';
import { isArrayEmpty } from '@aztec/foundation/collection';
import { pedersenHash } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { GeneratorIndex, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, NUM_FIELDS_PER_SHA256, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH, RETURN_VALUES_LENGTH, } from '../constants.gen.js';
import { Header } from '../structs/header.js';
import { SideEffect, SideEffectLinkedToNoteHash } from '../structs/side_effects.js';
import { CallContext } from './call_context.js';
import { L2ToL1Message } from './l2_to_l1_message.js';
import { NullifierKeyValidationRequest } from './nullifier_key_validation_request.js';
import { ReadRequest } from './read_request.js';
/**
 * Public inputs to a private circuit.
 * @see abis/private_circuit_public_inputs.hpp.
 */
export class PrivateCircuitPublicInputs {
    constructor(
    /**
     * Context of the call corresponding to this private circuit execution.
     */
    callContext, 
    /**
     * Pedersen hash of function arguments.
     */
    argsHash, 
    /**
     * Return values of the corresponding function call.
     */
    returnValues, 
    /**
     * The side-effect counter under which all side effects are non-revertible.
     */
    minRevertibleSideEffectCounter, 
    /**
     * Read requests created by the corresponding function call.
     */
    noteHashReadRequests, 
    /**
     * Nullifier read requests created by the corresponding function call.
     */
    nullifierReadRequests, 
    /**
     * Nullifier key validation requests created by the corresponding function call.
     */
    nullifierKeyValidationRequests, 
    /**
     * New note hashes created by the corresponding function call.
     */
    newNoteHashes, 
    /**
     * New nullifiers created by the corresponding function call.
     */
    newNullifiers, 
    /**
     * Private call stack at the current kernel iteration.
     */
    privateCallStackHashes, 
    /**
     * Public call stack at the current kernel iteration.
     */
    publicCallStackHashes, 
    /**
     * New L2 to L1 messages created by the corresponding function call.
     */
    newL2ToL1Msgs, 
    /**
     * The side effect counter at the start of this call.
     */
    startSideEffectCounter, 
    /**
     * The end side effect counter for this call.
     */
    endSideEffectCounter, 
    /**
     * Hash of the encrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash, 
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash, 
    /**
     * Length of the encrypted log preimages emitted in this function call.
     * Note: Here so that the gas cost of this request can be measured by circuits, without actually needing to feed
     *       in the variable-length data.
     */
    encryptedLogPreimagesLength, 
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength, 
    /**
     * Header of a block whose state is used during private execution (not the block the transaction is included in).
     */
    historicalHeader, 
    /**
     * Chain Id of the instance.
     *
     * Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because
     * they can be different in case of a protocol upgrade. In such a situation we could be using header from a block
     * before the upgrade took place but be using the updated protocol to execute and prove the transaction.
     */
    chainId, 
    /**
     * Version of the instance.
     */
    version) {
        this.callContext = callContext;
        this.argsHash = argsHash;
        this.returnValues = returnValues;
        this.minRevertibleSideEffectCounter = minRevertibleSideEffectCounter;
        this.noteHashReadRequests = noteHashReadRequests;
        this.nullifierReadRequests = nullifierReadRequests;
        this.nullifierKeyValidationRequests = nullifierKeyValidationRequests;
        this.newNoteHashes = newNoteHashes;
        this.newNullifiers = newNullifiers;
        this.privateCallStackHashes = privateCallStackHashes;
        this.publicCallStackHashes = publicCallStackHashes;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.startSideEffectCounter = startSideEffectCounter;
        this.endSideEffectCounter = endSideEffectCounter;
        this.encryptedLogsHash = encryptedLogsHash;
        this.unencryptedLogsHash = unencryptedLogsHash;
        this.encryptedLogPreimagesLength = encryptedLogPreimagesLength;
        this.unencryptedLogPreimagesLength = unencryptedLogPreimagesLength;
        this.historicalHeader = historicalHeader;
        this.chainId = chainId;
        this.version = version;
    }
    /**
     * Create PrivateCircuitPublicInputs from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PrivateCircuitPublicInputs object.
     */
    static from(fields) {
        return new PrivateCircuitPublicInputs(...PrivateCircuitPublicInputs.getFields(fields));
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateCircuitPublicInputs(reader.readObject(CallContext), reader.readObject(Fr), reader.readArray(RETURN_VALUES_LENGTH, Fr), reader.readObject(Fr), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, SideEffect), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_CALL, ReadRequest), reader.readArray(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NullifierKeyValidationRequest), reader.readArray(MAX_NEW_NOTE_HASHES_PER_CALL, SideEffect), reader.readArray(MAX_NEW_NULLIFIERS_PER_CALL, SideEffectLinkedToNoteHash), reader.readArray(MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, Fr), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, Fr), reader.readArray(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, L2ToL1Message), reader.readObject(Fr), reader.readObject(Fr), reader.readArray(NUM_FIELDS_PER_SHA256, Fr), reader.readArray(NUM_FIELDS_PER_SHA256, Fr), reader.readObject(Fr), reader.readObject(Fr), reader.readObject(Header), reader.readObject(Fr), reader.readObject(Fr));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PrivateCircuitPublicInputs(reader.readObject(CallContext), reader.readField(), reader.readFieldArray(RETURN_VALUES_LENGTH), reader.readField(), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, SideEffect), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_CALL, ReadRequest), reader.readArray(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NullifierKeyValidationRequest), reader.readArray(MAX_NEW_NOTE_HASHES_PER_CALL, SideEffect), reader.readArray(MAX_NEW_NULLIFIERS_PER_CALL, SideEffectLinkedToNoteHash), reader.readFieldArray(MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL), reader.readFieldArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL), reader.readArray(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, L2ToL1Message), reader.readField(), reader.readField(), reader.readFieldArray(NUM_FIELDS_PER_SHA256), reader.readFieldArray(NUM_FIELDS_PER_SHA256), reader.readField(), reader.readField(), reader.readObject(Header), reader.readField(), reader.readField());
    }
    /**
     * Create an empty PrivateCircuitPublicInputs.
     * @returns An empty PrivateCircuitPublicInputs object.
     */
    static empty() {
        return new PrivateCircuitPublicInputs(CallContext.empty(), Fr.ZERO, makeTuple(RETURN_VALUES_LENGTH, Fr.zero), Fr.ZERO, makeTuple(MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, SideEffect.empty), makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_CALL, ReadRequest.empty), makeTuple(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NullifierKeyValidationRequest.empty), makeTuple(MAX_NEW_NOTE_HASHES_PER_CALL, SideEffect.empty), makeTuple(MAX_NEW_NULLIFIERS_PER_CALL, SideEffectLinkedToNoteHash.empty), makeTuple(MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, Fr.zero), makeTuple(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, Fr.zero), makeTuple(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, L2ToL1Message.empty), Fr.ZERO, Fr.ZERO, makeTuple(NUM_FIELDS_PER_SHA256, Fr.zero), makeTuple(NUM_FIELDS_PER_SHA256, Fr.zero), Fr.ZERO, Fr.ZERO, Header.empty(), Fr.ZERO, Fr.ZERO);
    }
    isEmpty() {
        // eslint-disable-next-line jsdoc/require-jsdoc
        const isEmptyArray = (arr) => isArrayEmpty(arr, item => item.isEmpty());
        // eslint-disable-next-line jsdoc/require-jsdoc
        const isZeroArray = (arr) => isArrayEmpty(arr, item => item.isZero());
        return (this.callContext.isEmpty() &&
            this.argsHash.isZero() &&
            isZeroArray(this.returnValues) &&
            this.minRevertibleSideEffectCounter.isZero() &&
            isEmptyArray(this.noteHashReadRequests) &&
            isEmptyArray(this.nullifierReadRequests) &&
            isEmptyArray(this.nullifierKeyValidationRequests) &&
            isEmptyArray(this.newNoteHashes) &&
            isEmptyArray(this.newNullifiers) &&
            isZeroArray(this.privateCallStackHashes) &&
            isZeroArray(this.publicCallStackHashes) &&
            isEmptyArray(this.newL2ToL1Msgs) &&
            isZeroArray(this.encryptedLogsHash) &&
            isZeroArray(this.unencryptedLogsHash) &&
            this.encryptedLogPreimagesLength.isZero() &&
            this.unencryptedLogPreimagesLength.isZero() &&
            this.historicalHeader.isEmpty() &&
            this.chainId.isZero() &&
            this.version.isZero());
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.callContext,
            fields.argsHash,
            fields.returnValues,
            fields.minRevertibleSideEffectCounter,
            fields.noteHashReadRequests,
            fields.nullifierReadRequests,
            fields.nullifierKeyValidationRequests,
            fields.newNoteHashes,
            fields.newNullifiers,
            fields.privateCallStackHashes,
            fields.publicCallStackHashes,
            fields.newL2ToL1Msgs,
            fields.startSideEffectCounter,
            fields.endSideEffectCounter,
            fields.encryptedLogsHash,
            fields.unencryptedLogsHash,
            fields.encryptedLogPreimagesLength,
            fields.unencryptedLogPreimagesLength,
            fields.historicalHeader,
            fields.chainId,
            fields.version,
        ];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...PrivateCircuitPublicInputs.getFields(this));
    }
    /**
     * Serialize this as a field array.
     */
    toFields() {
        const fields = serializeToFields(...PrivateCircuitPublicInputs.getFields(this));
        if (fields.length !== PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH) {
            throw new Error(`Invalid number of fields for PrivateCircuitPublicInputs. Expected ${PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    hash() {
        return pedersenHash(this.toFields().map(field => field.toBuffer()), GeneratorIndex.PRIVATE_CIRCUIT_PUBLIC_INPUTS);
    }
}
//# sourceMappingURL=data:application/json;base64,