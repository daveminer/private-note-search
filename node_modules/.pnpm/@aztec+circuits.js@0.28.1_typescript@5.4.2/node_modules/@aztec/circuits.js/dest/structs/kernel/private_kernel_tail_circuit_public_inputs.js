import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { AggregationObject } from '../aggregation_object.js';
import { PrivateAccumulatedNonRevertibleData, PrivateAccumulatedRevertibleData } from './combined_accumulated_data.js';
import { CombinedConstantData } from './combined_constant_data.js';
/**
 * Output from to the private kernel circuit - tail call.
 */
export class PrivateKernelTailCircuitPublicInputs {
    constructor(
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject, // Contains the aggregated proof of all previous kernel iterations
    /**
     * Accumulated side effects that are not revertible.
     */
    endNonRevertibleData, 
    /**
     * Data accumulated from both public and private circuits.
     */
    end, 
    /**
     * Data which is not modified by the circuits.
     */
    constants, 
    /**
     * Indicates whether the setup kernel is needed.
     */
    needsSetup, 
    /**
     * Indicates whether the app logic kernel is needed.
     */
    needsAppLogic, 
    /**
     * Indicates whether the teardown kernel is needed.
     */
    needsTeardown) {
        this.aggregationObject = aggregationObject;
        this.endNonRevertibleData = endNonRevertibleData;
        this.end = end;
        this.constants = constants;
        this.needsSetup = needsSetup;
        this.needsAppLogic = needsAppLogic;
        this.needsTeardown = needsTeardown;
    }
    toBuffer() {
        return serializeToBuffer(this.aggregationObject, this.endNonRevertibleData, this.end, this.constants, this.needsSetup, this.needsAppLogic, this.needsTeardown);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of PrivateKernelTailCircuitPublicInputs.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateKernelTailCircuitPublicInputs(reader.readObject(AggregationObject), reader.readObject(PrivateAccumulatedNonRevertibleData), reader.readObject(PrivateAccumulatedRevertibleData), reader.readObject(CombinedConstantData), reader.readBoolean(), reader.readBoolean(), reader.readBoolean());
    }
    static empty() {
        return new PrivateKernelTailCircuitPublicInputs(AggregationObject.makeFake(), PrivateAccumulatedNonRevertibleData.empty(), PrivateAccumulatedRevertibleData.empty(), CombinedConstantData.empty(), true, true, true);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9rZXJuZWxfdGFpbF9jaXJjdWl0X3B1YmxpY19pbnB1dHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHJpdmF0ZV9rZXJuZWxfdGFpbF9jaXJjdWl0X3B1YmxpY19pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRW5FOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9DQUFvQztJQUMvQztJQUNFOztPQUVHO0lBQ0ksaUJBQW9DLEVBQUUsa0VBQWtFO0lBQy9HOztPQUVHO0lBQ0ksb0JBQXlEO0lBQ2hFOztPQUVHO0lBQ0ksR0FBcUM7SUFDNUM7O09BRUc7SUFDSSxTQUErQjtJQUN0Qzs7T0FFRztJQUNJLFVBQW1CO0lBQzFCOztPQUVHO0lBQ0ksYUFBc0I7SUFDN0I7O09BRUc7SUFDSSxhQUFzQjtRQXhCdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUlwQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXFDO1FBSXpELFFBQUcsR0FBSCxHQUFHLENBQWtDO1FBSXJDLGNBQVMsR0FBVCxTQUFTLENBQXNCO1FBSS9CLGVBQVUsR0FBVixVQUFVLENBQVM7UUFJbkIsa0JBQWEsR0FBYixhQUFhLENBQVM7UUFJdEIsa0JBQWEsR0FBYixhQUFhLENBQVM7SUFDNUIsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUN0QixJQUFJLENBQUMsaUJBQWlCLEVBQ3RCLElBQUksQ0FBQyxvQkFBb0IsRUFDekIsSUFBSSxDQUFDLEdBQUcsRUFDUixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FDbkIsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxvQ0FBb0MsQ0FDN0MsTUFBTSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUNwQyxNQUFNLENBQUMsVUFBVSxDQUFDLG1DQUFtQyxDQUFDLEVBQ3RELE1BQU0sQ0FBQyxVQUFVLENBQUMsZ0NBQWdDLENBQUMsRUFDbkQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUN2QyxNQUFNLENBQUMsV0FBVyxFQUFFLEVBQ3BCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFDcEIsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUNyQixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO1FBQ1YsT0FBTyxJQUFJLG9DQUFvQyxDQUM3QyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsRUFDNUIsbUNBQW1DLENBQUMsS0FBSyxFQUFFLEVBQzNDLGdDQUFnQyxDQUFDLEtBQUssRUFBRSxFQUN4QyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsRUFDNUIsSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLENBQ0wsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9