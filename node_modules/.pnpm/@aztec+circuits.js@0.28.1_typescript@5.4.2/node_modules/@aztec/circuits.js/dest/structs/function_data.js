import { FunctionSelector, FunctionType } from '@aztec/foundation/abi';
import { pedersenHash } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { FUNCTION_DATA_LENGTH, GeneratorIndex } from '../constants.gen.js';
/**
 * Function description for circuit.
 * TODO(palla/purge-old-contract-deploy): Remove constructor and possibly internal flags from this struct.
 */
export class FunctionData {
    constructor(
    /**
     * Function selector of the function being called.
     */
    selector, 
    /**
     * Indicates whether the function is only callable by self or not.
     */
    isInternal, 
    /**
     * Indicates whether the function is private or public.
     */
    isPrivate, 
    /**
     * Indicates whether the function is a constructor.
     */
    isConstructor) {
        this.selector = selector;
        this.isInternal = isInternal;
        this.isPrivate = isPrivate;
        this.isConstructor = isConstructor;
    }
    static fromAbi(abi) {
        return new FunctionData(FunctionSelector.fromNameAndParameters(abi.name, abi.parameters), abi.isInternal, abi.functionType === FunctionType.SECRET, abi.name === 'constructor');
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.selector, this.isInternal, this.isPrivate, this.isConstructor);
    }
    toFields() {
        const fields = [
            this.selector.toField(),
            new Fr(this.isInternal),
            new Fr(this.isPrivate),
            new Fr(this.isConstructor),
        ];
        if (fields.length !== FUNCTION_DATA_LENGTH) {
            throw new Error(`Invalid number of fields for FunctionData. Expected ${FUNCTION_DATA_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    /**
     * Returns whether this instance is empty.
     * @returns True if the function selector is zero.
     */
    isEmpty() {
        return this.selector.isEmpty();
    }
    /**
     * Returns a new instance of FunctionData with zero function selector.
     * @param args - Arguments to pass to the constructor.
     * @returns A new instance of FunctionData with zero function selector.
     */
    static empty(args) {
        return new FunctionData(FunctionSelector.empty(), args?.isInternal ?? false, args?.isPrivate ?? false, args?.isConstructor ?? false);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of FunctionData.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new FunctionData(reader.readObject(FunctionSelector), reader.readBoolean(), reader.readBoolean(), reader.readBoolean());
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        const selector = FunctionSelector.fromFields(reader);
        const isInternal = reader.readBoolean();
        const isPrivate = reader.readBoolean();
        const isConstructor = reader.readBoolean();
        return new FunctionData(selector, isInternal, isPrivate, isConstructor);
    }
    hash() {
        return pedersenHash(this.toFields().map(field => field.toBuffer()), GeneratorIndex.FUNCTION_DATA);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25fZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL2Z1bmN0aW9uX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLGdCQUFnQixFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUzRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHM0U7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUFDdkI7SUFDRTs7T0FFRztJQUNJLFFBQTBCO0lBQ2pDOztPQUVHO0lBQ0ksVUFBbUI7SUFDMUI7O09BRUc7SUFDSSxTQUFrQjtJQUN6Qjs7T0FFRztJQUNJLGFBQXNCO1FBWnRCLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBSTFCLGVBQVUsR0FBVixVQUFVLENBQVM7UUFJbkIsY0FBUyxHQUFULFNBQVMsQ0FBUztRQUlsQixrQkFBYSxHQUFiLGFBQWEsQ0FBUztJQUM1QixDQUFDO0lBRUosTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFzQztRQUNuRCxPQUFPLElBQUksWUFBWSxDQUNyQixnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFDaEUsR0FBRyxDQUFDLFVBQVUsRUFDZCxHQUFHLENBQUMsWUFBWSxLQUFLLFlBQVksQ0FBQyxNQUFNLEVBQ3hDLEdBQUcsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUMzQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFP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