import { FunctionSelector } from '@aztec/foundation/abi';
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { CALL_CONTEXT_LENGTH } from '../constants.gen.js';
/**
 * Call context.
 */
export class CallContext {
    constructor(
    /**
     * Address of the account which represents the entity who invoked the call.
     */
    msgSender, 
    /**
     * The contract address against which all state changes will be stored. Not called `contractAddress` because during
     * delegate call the contract whose code is being executed may be different from the contract whose state is being
     * modified.
     */
    storageContractAddress, 
    /**
     * Address of the portal contract to the storage contract.
     */
    portalContractAddress, 
    /**
     * Function selector of the function being called.
     */
    functionSelector, 
    /**
     * Determines whether the call is a delegate call (see Ethereum's delegate call opcode for more information).
     */
    isDelegateCall, 
    /**
     * Determines whether the call is modifying state.
     */
    isStaticCall, 
    /**
     * The start side effect counter for this call context.
     */
    sideEffectCounter) {
        this.msgSender = msgSender;
        this.storageContractAddress = storageContractAddress;
        this.portalContractAddress = portalContractAddress;
        this.functionSelector = functionSelector;
        this.isDelegateCall = isDelegateCall;
        this.isStaticCall = isStaticCall;
        this.sideEffectCounter = sideEffectCounter;
    }
    /**
     * Returns a new instance of CallContext with zero msg sender, storage contract address and portal contract address.
     * @returns A new instance of CallContext with zero msg sender, storage contract address and portal contract address.
     */
    static empty() {
        return new CallContext(AztecAddress.ZERO, AztecAddress.ZERO, EthAddress.ZERO, FunctionSelector.empty(), false, false, 0);
    }
    isEmpty() {
        return (this.msgSender.isZero() &&
            this.storageContractAddress.isZero() &&
            this.portalContractAddress.isZero() &&
            this.functionSelector.isEmpty() &&
            Fr.ZERO);
    }
    static from(fields) {
        return new CallContext(...CallContext.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.msgSender,
            fields.storageContractAddress,
            fields.portalContractAddress,
            fields.functionSelector,
            fields.isDelegateCall,
            fields.isStaticCall,
            fields.sideEffectCounter,
        ];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...CallContext.getFields(this));
    }
    toFields() {
        const fields = serializeToFields(...CallContext.getFields(this));
        if (fields.length !== CALL_CONTEXT_LENGTH) {
            throw new Error(`Invalid number of fields for CallContext. Expected ${CALL_CONTEXT_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    /**
     * Deserialize this from a buffer.
     * @param buffer - The bufferable type from which to deserialize.
     * @returns The deserialized instance of PublicCallRequest.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new CallContext(reader.readObject(AztecAddress), reader.readObject(AztecAddress), reader.readObject(EthAddress), reader.readObject(FunctionSelector), reader.readBoolean(), reader.readBoolean(), reader.readNumber());
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new CallContext(reader.readObject(AztecAddress), reader.readObject(AztecAddress), reader.readObject(EthAddress), reader.readObject(FunctionSelector), reader.readBoolean(), reader.readBoolean(), reader.readU32());
    }
    equals(callContext) {
        return (callContext.msgSender.equals(this.msgSender) &&
            callContext.storageContractAddress.equals(this.storageContractAddress) &&
            callContext.portalContractAddress.equals(this.portalContractAddress) &&
            callContext.functionSelector.equals(this.functionSelector) &&
            callContext.isDelegateCall === this.isDelegateCall &&
            callContext.isStaticCall === this.isStaticCall &&
            callContext.sideEffectCounter === this.sideEffectCounter);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbF9jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvY2FsbF9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHOUcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFMUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sV0FBVztJQUN0QjtJQUNFOztPQUVHO0lBQ0ksU0FBdUI7SUFDOUI7Ozs7T0FJRztJQUNJLHNCQUFvQztJQUMzQzs7T0FFRztJQUNJLHFCQUFpQztJQUN4Qzs7T0FFRztJQUNJLGdCQUFrQztJQUN6Qzs7T0FFRztJQUNJLGNBQXVCO0lBQzlCOztPQUVHO0lBQ0ksWUFBcUI7SUFDNUI7O09BRUc7SUFDSSxpQkFBeUI7UUExQnpCLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFNdkIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFjO1FBSXBDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBWTtRQUlqQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBSWxDLG1CQUFjLEdBQWQsY0FBYyxDQUFTO1FBSXZCLGlCQUFZLEdBQVosWUFBWSxDQUFTO1FBSXJCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBUTtJQUMvQixDQUFDO0lBRUo7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLEtBQUs7UUFDakIsT0FBTyxJQUFJLFdBQVcsQ0FDcEIs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