import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { AggregationObject } from '../aggregation_object.js';
import { CombinedAccumulatedData } from './combined_accumulated_data.js';
import { CombinedConstantData } from './combined_constant_data.js';
/**
 * Outputs from the public kernel circuits.
 * All Public kernels use this shape for outputs.
 */
export class RollupKernelCircuitPublicInputs {
    constructor(
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject, // Contains the aggregated proof of all previous kernel iterations
    /**
     * Data accumulated from both public and private circuits.
     */
    end, 
    /**
     * Data which is not modified by the circuits.
     */
    constants) {
        this.aggregationObject = aggregationObject;
        this.end = end;
        this.constants = constants;
    }
    toBuffer() {
        return serializeToBuffer(this.aggregationObject, this.end, this.constants);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of RollupKernelCircuitPublicInputs.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new RollupKernelCircuitPublicInputs(reader.readObject(AggregationObject), reader.readObject(CombinedAccumulatedData), reader.readObject(CombinedConstantData));
    }
    static empty() {
        return new RollupKernelCircuitPublicInputs(AggregationObject.makeFake(), CombinedAccumulatedData.empty(), CombinedConstantData.empty());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwX2tlcm5lbF9jaXJjdWl0X3B1YmxpY19pbnB1dHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcm9sbHVwX2tlcm5lbF9jaXJjdWl0X3B1YmxpY19pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRW5FOzs7R0FHRztBQUNILE1BQU0sT0FBTywrQkFBK0I7SUFDMUM7SUFDRTs7T0FFRztJQUNJLGlCQUFvQyxFQUFFLGtFQUFrRTtJQUMvRzs7T0FFRztJQUNJLEdBQTRCO0lBQ25DOztPQUVHO0lBQ0ksU0FBK0I7UUFSL0Isc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUlwQyxRQUFHLEdBQUgsR0FBRyxDQUF5QjtRQUk1QixjQUFTLEdBQVQsU0FBUyxDQUFzQjtJQUNyQyxDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSwrQkFBK0IsQ0FDeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUNwQyxNQUFNLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLEVBQzFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FDeEMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSztRQUNWLE9BQU8sSUFBSSwrQkFBK0IsQ0FDeEMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLEVBQzVCLHVCQUF1QixDQUFDLEtBQUssRUFBRSxFQUMvQixvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FDN0IsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9