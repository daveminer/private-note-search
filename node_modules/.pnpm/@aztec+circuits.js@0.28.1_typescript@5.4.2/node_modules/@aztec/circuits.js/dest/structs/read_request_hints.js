import { makeTuple } from '@aztec/foundation/array';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { MAX_NULLIFIER_READ_REQUESTS_PER_TX, NULLIFIER_TREE_HEIGHT } from '../constants.gen.js';
import { MembershipWitness } from './membership_witness.js';
import { NullifierLeafPreimage } from './rollup/nullifier_leaf/index.js';
export var ReadRequestState;
(function (ReadRequestState) {
    ReadRequestState[ReadRequestState["NADA"] = 0] = "NADA";
    ReadRequestState[ReadRequestState["PENDING"] = 1] = "PENDING";
    ReadRequestState[ReadRequestState["SETTLED"] = 2] = "SETTLED";
})(ReadRequestState || (ReadRequestState = {}));
export class ReadRequestStatus {
    constructor(state, hintIndex) {
        this.state = state;
        this.hintIndex = hintIndex;
    }
    static nada() {
        return new ReadRequestStatus(ReadRequestState.NADA, 0);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ReadRequestStatus(reader.readNumber(), reader.readNumber());
    }
    toBuffer() {
        return serializeToBuffer(this.state, this.hintIndex);
    }
}
export class PendingReadHint {
    constructor(readRequestIndex, pendingValueIndex) {
        this.readRequestIndex = readRequestIndex;
        this.pendingValueIndex = pendingValueIndex;
    }
    static nada(readRequestLen) {
        return new PendingReadHint(readRequestLen, 0);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PendingReadHint(reader.readNumber(), reader.readNumber());
    }
    toBuffer() {
        return serializeToBuffer(this.readRequestIndex, this.pendingValueIndex);
    }
}
export class SettledReadHint {
    constructor(readRequestIndex, membershipWitness, leafPreimage) {
        this.readRequestIndex = readRequestIndex;
        this.membershipWitness = membershipWitness;
        this.leafPreimage = leafPreimage;
    }
    static nada(readRequestLen, treeHeight, emptyLeafPreimage) {
        return new SettledReadHint(readRequestLen, MembershipWitness.empty(treeHeight, 0n), emptyLeafPreimage());
    }
    static fromBuffer(buffer, treeHeight, leafPreimage) {
        const reader = BufferReader.asReader(buffer);
        return new SettledReadHint(reader.readNumber(), MembershipWitness.fromBuffer(reader, treeHeight), reader.readObject(leafPreimage));
    }
    toBuffer() {
        return serializeToBuffer(this.readRequestIndex, this.membershipWitness, this.leafPreimage);
    }
}
/**
 * Hints for read request reset circuit.
 */
export class ReadRequestResetHints {
    constructor(readRequestStatuses, 
    /**
     * The hints for read requests reading pending values.
     */
    pendingReadHints, 
    /**
     * The hints for read requests reading settled values.
     */
    settledReadHints) {
        this.readRequestStatuses = readRequestStatuses;
        this.pendingReadHints = pendingReadHints;
        this.settledReadHints = settledReadHints;
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer, readRequestLen, numPendingReads, numSettledReads, treeHeight, leafPreimageFromBuffer) {
        const reader = BufferReader.asReader(buffer);
        return new ReadRequestResetHints(reader.readArray(readRequestLen, ReadRequestStatus), reader.readArray(numPendingReads, PendingReadHint), reader.readArray(numSettledReads, {
            fromBuffer: r => SettledReadHint.fromBuffer(r, treeHeight, leafPreimageFromBuffer),
        }));
    }
    toBuffer() {
        return serializeToBuffer(this.readRequestStatuses, this.pendingReadHints, this.settledReadHints);
    }
}
export function nullifierReadRequestHintsFromBuffer(buffer) {
    return ReadRequestResetHints.fromBuffer(buffer, MAX_NULLIFIER_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX, NULLIFIER_TREE_HEIGHT, NullifierLeafPreimage);
}
export class NullifierReadRequestHintsBuilder {
    constructor() {
        this.numPendingReadHints = 0;
        this.numSettledReadHints = 0;
        this.hints = new ReadRequestResetHints(makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ReadRequestStatus.nada), makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_TX, () => PendingReadHint.nada(MAX_NULLIFIER_READ_REQUESTS_PER_TX)), makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_TX, () => SettledReadHint.nada(MAX_NULLIFIER_READ_REQUESTS_PER_TX, NULLIFIER_TREE_HEIGHT, NullifierLeafPreimage.empty)));
    }
    static empty() {
        return new NullifierReadRequestHintsBuilder().toHints();
    }
    addPendingReadRequest(readRequestIndex, nullifierIndex) {
        this.hints.readRequestStatuses[readRequestIndex] = new ReadRequestStatus(ReadRequestState.PENDING, this.numPendingReadHints);
        this.hints.pendingReadHints[this.numPendingReadHints] = new PendingReadHint(readRequestIndex, nullifierIndex);
        this.numPendingReadHints++;
    }
    addSettledReadRequest(readRequestIndex, membershipWitness, leafPreimage) {
        this.hints.readRequestStatuses[readRequestIndex] = new ReadRequestStatus(ReadRequestState.SETTLED, this.numSettledReadHints);
        this.hints.settledReadHints[this.numSettledReadHints] = new SettledReadHint(readRequestIndex, membershipWitness, leafPreimage);
        this.numSettledReadHints++;
    }
    toHints() {
        return this.hints;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZF9yZXF1ZXN0X2hpbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvcmVhZF9yZXF1ZXN0X2hpbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFTLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHckYsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFekUsTUFBTSxDQUFOLElBQVksZ0JBSVg7QUFKRCxXQUFZLGdCQUFnQjtJQUMxQix1REFBUSxDQUFBO0lBQ1IsNkRBQVcsQ0FBQTtJQUNYLDZEQUFXLENBQUE7QUFDYixDQUFDLEVBSlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUkzQjtBQUVELE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsWUFBbUIsS0FBdUIsRUFBUyxTQUFpQjtRQUFqRCxVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUFTLGNBQVMsR0FBVCxTQUFTLENBQVE7SUFBRyxDQUFDO0lBRXhFLE1BQU0sQ0FBQyxJQUFJO1FBQ1QsT0FBTyxJQUFJLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDekUs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