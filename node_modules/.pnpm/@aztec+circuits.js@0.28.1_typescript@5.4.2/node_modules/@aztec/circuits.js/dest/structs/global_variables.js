import { AztecAddress } from '@aztec/foundation/aztec-address';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { GLOBAL_VARIABLES_LENGTH } from '../constants.gen.js';
/**
 * Global variables of the L2 block.
 */
export class GlobalVariables {
    constructor(
    /** ChainId for the L2 block. */
    chainId, 
    /** Version for the L2 block. */
    version, 
    /** Block number of the L2 block. */
    blockNumber, 
    /** Timestamp of the L2 block. */
    timestamp, 
    /** Recipient of block reward. */
    coinbase, 
    /** Address to receive fees. */
    feeRecipient) {
        this.chainId = chainId;
        this.version = version;
        this.blockNumber = blockNumber;
        this.timestamp = timestamp;
        this.coinbase = coinbase;
        this.feeRecipient = feeRecipient;
    }
    static from(fields) {
        return new GlobalVariables(...GlobalVariables.getFields(fields));
    }
    static empty() {
        return new GlobalVariables(Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, EthAddress.ZERO, AztecAddress.ZERO);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new GlobalVariables(Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(EthAddress), reader.readObject(AztecAddress));
    }
    static fromJSON(obj) {
        return new GlobalVariables(Fr.fromString(obj.chainId), Fr.fromString(obj.version), Fr.fromString(obj.blockNumber), Fr.fromString(obj.timestamp), EthAddress.fromString(obj.coinbase), AztecAddress.fromString(obj.feeRecipient));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new GlobalVariables(reader.readField(), reader.readField(), reader.readField(), reader.readField(), EthAddress.fromField(reader.readField()), AztecAddress.fromField(reader.readField()));
    }
    static getFields(fields) {
        // Note: The order here must match the order in the HeaderLib solidity library.
        return [
            fields.chainId,
            fields.version,
            fields.blockNumber,
            fields.timestamp,
            fields.coinbase,
            fields.feeRecipient,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...GlobalVariables.getFields(this));
    }
    toFields() {
        const fields = serializeToFields(...GlobalVariables.getFields(this));
        if (fields.length !== GLOBAL_VARIABLES_LENGTH) {
            throw new Error(`Invalid number of fields for GlobalVariables. Expected ${GLOBAL_VARIABLES_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    toJSON() {
        return {
            chainId: this.chainId.toString(),
            version: this.version.toString(),
            blockNumber: this.blockNumber.toString(),
            timestamp: this.timestamp.toString(),
            coinbase: this.coinbase.toString(),
            feeRecipient: this.feeRecipient.toString(),
        };
    }
    isEmpty() {
        return (this.chainId.isZero() &&
            this.version.isZero() &&
            this.blockNumber.isZero() &&
            this.timestamp.isZero() &&
            this.coinbase.isZero() &&
            this.feeRecipient.isZero());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsX3ZhcmlhYmxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL2dsb2JhbF92YXJpYWJsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUc5RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU5RDs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBQzFCO0lBQ0UsZ0NBQWdDO0lBQ3pCLE9BQVc7SUFDbEIsZ0NBQWdDO0lBQ3pCLE9BQVc7SUFDbEIsb0NBQW9DO0lBQzdCLFdBQWU7SUFDdEIsaUNBQWlDO0lBQzFCLFNBQWE7SUFDcEIsaUNBQWlDO0lBQzFCLFFBQW9CO0lBQzNCLCtCQUErQjtJQUN4QixZQUEwQjtRQVYxQixZQUFPLEdBQVAsT0FBTyxDQUFJO1FBRVgsWUFBTyxHQUFQLE9BQU8sQ0FBSTtRQUVYLGdCQUFXLEdBQVgsV0FBVyxDQUFJO1FBRWYsY0FBUyxHQUFULFNBQVMsQ0FBSTtRQUViLGFBQVEsR0FBUixRQUFRLENBQVk7UUFFcEIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFDaEMsQ0FBQztJQUVKLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBaUM7UUFDM0MsT0FBTyxJQUFJLGVBQWUsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDVixPQUFPLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckcsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksZUFBZSxDQUN4QixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUM3QixNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUNoQyxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBUTtRQUN0QixPQUFPLElBQUksZUFBZSxDQUN4QixFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFDMUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQzFCLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUM5QixFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFDNUIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQ25DLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUMxQyxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBMEI7UUFDMUMsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1QyxPQUFPLElBQUksZUFBZSxDQUN4QixNQUFNLENBQUMsU0FBUyxFQUFFLEVBQ2xCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFDbEIsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUNsQixNQUFNLENBQUMsU0FBUyxFQUFFLEVBQ2xCLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQ3hDLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQzNDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFpQztRQUNoRCwrRUFBK0U7UUFDL0UsT0FBTztZQUNMLE1BQU0sQ0FBQyxPQUFPO1lBQ2QsTUFBTSxDQUFDLE9BQU87WUFDZCxNQUFNLENBQUMsV0FBVztZQUNsQixNQUFNLENBQUMsU0FBUztZQUNoQixNQUFNLENBQUMsUUFBUTtZQUNmLE1BQU0sQ0FBQyxZQUFZO1NBQ1gsQ0FBQztJQUNiLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyx1QkFBdUIsRUFBRSxDQUFDO1lBQzlDLE1BQU0sSUFBSSxLQUFLLENBQ2IsMERBQTBELHVCQUF1QixTQUFTLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FDMUcsQ0FBQztRQUNKLENBQUM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU87WUFDTCxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDaEMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ2hDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRTtZQUN4QyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUU7WUFDcEMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQ2xDLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRTtTQUMzQyxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLENBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FDM0IsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9