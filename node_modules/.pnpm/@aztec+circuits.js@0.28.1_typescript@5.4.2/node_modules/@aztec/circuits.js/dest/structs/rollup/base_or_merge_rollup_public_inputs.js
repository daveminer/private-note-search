import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { NUM_FIELDS_PER_SHA256 } from '../../constants.gen.js';
import { AggregationObject } from '../aggregation_object.js';
import { PartialStateReference } from '../partial_state_reference.js';
import { ConstantRollupData } from './base_rollup.js';
/**
 * Output of the base and merge rollup circuits.
 */
export class BaseOrMergeRollupPublicInputs {
    constructor(
    /**
     * Specifies from which type of rollup circuit these inputs are from.
     */
    rollupType, 
    /**
     * Rollup sub tree height.
     * Note 1: Base rollup circuit always have a sub tree height of 0.
     * Note 2: With each merge, the sub tree height increases by 1.
     */
    rollupSubtreeHeight, 
    /**
     * Native aggregation state at the end of the rollup circuit.
     */
    aggregationObject, 
    /**
     * Data which is forwarded through the rollup circuits unchanged.
     */
    constants, 
    /**
     * Partial state reference at the start of the rollup circuit.
     */
    start, 
    /**
     * Partial state reference at the end of the rollup circuit.
     */
    end, 
    /**
     * SHA256 hashes of transactions effects. Used to make public inputs constant-sized (to then be unpacked on-chain).
     * Note: Length 2 for high and low.
     */
    txsEffectsHash, 
    /**
     * SHA256 hashes of outhash. Used to make public inputs constant-sized (to then be unpacked on-chain).
     * Note: Length 2 for high and low.
     */
    outHash) {
        this.rollupType = rollupType;
        this.rollupSubtreeHeight = rollupSubtreeHeight;
        this.aggregationObject = aggregationObject;
        this.constants = constants;
        this.start = start;
        this.end = end;
        this.txsEffectsHash = txsEffectsHash;
        this.outHash = outHash;
    }
    /**
     * Deserializes from a buffer or reader.
     * Note: Corresponds to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized public inputs.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new BaseOrMergeRollupPublicInputs(reader.readNumber(), Fr.fromBuffer(reader), reader.readObject(AggregationObject), reader.readObject(ConstantRollupData), reader.readObject(PartialStateReference), reader.readObject(PartialStateReference), reader.readArray(NUM_FIELDS_PER_SHA256, Fr), reader.readArray(NUM_FIELDS_PER_SHA256, Fr));
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.rollupType, this.rollupSubtreeHeight, this.aggregationObject, this.constants, this.start, this.end, this.txsEffectsHash, this.outHash);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9vcl9tZXJnZV9yb2xsdXBfcHVibGljX2lucHV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL3JvbGx1cC9iYXNlX29yX21lcmdlX3JvbGx1cF9wdWJsaWNfaW5wdXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFdEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sNkJBQTZCO0lBQ3hDO0lBQ0U7O09BRUc7SUFDSSxVQUF1QjtJQUM5Qjs7OztPQUlHO0lBQ0ksbUJBQXVCO0lBQzlCOztPQUVHO0lBQ0ksaUJBQW9DO0lBQzNDOztPQUVHO0lBQ0ksU0FBNkI7SUFDcEM7O09BRUc7SUFDSSxLQUE0QjtJQUNuQzs7T0FFRztJQUNJLEdBQTBCO0lBQ2pDOzs7T0FHRztJQUNJLGNBQXdCO0lBQy9COzs7T0FHRztJQUNJLE9BQWlCO1FBaENqQixlQUFVLEdBQVYsVUFBVSxDQUFhO1FBTXZCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBSTtRQUl2QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBSXBDLGNBQVMsR0FBVCxTQUFTLENBQW9CO1FBSTdCLFVBQUssR0FBTCxLQUFLLENBQXVCO1FBSTVCLFFBQUcsR0FBSCxHQUFHLENBQXVCO1FBSzFCLG1CQUFjLEdBQWQsY0FBYyxDQUFVO1FBS3hCLFlBQU8sR0FBUCxPQUFPLENBQVU7SUFDdkIsQ0FBQztJQUVKOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSw2QkFBNkIsQ0FDdEMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUNuQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEVBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsRUFDckMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUN4QyxNQUFNLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLEVBQ3hDLE1BQU0sQ0FBQyxTQUFTLENBQUMscUJBQXFCLEVBQUUsRUFBRSxDQUFhLEVBQ3ZELE1BQU0sQ0FBQyxTQUFTLENBQUMscUJBQXFCLEVBQUUsRUFBRSxDQUFhLENBQ3hELENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQ3RCLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLG1CQUFtQixFQUN4QixJQUFJLENBQUMsaUJBQWlCLEVBQ3RCLElBQUksQ0FBQyxTQUFTLEVBRWQsSUFBSSxDQUFDLEtBQUssRUFDVixJQUFJLENBQUMsR0FBRyxFQUVSLElBQUksQ0FBQyxjQUFjLEVBQ25CLElBQUksQ0FBQyxPQUFPLENBQ2IsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9