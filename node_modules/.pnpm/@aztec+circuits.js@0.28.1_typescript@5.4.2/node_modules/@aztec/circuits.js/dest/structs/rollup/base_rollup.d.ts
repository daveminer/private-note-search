/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { FieldsOf } from '@aztec/foundation/types';
import { ARCHIVE_HEIGHT, MAX_PUBLIC_DATA_READS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PUBLIC_DATA_TREE_HEIGHT } from '../../constants.gen.js';
import { GlobalVariables } from '../global_variables.js';
import { RollupKernelData } from '../kernel/rollup_kernel_data.js';
import { MembershipWitness } from '../membership_witness.js';
import { PartialStateReference } from '../partial_state_reference.js';
import { UInt32 } from '../shared.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
import { NullifierLeaf, NullifierLeafPreimage } from './nullifier_leaf/index.js';
import { PublicDataTreeLeaf, PublicDataTreeLeafPreimage } from './public_data_leaf/index.js';
import { StateDiffHints } from './state_diff_hints.js';
export { NullifierLeaf, NullifierLeafPreimage, PublicDataTreeLeaf, PublicDataTreeLeafPreimage };
/**
 * Data which is forwarded through the base rollup circuits unchanged.
 */
export declare class ConstantRollupData {
    /** Archive tree snapshot at the very beginning of the entire rollup. */
    lastArchive: AppendOnlyTreeSnapshot;
    /**
     * Root of the private kernel verification key tree.
     */
    privateKernelVkTreeRoot: Fr;
    /**
     * Root of the public kernel circuit verification key tree.
     */
    publicKernelVkTreeRoot: Fr;
    /**
     * Hash of the base rollup circuit verification key.
     */
    baseRollupVkHash: Fr;
    /**
     * Hash of the merge rollup circuit verification key.
     */
    mergeRollupVkHash: Fr;
    /**
     * Global variables for the block
     */
    globalVariables: GlobalVariables;
    constructor(
    /** Archive tree snapshot at the very beginning of the entire rollup. */
    lastArchive: AppendOnlyTreeSnapshot, 
    /**
     * Root of the private kernel verification key tree.
     */
    privateKernelVkTreeRoot: Fr, 
    /**
     * Root of the public kernel circuit verification key tree.
     */
    publicKernelVkTreeRoot: Fr, 
    /**
     * Hash of the base rollup circuit verification key.
     */
    baseRollupVkHash: Fr, 
    /**
     * Hash of the merge rollup circuit verification key.
     */
    mergeRollupVkHash: Fr, 
    /**
     * Global variables for the block
     */
    globalVariables: GlobalVariables);
    static from(fields: FieldsOf<ConstantRollupData>): ConstantRollupData;
    static fromBuffer(buffer: Buffer | BufferReader): ConstantRollupData;
    static getFields(fields: FieldsOf<ConstantRollupData>): readonly [AppendOnlyTreeSnapshot, Fr, Fr, Fr, Fr, GlobalVariables];
    toBuffer(): Buffer;
}
/**
 * Inputs to the base rollup circuit.
 */
export declare class BaseRollupInputs {
    /** Data of the 2 kernels that preceded this base rollup circuit. */
    kernelData: RollupKernelData;
    /** Partial state reference at the start of the rollup. */
    start: PartialStateReference;
    /** Hints used while proving state diff validity. */
    stateDiffHints: StateDiffHints;
    /**
     * The public data writes to be inserted in the tree, sorted high slot to low slot.
     */
    sortedPublicDataWrites: Tuple<PublicDataTreeLeaf, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>;
    /**
     * The indexes of the sorted public data writes to the original ones.
     */
    sortedPublicDataWritesIndexes: Tuple<UInt32, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>;
    /**
     * The public data writes which need to be updated to perform the batch insertion of the new public data writes.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */
    lowPublicDataWritesPreimages: Tuple<PublicDataTreeLeafPreimage, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>;
    /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */
    lowPublicDataWritesMembershipWitnesses: Tuple<MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>;
    /**
     * Preimages of leaves which are to be read by the public data reads.
     */
    publicDataReadsPreimages: Tuple<PublicDataTreeLeafPreimage, typeof MAX_PUBLIC_DATA_READS_PER_TX>;
    /**
     * Sibling paths of leaves which are to be read by the public data reads.
     * Each item in the array is the sibling path that corresponds to a read request.
     */
    publicDataReadsMembershipWitnesses: Tuple<MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>, typeof MAX_PUBLIC_DATA_READS_PER_TX>;
    /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */
    archiveRootMembershipWitness: MembershipWitness<typeof ARCHIVE_HEIGHT>;
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants: ConstantRollupData;
    constructor(
    /** Data of the 2 kernels that preceded this base rollup circuit. */
    kernelData: RollupKernelData, 
    /** Partial state reference at the start of the rollup. */
    start: PartialStateReference, 
    /** Hints used while proving state diff validity. */
    stateDiffHints: StateDiffHints, 
    /**
     * The public data writes to be inserted in the tree, sorted high slot to low slot.
     */
    sortedPublicDataWrites: Tuple<PublicDataTreeLeaf, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>, 
    /**
     * The indexes of the sorted public data writes to the original ones.
     */
    sortedPublicDataWritesIndexes: Tuple<UInt32, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>, 
    /**
     * The public data writes which need to be updated to perform the batch insertion of the new public data writes.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */
    lowPublicDataWritesPreimages: Tuple<PublicDataTreeLeafPreimage, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>, 
    /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */
    lowPublicDataWritesMembershipWitnesses: Tuple<MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>, 
    /**
     * Preimages of leaves which are to be read by the public data reads.
     */
    publicDataReadsPreimages: Tuple<PublicDataTreeLeafPreimage, typeof MAX_PUBLIC_DATA_READS_PER_TX>, 
    /**
     * Sibling paths of leaves which are to be read by the public data reads.
     * Each item in the array is the sibling path that corresponds to a read request.
     */
    publicDataReadsMembershipWitnesses: Tuple<MembershipWitness<typeof PUBLIC_DATA_TREE_HEIGHT>, typeof MAX_PUBLIC_DATA_READS_PER_TX>, 
    /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */
    archiveRootMembershipWitness: MembershipWitness<typeof ARCHIVE_HEIGHT>, 
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants: ConstantRollupData);
    static from(fields: FieldsOf<BaseRollupInputs>): BaseRollupInputs;
    static getFields(fields: FieldsOf<BaseRollupInputs>): readonly [RollupKernelData, PartialStateReference, StateDiffHints, [PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf, PublicDataTreeLeaf], [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number], [PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage], [MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>], [PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage, PublicDataTreeLeafPreimage], [MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>, MembershipWitness<40>], MembershipWitness<16>, ConstantRollupData];
    toBuffer(): Buffer;
}
//# sourceMappingURL=base_rollup.d.ts.map