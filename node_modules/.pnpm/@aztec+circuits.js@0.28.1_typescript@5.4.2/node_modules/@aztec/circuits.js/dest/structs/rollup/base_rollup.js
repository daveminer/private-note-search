import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { GlobalVariables } from '../global_variables.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
import { NullifierLeaf, NullifierLeafPreimage } from './nullifier_leaf/index.js';
import { PublicDataTreeLeaf, PublicDataTreeLeafPreimage } from './public_data_leaf/index.js';
export { NullifierLeaf, NullifierLeafPreimage, PublicDataTreeLeaf, PublicDataTreeLeafPreimage };
/**
 * Data which is forwarded through the base rollup circuits unchanged.
 */
export class ConstantRollupData {
    constructor(
    /** Archive tree snapshot at the very beginning of the entire rollup. */
    lastArchive, 
    /**
     * Root of the private kernel verification key tree.
     */
    privateKernelVkTreeRoot, 
    /**
     * Root of the public kernel circuit verification key tree.
     */
    publicKernelVkTreeRoot, 
    /**
     * Hash of the base rollup circuit verification key.
     */
    baseRollupVkHash, 
    /**
     * Hash of the merge rollup circuit verification key.
     */
    mergeRollupVkHash, 
    /**
     * Global variables for the block
     */
    globalVariables) {
        this.lastArchive = lastArchive;
        this.privateKernelVkTreeRoot = privateKernelVkTreeRoot;
        this.publicKernelVkTreeRoot = publicKernelVkTreeRoot;
        this.baseRollupVkHash = baseRollupVkHash;
        this.mergeRollupVkHash = mergeRollupVkHash;
        this.globalVariables = globalVariables;
    }
    static from(fields) {
        return new ConstantRollupData(...ConstantRollupData.getFields(fields));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ConstantRollupData(reader.readObject(AppendOnlyTreeSnapshot), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(GlobalVariables));
    }
    static getFields(fields) {
        return [
            fields.lastArchive,
            fields.privateKernelVkTreeRoot,
            fields.publicKernelVkTreeRoot,
            fields.baseRollupVkHash,
            fields.mergeRollupVkHash,
            fields.globalVariables,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...ConstantRollupData.getFields(this));
    }
}
/**
 * Inputs to the base rollup circuit.
 */
export class BaseRollupInputs {
    constructor(
    /** Data of the 2 kernels that preceded this base rollup circuit. */
    kernelData, 
    /** Partial state reference at the start of the rollup. */
    start, 
    /** Hints used while proving state diff validity. */
    stateDiffHints, 
    /**
     * The public data writes to be inserted in the tree, sorted high slot to low slot.
     */
    sortedPublicDataWrites, 
    /**
     * The indexes of the sorted public data writes to the original ones.
     */
    sortedPublicDataWritesIndexes, 
    /**
     * The public data writes which need to be updated to perform the batch insertion of the new public data writes.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */
    lowPublicDataWritesPreimages, 
    /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */
    lowPublicDataWritesMembershipWitnesses, 
    /**
     * Preimages of leaves which are to be read by the public data reads.
     */
    publicDataReadsPreimages, 
    /**
     * Sibling paths of leaves which are to be read by the public data reads.
     * Each item in the array is the sibling path that corresponds to a read request.
     */
    publicDataReadsMembershipWitnesses, 
    /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */
    archiveRootMembershipWitness, 
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants) {
        this.kernelData = kernelData;
        this.start = start;
        this.stateDiffHints = stateDiffHints;
        this.sortedPublicDataWrites = sortedPublicDataWrites;
        this.sortedPublicDataWritesIndexes = sortedPublicDataWritesIndexes;
        this.lowPublicDataWritesPreimages = lowPublicDataWritesPreimages;
        this.lowPublicDataWritesMembershipWitnesses = lowPublicDataWritesMembershipWitnesses;
        this.publicDataReadsPreimages = publicDataReadsPreimages;
        this.publicDataReadsMembershipWitnesses = publicDataReadsMembershipWitnesses;
        this.archiveRootMembershipWitness = archiveRootMembershipWitness;
        this.constants = constants;
    }
    static from(fields) {
        return new BaseRollupInputs(...BaseRollupInputs.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.kernelData,
            fields.start,
            fields.stateDiffHints,
            fields.sortedPublicDataWrites,
            fields.sortedPublicDataWritesIndexes,
            fields.lowPublicDataWritesPreimages,
            fields.lowPublicDataWritesMembershipWitnesses,
            fields.publicDataReadsPreimages,
            fields.publicDataReadsMembershipWitnesses,
            fields.archiveRootMembershipWitness,
            fields.constants,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...BaseRollupInputs.getFields(this));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvYmFzZV9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQVMsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQVNyRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFLekQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRzdGLE9BQU8sRUFBRSxhQUFhLEVBQUUscUJBQXFCLEVBQUUsa0JBQWtCLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQztBQUVoRzs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBa0I7SUFDN0I7SUFDRSx3RUFBd0U7SUFDakUsV0FBbUM7SUFFMUM7O09BRUc7SUFDSSx1QkFBMkI7SUFDbEM7O09BRUc7SUFDSSxzQkFBMEI7SUFDakM7O09BRUc7SUFDSSxnQkFBb0I7SUFDM0I7O09BRUc7SUFDSSxpQkFBcUI7SUFDNUI7O09BRUc7SUFDSSxlQUFnQztRQXJCaEMsZ0JBQVcsR0FBWCxXQUFXLENBQXdCO1FBS25DLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBSTtRQUkzQiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQUk7UUFJMUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFJO1FBSXBCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBSTtRQUlyQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFDdEMsQ0FBQztJQUVKLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFB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