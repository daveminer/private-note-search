import { AztecAddress } from '@aztec/foundation/aztec-address';
import { GrumpkinScalar, Point } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH, } from '../constants.gen.js';
/**
 * Request for validating a nullifier key pair used in the app.
 */
export class NullifierKeyValidationRequest {
    constructor(
    /**
     * Public key of the nullifier key.
     */
    publicKey, 
    /**
     * Secret key of the nullifier key.
     */
    secretKey) {
        this.publicKey = publicKey;
        this.secretKey = secretKey;
    }
    toBuffer() {
        return serializeToBuffer(this.publicKey, this.secretKey);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new NullifierKeyValidationRequest(Point.fromBuffer(reader), GrumpkinScalar.fromBuffer(reader));
    }
    toFields() {
        const fields = [this.publicKey.toFields(), this.secretKey.high, this.secretKey.low].flat();
        if (fields.length !== NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH) {
            throw new Error(`Invalid number of fields for NullifierKeyValidationRequest. Expected ${NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new NullifierKeyValidationRequest(Point.fromFields(reader), reader.readFq());
    }
    isEmpty() {
        return this.publicKey.isZero() && this.secretKey.isZero();
    }
    static empty() {
        return new NullifierKeyValidationRequest(Point.ZERO, GrumpkinScalar.ZERO);
    }
}
/**
 * Request for validating a nullifier key pair used in the app.
 */
export class NullifierKeyValidationRequestContext {
    constructor(
    /**
     * Public key of the nullifier key.
     */
    publicKey, 
    /**
     * Secret key of the nullifier key.
     */
    secretKey, 
    /**
     * The storage contract address the nullifier key is for.
     */
    contractAddress) {
        this.publicKey = publicKey;
        this.secretKey = secretKey;
        this.contractAddress = contractAddress;
    }
    toBuffer() {
        return serializeToBuffer(this.publicKey, this.secretKey, this.contractAddress);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new NullifierKeyValidationRequestContext(Point.fromBuffer(reader), GrumpkinScalar.fromBuffer(reader), AztecAddress.fromBuffer(reader));
    }
    toFields() {
        const fields = [this.publicKey.toFields(), this.secretKey.high, this.secretKey.low, this.contractAddress].flat();
        if (fields.length !== NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH) {
            throw new Error(`Invalid number of fields for NullifierKeyValidationRequestContext. Expected ${NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new NullifierKeyValidationRequestContext(Point.fromFields(reader), reader.readFq(), AztecAddress.fromFields(reader));
    }
    isEmpty() {
        return this.publicKey.isZero() && this.secretKey.isZero() && this.contractAddress.isZero();
    }
    static empty() {
        return new NullifierKeyValidationRequestContext(Point.ZERO, GrumpkinScalar.ZERO, AztecAddress.ZERO);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVsbGlmaWVyX2tleV92YWxpZGF0aW9uX3JlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RydWN0cy9udWxsaWZpZXJfa2V5X3ZhbGlkYXRpb25fcmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFNLGNBQWMsRUFBRSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTNGLE9BQU8sRUFDTCwrQ0FBK0MsRUFDL0MsdUNBQXVDLEdBQ3hDLE1BQU0scUJBQXFCLENBQUM7QUFHN0I7O0dBRUc7QUFDSCxNQUFNLE9BQU8sNkJBQTZCO0lBQ3hDO0lBQ0U7O09BRUc7SUFDYSxTQUFnQjtJQUNoQzs7T0FFRztJQUNhLFNBQTZCO1FBSjdCLGNBQVMsR0FBVCxTQUFTLENBQU87UUFJaEIsY0FBUyxHQUFULFNBQVMsQ0FBb0I7SUFDNUMsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLDZCQUE2QixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3hHLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FB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