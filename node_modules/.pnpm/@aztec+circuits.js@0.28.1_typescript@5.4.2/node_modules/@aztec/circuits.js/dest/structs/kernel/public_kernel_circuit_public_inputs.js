import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { AggregationObject } from '../aggregation_object.js';
import { CombinedAccumulatedData, PublicAccumulatedNonRevertibleData, PublicAccumulatedRevertibleData, } from './combined_accumulated_data.js';
import { CombinedConstantData } from './combined_constant_data.js';
/**
 * Outputs from the public kernel circuits.
 * All Public kernels use this shape for outputs.
 */
export class PublicKernelCircuitPublicInputs {
    constructor(
    /**
     * Aggregated proof of all the previous kernel iterations.
     */
    aggregationObject, // Contains the aggregated proof of all previous kernel iterations
    /**
     * Accumulated side effects and enqueued calls that are not revertible.
     */
    endNonRevertibleData, 
    /**
     * Data accumulated from both public and private circuits.
     */
    end, 
    /**
     * Data which is not modified by the circuits.
     */
    constants, 
    /**
     * Indicates whether the setup kernel is needed.
     */
    needsSetup, 
    /**
     * Indicates whether the app logic kernel is needed.
     */
    needsAppLogic, 
    /**
     * Indicates whether the teardown kernel is needed.
     */
    needsTeardown, 
    /**
     * Indicates whether execution of the public circuit reverted.
     */
    reverted) {
        this.aggregationObject = aggregationObject;
        this.endNonRevertibleData = endNonRevertibleData;
        this.end = end;
        this.constants = constants;
        this.needsSetup = needsSetup;
        this.needsAppLogic = needsAppLogic;
        this.needsTeardown = needsTeardown;
        this.reverted = reverted;
        this.combined = undefined;
    }
    toBuffer() {
        return serializeToBuffer(this.aggregationObject, this.endNonRevertibleData, this.end, this.constants, this.needsSetup, this.needsAppLogic, this.needsTeardown, this.reverted);
    }
    get combinedData() {
        if (this.needsSetup || this.needsAppLogic || this.needsTeardown) {
            throw new Error('Cannot combine data when the circuit is not finished');
        }
        if (!this.combined) {
            this.combined = CombinedAccumulatedData.recombine(this.endNonRevertibleData, this.end, this.reverted);
        }
        return this.combined;
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of PublicKernelCircuitPublicInputs.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicKernelCircuitPublicInputs(reader.readObject(AggregationObject), reader.readObject(PublicAccumulatedNonRevertibleData), reader.readObject(PublicAccumulatedRevertibleData), reader.readObject(CombinedConstantData), reader.readBoolean(), reader.readBoolean(), reader.readBoolean(), reader.readBoolean());
    }
    static empty() {
        return new PublicKernelCircuitPublicInputs(AggregationObject.makeFake(), PublicAccumulatedNonRevertibleData.empty(), PublicAccumulatedRevertibleData.empty(), CombinedConstantData.empty(), false, false, false, false);
    }
    [inspect.custom]() {
        return `PublicKernelCircuitPublicInputs {
      aggregationObject: ${this.aggregationObject},
      endNonRevertibleData: ${inspect(this.endNonRevertibleData)},
      end: ${inspect(this.end)},
      constants: ${this.constants},
      needsSetup: ${this.needsSetup},
      needsAppLogic: ${this.needsAppLogic},
      needsTeardown: ${this.needsTeardown},
      reverted: ${this.reverted}
      }`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2tlcm5lbF9jaXJjdWl0X3B1YmxpY19pbnB1dHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHVibGljX2tlcm5lbF9jaXJjdWl0X3B1YmxpY19pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixrQ0FBa0MsRUFDbEMsK0JBQStCLEdBQ2hDLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFbkU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLCtCQUErQjtJQUcxQztJQUNFOztPQUVHO0lBQ0ksaUJBQW9DLEVBQUUsa0VBQWtFO0lBQy9HOztPQUVHO0lBQ0ksb0JBQXdEO0lBQy9EOztPQUVHO0lBQ0ksR0FBb0M7SUFDM0M7O09BRUc7SUFDSSxTQUErQjtJQUN0Qzs7T0FFRztJQUNJLFVBQW1CO0lBQzFCOztPQUVHO0lBQ0ksYUFBc0I7SUFDN0I7O09BRUc7SUFDSSxhQUFzQjtJQUM3Qjs7T0FFRztJQUNJLFFBQWlCO1FBNUJqQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBSXBDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBb0M7UUFJeEQsUUFBRyxHQUFILEdBQUcsQ0FBaUM7UUFJcEMsY0FBUyxHQUFULFNBQVMsQ0FBc0I7UUFJL0IsZUFBVSxHQUFWLFVBQVUsQ0FBUztRQUluQixrQkFBYSxHQUFiLGFBQWEsQ0FBUztRQUl0QixrQkFBYSxHQUFiLGFBQWEsQ0FBUztRQUl0QixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBbENsQixhQUFRLEdBQXdDLFNBQVMsQ0FBQztJQW1DL0QsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUN0QixJQUFJLENBQUMsaUJBQWlCLEVBQ3RCLElBQUksQ0FBQyxvQkFBb0IsRUFDekIsSUFBSSxDQUFDLEdBQUcsRUFDUixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNoRSxNQUFNLElBQUksS0FBSyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7UUFDMUUsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hHLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLCtCQUErQixDQUN4QyxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEVBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUMsa0NBQWtDLENBQUMsRUFDckQsTUFBTSxDQUFDLFVBQVUsQ0FBQywrQkFBK0IsQ0FBQyxFQUNsRCxNQUFNLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLEVBQ3ZDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFDcEIsTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUNwQixNQUFNLENBQUMsV0FBVyxFQUFFLEVBQ3BCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FDckIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSztRQUNWLE9BQU8sSUFBSSwrQkFBK0IsQ0FDeEMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLEVBQzVCLGtDQUFrQyxDQUFDLEtBQUssRUFBRSxFQUMxQywrQkFBK0IsQ0FBQyxLQUFLLEVBQUUsRUFDdkMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLEVBQzVCLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssQ0FDTixDQUFDO0lBQ0osQ0FBQztJQUVELENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNkLE9BQU87MkJBQ2dCLElBQUksQ0FBQyxpQkFBaUI7OEJBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUM7YUFDbkQsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7bUJBQ1gsSUFBSSxDQUFDLFNBQVM7b0JBQ2IsSUFBSSxDQUFDLFVBQVU7dUJBQ1osSUFBSSxDQUFDLGFBQWE7dUJBQ2xCLElBQUksQ0FBQyxhQUFhO2tCQUN2QixJQUFJLENBQUMsUUFBUTtRQUN2QixDQUFDO0lBQ1AsQ0FBQztDQUNGIn0=