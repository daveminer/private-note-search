/// <reference types="node" resolution-mode="require"/>
import { FunctionSelector } from '@aztec/foundation/abi';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { FieldsOf } from '@aztec/foundation/types';
/**
 * A class representing the "preimage" of a function tree leaf.
 */
export declare class FunctionLeafPreimage {
    /**
     * Function selector.
     */
    functionSelector: FunctionSelector;
    /**
     * Indicates whether the function is only callable by self or not.
     */
    isInternal: boolean;
    /**
     * Indicates whether the function is private or public.
     */
    isPrivate: boolean;
    /**
     * Verification key hash of the function.
     */
    vkHash: Fr;
    /**
     * Hash of the ACIR of the function.
     */
    acirHash: Fr;
    constructor(
    /**
     * Function selector.
     */
    functionSelector: FunctionSelector, 
    /**
     * Indicates whether the function is only callable by self or not.
     */
    isInternal: boolean, 
    /**
     * Indicates whether the function is private or public.
     */
    isPrivate: boolean, 
    /**
     * Verification key hash of the function.
     */
    vkHash: Fr, 
    /**
     * Hash of the ACIR of the function.
     */
    acirHash: Fr);
    static getFields(fields: FieldsOf<FunctionLeafPreimage>): readonly [FunctionSelector, boolean, boolean, Fr, Fr];
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    toFields(): Fr[];
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of FunctionLeafPreimage.
     */
    static fromBuffer(buffer: Buffer | BufferReader): FunctionLeafPreimage;
    hash(): Fr;
}
//# sourceMappingURL=function_leaf_preimage.d.ts.map