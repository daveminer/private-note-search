import { serializeToBuffer } from '@aztec/foundation/serialize';
/**
 * Hints used while proving state diff validity.
 */
export class StateDiffHints {
    constructor(
    /**
     * The nullifiers which need to be updated to perform the batch insertion of the new nullifiers.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */
    nullifierPredecessorPreimages, 
    /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */
    nullifierPredecessorMembershipWitnesses, 
    /**
     * The nullifiers to be inserted in the tree, sorted high to low.
     */
    sortedNullifiers, 
    /**
     * The indexes of the sorted nullifiers to the original ones.
     */
    sortedNullifierIndexes, 
    /**
     * Sibling path "pointing to" where the new note hash subtree should be inserted into the note hash tree.
     */
    noteHashSubtreeSiblingPath, 
    /**
     * Sibling path "pointing to" where the new nullifiers subtree should be inserted into the nullifier tree.
     */
    nullifierSubtreeSiblingPath, 
    /**
     * Sibling path "pointing to" where the new public data subtree should be inserted into the public data tree.
     */
    publicDataSiblingPath) {
        this.nullifierPredecessorPreimages = nullifierPredecessorPreimages;
        this.nullifierPredecessorMembershipWitnesses = nullifierPredecessorMembershipWitnesses;
        this.sortedNullifiers = sortedNullifiers;
        this.sortedNullifierIndexes = sortedNullifierIndexes;
        this.noteHashSubtreeSiblingPath = noteHashSubtreeSiblingPath;
        this.nullifierSubtreeSiblingPath = nullifierSubtreeSiblingPath;
        this.publicDataSiblingPath = publicDataSiblingPath;
    }
    static from(fields) {
        return new StateDiffHints(...StateDiffHints.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.nullifierPredecessorPreimages,
            fields.nullifierPredecessorMembershipWitnesses,
            fields.sortedNullifiers,
            fields.sortedNullifierIndexes,
            fields.noteHashSubtreeSiblingPath,
            fields.nullifierSubtreeSiblingPath,
            fields.publicDataSiblingPath,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...StateDiffHints.getFields(this));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVfZGlmZl9oaW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL3JvbGx1cC9zdGF0ZV9kaWZmX2hpbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBUyxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBYXZFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGNBQWM7SUFDekI7SUFDRTs7O09BR0c7SUFDSSw2QkFBNkY7SUFDcEc7OztPQUdHO0lBQ0ksdUNBR047SUFDRDs7T0FFRztJQUNJLGdCQUE2RDtJQUNwRTs7T0FFRztJQUNJLHNCQUF1RTtJQUM5RTs7T0FFRztJQUNJLDBCQUFtRjtJQUMxRjs7T0FFRztJQUNJLDJCQUFvRjtJQUMzRjs7T0FFRztJQUNJLHFCQUFnRjtRQTVCaEYsa0NBQTZCLEdBQTdCLDZCQUE2QixDQUFnRTtRQUs3Riw0Q0FBdUMsR0FBdkMsdUNBQXVDLENBRzdDO1FBSU0scUJBQWdCLEdBQWhCLGdCQUFnQixDQUE2QztRQUk3RCwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQWlEO1FBSXZFLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBeUQ7UUFJbkYsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUF5RDtRQUlwRiwwQkFBcUIsR0FBckIscUJBQXFCLENBQTJEO0lBQ3RGLENBQUM7SUFFSixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQWdDO1FBQzFDLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBZ0M7UUFDL0MsT0FBTztZQUNMLE1BQU0sQ0FBQyw2QkFBNkI7WUFDcEMsTUFBTSxDQUFDLHVDQUF1QztZQUM5QyxNQUFNLENBQUMsZ0JBQWdCO1lBQ3ZCLE1BQU0sQ0FBQyxzQkFBc0I7WUFDN0IsTUFBTSxDQUFDLDBCQUEwQjtZQUNqQyxNQUFNLENBQUMsMkJBQTJCO1lBQ2xDLE1BQU0sQ0FBQyxxQkFBcUI7U0FDcEIsQ0FBQztJQUNiLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0NBQ0YifQ==