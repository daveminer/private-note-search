import { AztecAddress } from '@aztec/foundation/aztec-address';
import { toBigIntBE, toBufferBE } from '@aztec/foundation/bigint-buffer';
import { randomInt, sha256 } from '@aztec/foundation/crypto';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
export class NewInboxLeaf {
    constructor(
    /** L2 block number in which the message will be included. */
    blockNumber, 
    /** Index of the leaf in L2 block message subtree. */
    index, 
    /** Leaf of the subtree. */
    leaf) {
        this.blockNumber = blockNumber;
        this.index = index;
        this.leaf = leaf;
    }
    toBuffer() {
        return serializeToBuffer([this.blockNumber, this.index, this.leaf]);
    }
    fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const blockNumber = toBigIntBE(reader.readBytes(32));
        const index = toBigIntBE(reader.readBytes(32));
        const leaf = reader.readObject(Fr);
        return new NewInboxLeaf(blockNumber, index, leaf);
    }
}
/**
 * L1AndL2Message and Index (in the merkle tree) as one type
 * TODO(#4492): Nuke the following when purging the old inbox
 */
export class L1ToL2MessageAndIndex {
    constructor(
    /** the index in the L1 to L2 Message tree. */
    index, 
    /** The message. */
    message) {
        this.index = index;
        this.message = message;
    }
    toBuffer() {
        return Buffer.concat([toBufferBE(this.index, 32), this.message.toBuffer()]);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromString(data) {
        const buffer = Buffer.from(data, 'hex');
        return L1ToL2MessageAndIndex.fromBuffer(buffer);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const index = toBigIntBE(reader.readBytes(32));
        const message = L1ToL2Message.fromBuffer(reader);
        return new L1ToL2MessageAndIndex(index, message);
    }
}
/**
 * The format of an L1 to L2 Message.
 * TODO(#4492): Nuke the following when purging the old inbox
 */
export class L1ToL2Message {
    constructor(
    /**
     * The sender of the message on L1.
     */
    sender, 
    /**
     * The recipient of the message on L2.
     */
    recipient, 
    /**
     * The message content.
     */
    content, 
    /**
     * The hash of the spending secret.
     */
    secretHash, 
    /**
     * The deadline for the message.
     */
    deadline, 
    /**
     * The fee for the message.
     */
    fee, 
    /**
     * The entry key for the message - optional.
     */
    entryKey) {
        this.sender = sender;
        this.recipient = recipient;
        this.content = content;
        this.secretHash = secretHash;
        this.deadline = deadline;
        this.fee = fee;
        this.entryKey = entryKey;
    }
    /**
     * Returns each element within its own field so that it can be consumed by an acvm oracle call.
     * @returns The message as an array of fields (in order).
     */
    toFields() {
        return [
            ...this.sender.toFields(),
            ...this.recipient.toFields(),
            this.content,
            this.secretHash,
            new Fr(BigInt(this.deadline)),
            new Fr(BigInt(this.fee)),
        ];
    }
    toBuffer() {
        return serializeToBuffer(this.sender, this.recipient, this.content, this.secretHash, this.deadline, this.fee);
    }
    hash() {
        return Fr.fromBufferReduce(sha256(serializeToBuffer(...this.toFields())));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const sender = reader.readObject(L1Actor);
        const recipient = reader.readObject(L2Actor);
        const content = Fr.fromBuffer(reader);
        const secretHash = Fr.fromBuffer(reader);
        const deadline = reader.readNumber();
        const fee = reader.readNumber();
        return new L1ToL2Message(sender, recipient, content, secretHash, deadline, fee);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromString(data) {
        const buffer = Buffer.from(data, 'hex');
        return L1ToL2Message.fromBuffer(buffer);
    }
    static empty() {
        return new L1ToL2Message(L1Actor.empty(), L2Actor.empty(), Fr.ZERO, Fr.ZERO, 0, 0);
    }
    static random(entryKey) {
        return new L1ToL2Message(L1Actor.random(), L2Actor.random(), Fr.random(), Fr.random(), randomInt(1000), randomInt(1000), entryKey);
    }
}
/**
 * The sender of an L1 to L2 message.
 * TODO(#4492): Move to separate file when purging the old inbox
 */
export class L1Actor {
    constructor(
    /**
     * The sender of the message.
     */
    sender, 
    /**
     * The chain id on which the message was sent.
     */
    chainId) {
        this.sender = sender;
        this.chainId = chainId;
    }
    static empty() {
        return new L1Actor(EthAddress.ZERO, 0);
    }
    toFields() {
        return [this.sender.toField(), new Fr(BigInt(this.chainId))];
    }
    toBuffer() {
        return serializeToBuffer(this.sender, this.chainId);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const ethAddr = reader.readObject(EthAddress);
        const chainId = reader.readNumber();
        return new L1Actor(ethAddr, chainId);
    }
    static random() {
        return new L1Actor(EthAddress.random(), randomInt(1000));
    }
}
/**
 * The recipient of an L2 message.
 * TODO(#4492): Move to separate file when purging the old inbox
 */
export class L2Actor {
    constructor(
    /**
     * The recipient of the message.
     */
    recipient, 
    /**
     * The version of the protocol.
     */
    version) {
        this.recipient = recipient;
        this.version = version;
    }
    static empty() {
        return new L2Actor(AztecAddress.ZERO, 0);
    }
    toFields() {
        return [this.recipient.toField(), new Fr(BigInt(this.version))];
    }
    toBuffer() {
        return serializeToBuffer(this.recipient, this.version);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const aztecAddr = AztecAddress.fromBuffer(reader);
        const version = reader.readNumber();
        return new L2Actor(aztecAddr, version);
    }
    static random() {
        return new L2Actor(AztecAddress.random(), randomInt(1000));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDFfdG9fbDJfbWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sMV90b19sMl9tZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFtQzlFLE1BQU0sT0FBTyxZQUFZO0lBQ3ZCO0lBQ0UsNkRBQTZEO0lBQzdDLFdBQW1CO0lBQ25DLHFEQUFxRDtJQUNyQyxLQUFhO0lBQzdCLDJCQUEyQjtJQUNYLElBQVE7UUFKUixnQkFBVyxHQUFYLFdBQVcsQ0FBUTtRQUVuQixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBRWIsU0FBSSxHQUFKLElBQUksQ0FBSTtJQUN2QixDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUE2QjtRQUN0QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckQsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLE1BQU0s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