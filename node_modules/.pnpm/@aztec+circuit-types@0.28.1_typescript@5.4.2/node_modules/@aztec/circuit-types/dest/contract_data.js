import { FUNCTION_SELECTOR_NUM_BYTES, Fr, FunctionSelector, computeSaltedInitializationHash } from '@aztec/circuits.js';
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { randomBytes } from '@aztec/foundation/crypto';
import { EthAddress } from '@aztec/foundation/eth-address';
import { BufferReader, numToInt32BE, serializeArrayOfBufferableToVector, serializeToBuffer, } from '@aztec/foundation/serialize';
/**
 * Represents encoded contract function.
 */
export class EncodedContractFunction {
    constructor(
    /**
     * The function selector.
     */
    selector, 
    /**
     * Whether the function is internal.
     */
    isInternal, 
    /**
     * The function bytecode.
     */
    bytecode) {
        this.selector = selector;
        this.isInternal = isInternal;
        this.bytecode = bytecode;
    }
    /**
     * Serializes this instance into a buffer.
     * @returns Encoded buffer.
     */
    toBuffer() {
        const bytecodeBuf = Buffer.concat([numToInt32BE(this.bytecode.length), this.bytecode]);
        return serializeToBuffer(this.selector, this.isInternal, bytecodeBuf);
    }
    /**
     * Deserializes a contract function object from an encoded buffer.
     * @param buffer - The encoded buffer.
     * @returns The deserialized contract function.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const fnSelector = FunctionSelector.fromBuffer(reader.readBytes(FUNCTION_SELECTOR_NUM_BYTES));
        const isInternal = reader.readBoolean();
        return new EncodedContractFunction(fnSelector, isInternal, reader.readBuffer());
    }
    /**
     * Serializes this instance into a string.
     * @returns Encoded string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Deserializes a contract function object from an encoded string.
     * @param data - The encoded string.
     * @returns The deserialized contract function.
     */
    static fromString(data) {
        return EncodedContractFunction.fromBuffer(Buffer.from(data, 'hex'));
    }
    /**
     * Creates a random contract function.
     * @returns A random contract function.
     */
    static random() {
        return new EncodedContractFunction(FunctionSelector.fromBuffer(randomBytes(4)), false, randomBytes(64));
    }
}
/**
 * A contract data blob, containing L1 and L2 addresses, public functions' bytecode, partial address and public key.
 * TODO(palla/purge-old-contract-deploy): Delete this class?
 */
export class ExtendedContractData {
    constructor(
    /** The base contract data: aztec & portal addresses. */
    contractData, 
    /** Artifacts of public functions. */
    publicFunctions, 
    /** Contract class id */
    contractClassId, 
    /** Salted init hash. */
    saltedInitializationHash, 
    /** Public key hash of the contract. */
    publicKeyHash) {
        this.contractData = contractData;
        this.publicFunctions = publicFunctions;
        this.contractClassId = contractClassId;
        this.saltedInitializationHash = saltedInitializationHash;
        this.publicKeyHash = publicKeyHash;
        this.bytecode = serializeArrayOfBufferableToVector(publicFunctions.map(fn => fn.toBuffer()));
    }
    /**
     * Gets the public function data or undefined.
     * @param selector - The function selector of the function to fetch.
     * @returns The public function data (if found).
     */
    getPublicFunction(selector) {
        return this.publicFunctions.find(fn => fn.selector.equals(selector));
    }
    /**
     * Serializes this instance into a buffer, using 20 bytes for the eth address.
     * @returns Encoded buffer.
     */
    toBuffer() {
        const contractDataBuf = this.contractData.toBuffer();
        return serializeToBuffer(contractDataBuf, this.bytecode, this.contractClassId, this.saltedInitializationHash, this.publicKeyHash);
    }
    /**
     * Serializes this instance into a string.
     * @returns Encoded string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /** True if this represents an empty instance. */
    isEmpty() {
        return ExtendedContractData.isEmpty(this);
    }
    /** True if the passed instance is empty . */
    static isEmpty(obj) {
        return (obj.contractData.isEmpty() &&
            obj.publicFunctions.length === 0 &&
            obj.contractClassId.isZero() &&
            obj.publicKeyHash.isZero() &&
            obj.saltedInitializationHash.isZero());
    }
    /**
     * Deserializes a contract data object from an encoded buffer, using 20 bytes for the eth address.
     * @param buffer - Byte array resulting from calling toBuffer.
     * @returns Deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const contractData = reader.readObject(ContractData);
        const publicFns = reader.readVector(EncodedContractFunction);
        const contractClassId = reader.readObject(Fr);
        const saltedInitializationHash = reader.readObject(Fr);
        const publicKeyHash = reader.readObject(Fr);
        return new ExtendedContractData(contractData, publicFns, contractClassId, saltedInitializationHash, publicKeyHash);
    }
    /**
     * Deserializes a contract data object from an encoded string, using 20 bytes for the eth address.
     * @param str - String resulting from calling toString.
     * @returns Deserialized instance.
     */
    static fromString(str) {
        return ExtendedContractData.fromBuffer(Buffer.from(str, 'hex'));
    }
    /**
     * Generate ContractData with random addresses.
     * @param contractData - Optional contract data to use.
     * @returns A random ExtendedContractData object.
     */
    static random(contractData) {
        return new ExtendedContractData(contractData ?? ContractData.random(), [EncodedContractFunction.random(), EncodedContractFunction.random()], Fr.random(), Fr.random(), Fr.random());
    }
    /** Generates empty extended contract data. */
    static empty() {
        return new ExtendedContractData(ContractData.empty(), [], Fr.ZERO, Fr.ZERO, Fr.ZERO);
    }
    /** Temporary method for creating extended contract data out of classes and instances */
    static fromClassAndInstance(contractClass, instance) {
        return new ExtendedContractData(new ContractData(instance.address, instance.portalContractAddress), contractClass.publicFunctions.map(f => new EncodedContractFunction(f.selector, f.isInternal, f.bytecode)), instance.contractClassId, computeSaltedInitializationHash(instance), instance.publicKeysHash);
    }
}
/**
 * A contract data blob, containing L1 and L2 addresses.
 * TODO(palla/purge-old-contract-deploy): Delete me
 */
export class ContractData {
    constructor(
    /**
     * The L2 address of the contract, as a field element (32 bytes).
     */
    contractAddress, 
    /**
     * The L1 address of the contract, (20 bytes).
     */
    portalContractAddress) {
        this.contractAddress = contractAddress;
        this.portalContractAddress = portalContractAddress;
    }
    /**
     * Serializes this instance into a buffer, using 20 bytes for the eth address.
     * @returns Encoded buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.contractAddress, this.portalContractAddress);
    }
    /**
     * Serializes this instance into a string, using 20 bytes for the eth address.
     * @returns Encoded string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /** True if all data is zero. */
    isEmpty() {
        return this.contractAddress.isZero() && this.portalContractAddress.isZero();
    }
    /**
     * Deserializes a contract data object from an encoded buffer, using 20 bytes for the eth address.
     * @param buffer - Byte array resulting from calling toBuffer.
     * @returns Deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const aztecAddr = AztecAddress.fromBuffer(reader);
        const ethAddr = new EthAddress(reader.readBytes(EthAddress.SIZE_IN_BYTES));
        return new ContractData(aztecAddr, ethAddr);
    }
    /**
     * Deserializes a contract data object from an encoded string, using 20 bytes for the eth address.
     * @param str - String resulting from calling toString.
     * @returns Deserialized instance.
     */
    static fromString(str) {
        return ContractData.fromBuffer(Buffer.from(str, 'hex'));
    }
    /**
     * Generate ContractData with random addresses.
     * @returns ContractData.
     */
    static random() {
        return new ContractData(AztecAddress.random(), EthAddress.random());
    }
    /** Generates an empty ContractData. */
    static empty() {
        return new ContractData(AztecAddress.ZERO, EthAddress.ZERO);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250cmFjdF9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4SCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQ0wsWUFBWSxFQUNaLFlBQVksRUFDWixrQ0FBa0MsRUFDbEMsaUJBQWlCLEdBQ2xCLE1BQU0sNkJBQTZCLENBQUM7QUFvRHJDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHVCQUF1QjtJQUNsQztJQUNFOztPQUVHO0lBQ0ksUUFBMEI7SUFDakM7O09BRUc7SUFDSSxVQUFtQjtJQUMxQjs7T0FFRztJQUNJLFFBQWdCO1FBUmhCLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBSTFCLGVBQVUsR0FBVixVQUFVLENBQVM7UUFJbkIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtJQUN0QixDQUFDO0lBRUo7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN2RixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFB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