import { LogType, PublicDataWrite, TxHash, TxL2Logs } from '@aztec/circuit-types';
import { Fr, MAX_NEW_L2_TO_L1_MSGS_PER_TX, MAX_NEW_NOTE_HASHES_PER_TX, MAX_NEW_NULLIFIERS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, } from '@aztec/circuits.js';
import { assertRightPadded, makeTuple } from '@aztec/foundation/array';
import { padArrayEnd } from '@aztec/foundation/collection';
import { sha256 } from '@aztec/foundation/crypto';
import { BufferReader, assertLength, serializeArrayOfBufferableToVector } from '@aztec/foundation/serialize';
import { inspect } from 'util';
export class TxEffect {
    constructor(
    /**
     * The note hashes to be inserted into the note hash tree.
     */
    noteHashes, 
    /**
     * The nullifiers to be inserted into the nullifier tree.
     */
    nullifiers, 
    /**
     * The L2 to L1 messages to be inserted into the messagebox on L1.
     */
    l2ToL1Msgs, 
    /**
     * The public data writes to be inserted into the public data tree.
     */
    publicDataWrites, 
    /**
     * The logs of the txEffect
     */
    encryptedLogs, unencryptedLogs) {
        this.noteHashes = noteHashes;
        this.nullifiers = nullifiers;
        this.l2ToL1Msgs = l2ToL1Msgs;
        this.publicDataWrites = publicDataWrites;
        this.encryptedLogs = encryptedLogs;
        this.unencryptedLogs = unencryptedLogs;
    }
    toBuffer() {
        const nonZeroNoteHashes = this.noteHashes.filter(h => !h.isZero());
        const nonZeroNullifiers = this.nullifiers.filter(h => !h.isZero());
        const nonZeroL2ToL1Msgs = this.l2ToL1Msgs.filter(h => !h.isZero());
        const nonZeroPublicDataWrites = this.publicDataWrites.filter(h => !h.isEmpty());
        return Buffer.concat([
            serializeArrayOfBufferableToVector(nonZeroNoteHashes, 1),
            serializeArrayOfBufferableToVector(nonZeroNullifiers, 1),
            serializeArrayOfBufferableToVector(nonZeroL2ToL1Msgs, 1),
            serializeArrayOfBufferableToVector(nonZeroPublicDataWrites, 1),
            this.encryptedLogs.toBuffer(),
            this.unencryptedLogs.toBuffer(),
        ]);
    }
    /**
     * Deserializes the TxEffect object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of TxEffect.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const nonZeroNoteHashes = reader.readVectorUint8Prefix(Fr);
        const nonZeroNullifiers = reader.readVectorUint8Prefix(Fr);
        const nonZeroL2ToL1Msgs = reader.readVectorUint8Prefix(Fr);
        const nonZeroPublicDataWrites = reader.readVectorUint8Prefix(PublicDataWrite);
        return new TxEffect(padArrayEnd(nonZeroNoteHashes, Fr.ZERO, MAX_NEW_NOTE_HASHES_PER_TX), padArrayEnd(nonZeroNullifiers, Fr.ZERO, MAX_NEW_NULLIFIERS_PER_TX), padArrayEnd(nonZeroL2ToL1Msgs, Fr.ZERO, MAX_NEW_L2_TO_L1_MSGS_PER_TX), padArrayEnd(nonZeroPublicDataWrites, PublicDataWrite.empty(), MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX), TxL2Logs.fromBuffer(reader), TxL2Logs.fromBuffer(reader));
    }
    hash() {
        assertLength(this.noteHashes, MAX_NEW_NOTE_HASHES_PER_TX);
        assertRightPadded(this.noteHashes, Fr.isZero);
        const noteHashesBuffer = Buffer.concat(this.noteHashes.map(x => x.toBuffer()));
        assertLength(this.nullifiers, MAX_NEW_NULLIFIERS_PER_TX);
        assertRightPadded(this.nullifiers, Fr.isZero);
        const nullifiersBuffer = Buffer.concat(this.nullifiers.map(x => x.toBuffer()));
        assertLength(this.l2ToL1Msgs, MAX_NEW_L2_TO_L1_MSGS_PER_TX);
        assertRightPadded(this.l2ToL1Msgs, Fr.isZero);
        const newL2ToL1MsgsBuffer = Buffer.concat(this.l2ToL1Msgs.map(x => x.toBuffer()));
        assertLength(this.publicDataWrites, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX);
        assertRightPadded(this.publicDataWrites, PublicDataWrite.isEmpty);
        const publicDataUpdateRequestsBuffer = Buffer.concat(this.publicDataWrites.map(x => x.toBuffer()));
        const encryptedLogsHashKernel0 = this.encryptedLogs.hash();
        const unencryptedLogsHashKernel0 = this.unencryptedLogs.hash();
        const inputValue = Buffer.concat([
            noteHashesBuffer,
            nullifiersBuffer,
            newL2ToL1MsgsBuffer,
            publicDataUpdateRequestsBuffer,
            encryptedLogsHashKernel0,
            unencryptedLogsHashKernel0,
        ]);
        return sha256(inputValue);
    }
    static random(numPrivateCallsPerTx = 2, numPublicCallsPerTx = 3, numEncryptedLogsPerCall = 2, numUnencryptedLogsPerCall = 1) {
        return new TxEffect(makeTuple(MAX_NEW_NOTE_HASHES_PER_TX, Fr.random), makeTuple(MAX_NEW_NULLIFIERS_PER_TX, Fr.random), makeTuple(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr.random), makeTuple(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataWrite.random), TxL2Logs.random(numPrivateCallsPerTx, numEncryptedLogsPerCall, LogType.ENCRYPTED), TxL2Logs.random(numPublicCallsPerTx, numUnencryptedLogsPerCall, LogType.UNENCRYPTED));
    }
    /**
     * Returns a string representation of the TxEffect object.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    [inspect.custom]() {
        // print out the non-empty fields
        return `TxEffect { 
      note hashes: [${this.noteHashes.map(h => h.toString()).join(', ')}],
      nullifiers: [${this.nullifiers.map(h => h.toString()).join(', ')}],
      l2ToL1Msgs: [${this.l2ToL1Msgs.map(h => h.toString()).join(', ')}],
      publicDataWrites: [${this.publicDataWrites.map(h => h.toString()).join(', ')}],
      encryptedLogs: ${JSON.stringify(this.encryptedLogs.toJSON())},
      unencryptedLogs: ${JSON.stringify(this.unencryptedLogs.toJSON())}
     }`;
    }
    /**
     * Deserializes an TxEffect object from a string.
     * @param str - String to deserialize.
     * @returns An instance of TxEffect.
     */
    static fromString(str) {
        return TxEffect.fromBuffer(Buffer.from(str, 'hex'));
    }
    get txHash() {
        return new TxHash(this.nullifiers[0].toBuffer());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhfZWZmZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R4X2VmZmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEYsT0FBTyxFQUNMLEVBQUUsRUFDRiw0QkFBNEIsRUFDNUIsMEJBQTBCLEVBQzFCLHlCQUF5QixFQUN6QixzQ0FBc0MsR0FDdkMsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzNELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFTLFlBQVksRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXBILE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsTUFBTSxPQUFPLFFBQVE7SUFDbkI7SUFDRTs7T0FFRztJQUNJLFVBQXdEO0lBQy9EOztPQUVHO0lBQ0ksVUFBdUQ7SUFDOUQ7O09BRUc7SUFDSSxVQUEwRDtJQUNqRTs7T0FFRztJQUNJLGdCQUF1RjtJQUM5Rjs7T0FFRztJQUNJLGFBQXVCLEVBQ3ZCLGVBQXlCO1FBakJ6QixlQUFVLEdBQVYsVUFBVSxDQUE4QztRQUl4RCxlQUFVLEdBQVYsVUFBVSxDQUE2QztRQUl2RCxlQUFVLEdBQVYsVUFBVSxDQUFnRDtRQUkxRCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXVFO1FBSXZGLGtCQUFhLEdBQWIsYUFBYSxDQUFVO1FBQ3ZCLG9CQUFlLEdBQWYsZUFBZSxDQUFVO0lBQy9CLENBQUM7SUFFSixRQUFRO1FBQ04sTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFB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