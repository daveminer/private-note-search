var _L2Block_l1BlockNumber;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Body, TxHash } from '@aztec/circuit-types';
import { AppendOnlyTreeSnapshot, Header, STRING_ENCODING } from '@aztec/circuits.js';
import { sha256 } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { makeAppendOnlyTreeSnapshot, makeHeader } from './l2_block_code_to_purge.js';
/**
 * The data that makes up the rollup proof, with encoder decoder functions.
 */
export class L2Block {
    constructor(
    /** Snapshot of archive tree after the block is applied. */
    archive, 
    /** L2 block header. */
    header, 
    /** L2 block body. */
    body, 
    /** Associated L1 block num */
    l1BlockNumber) {
        this.archive = archive;
        this.header = header;
        this.body = body;
        _L2Block_l1BlockNumber.set(this, void 0);
        __classPrivateFieldSet(this, _L2Block_l1BlockNumber, l1BlockNumber, "f");
    }
    /**
     * Constructs a new instance from named fields.
     * @param fields - Fields to pass to the constructor.
     * @param blockHash - Hash of the block.
     * @param l1BlockNumber - The block number of the L1 block that contains this L2 block.
     * @returns A new instance.
     */
    static fromFields(fields, l1BlockNumber) {
        return new this(fields.archive, fields.header, fields.body, l1BlockNumber);
    }
    /**
     * Deserializes a block from a buffer
     * @returns A deserialized L2 block.
     */
    static fromBuffer(buf) {
        const reader = BufferReader.asReader(buf);
        const header = reader.readObject(Header);
        const archive = reader.readObject(AppendOnlyTreeSnapshot);
        const body = reader.readObject(Body);
        return L2Block.fromFields({
            archive,
            header,
            body,
        });
    }
    /**
     * Serializes a block
     * @returns A serialized L2 block as a Buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.header, this.archive, this.body);
    }
    /**
     * Deserializes L2 block from a buffer.
     * @param str - A serialized L2 block.
     * @returns Deserialized L2 block.
     */
    static fromString(str) {
        return L2Block.fromBuffer(Buffer.from(str, STRING_ENCODING));
    }
    /**
     * Serializes a block to a string.
     * @returns A serialized L2 block as a string.
     */
    toString() {
        return this.toBuffer().toString(STRING_ENCODING);
    }
    /**
     * Creates an L2 block containing random data.
     * @param l2BlockNum - The number of the L2 block.
     * @param txsPerBlock - The number of transactions to include in the block.
     * @param numPrivateCallsPerTx - The number of private function calls to include in each transaction.
     * @param numPublicCallsPerTx - The number of public function calls to include in each transaction.
     * @param numEncryptedLogsPerCall - The number of encrypted logs per 1 private function invocation.
     * @param numUnencryptedLogsPerCall - The number of unencrypted logs per 1 public function invocation.
     * @returns The L2 block.
     */
    static random(l2BlockNum, txsPerBlock = 4, numPrivateCallsPerTx = 2, numPublicCallsPerTx = 3, numEncryptedLogsPerCall = 2, numUnencryptedLogsPerCall = 1, numL1ToL2MessagesPerCall = 2) {
        const body = Body.random(txsPerBlock, numPrivateCallsPerTx, numPublicCallsPerTx, numEncryptedLogsPerCall, numUnencryptedLogsPerCall, numL1ToL2MessagesPerCall);
        const txsEffectsHash = body.getTxsEffectsHash();
        return L2Block.fromFields({
            archive: makeAppendOnlyTreeSnapshot(1),
            header: makeHeader(0, l2BlockNum, txsEffectsHash),
            body,
        }, 
        // just for testing purposes, each random L2 block got emitted in the equivalent L1 block
        BigInt(l2BlockNum));
    }
    get number() {
        return Number(this.header.globalVariables.blockNumber.toBigInt());
    }
    /**
     * Gets the L1 block number that included this block
     */
    getL1BlockNumber() {
        if (typeof __classPrivateFieldGet(this, _L2Block_l1BlockNumber, "f") === 'undefined') {
            throw new Error('L1 block number has to be attached before calling "getL1BlockNumber"');
        }
        return __classPrivateFieldGet(this, _L2Block_l1BlockNumber, "f");
    }
    /**
     * Sets the L1 block number that included this block
     * @param l1BlockNumber - The block number of the L1 block that contains this L2 block.
     */
    setL1BlockNumber(l1BlockNumber) {
        __classPrivateFieldSet(this, _L2Block_l1BlockNumber, l1BlockNumber, "f");
    }
    /**
     * Returns the block's hash (hash of block header).
     * @returns The block's hash.
     */
    hash() {
        return this.header.hash();
    }
    /**
     * Computes the public inputs hash for the L2 block.
     * The same output as the hash of RootRollupPublicInputs.
     * @returns The public input hash for the L2 block as a field element.
     */
    // TODO(#4844)
    getPublicInputsHash() {
        const buf = serializeToBuffer(this.header.globalVariables, AppendOnlyTreeSnapshot.zero(), // this.startNoteHashTreeSnapshot / commitments,
        AppendOnlyTreeSnapshot.zero(), // this.startNullifierTreeSnapshot,
        AppendOnlyTreeSnapshot.zero(), // this.startPublicDataTreeSnapshot,
        AppendOnlyTreeSnapshot.zero(), // this.startL1ToL2MessageTreeSnapshot,
        this.header.lastArchive, this.header.state.partial.noteHashTree, this.header.state.partial.nullifierTree, this.header.state.partial.publicDataTree, this.header.state.l1ToL2MessageTree, this.archive, this.body.getTxsEffectsHash(), this.getL1ToL2MessagesHash());
        return Fr.fromBufferReduce(sha256(buf));
    }
    /**
     * Computes the start state hash (should equal contract data before block).
     * @returns The start state hash for the L2 block.
     */
    // TODO(#4844)
    getStartStateHash() {
        const inputValue = serializeToBuffer(new Fr(Number(this.header.globalVariables.blockNumber.toBigInt()) - 1), AppendOnlyTreeSnapshot.zero(), // this.startNoteHashTreeSnapshot,
        AppendOnlyTreeSnapshot.zero(), // this.startNullifierTreeSnapshot,
        AppendOnlyTreeSnapshot.zero(), // this.startPublicDataTreeSnapshot,
        AppendOnlyTreeSnapshot.zero(), // this.startL1ToL2MessageTreeSnapshot,
        this.header.lastArchive);
        return sha256(inputValue);
    }
    /**
     * Computes the end state hash (should equal contract data after block).
     * @returns The end state hash for the L2 block.
     */
    // TODO(#4844)
    getEndStateHash() {
        const inputValue = serializeToBuffer(this.header.globalVariables.blockNumber, this.header.state.partial.noteHashTree, this.header.state.partial.nullifierTree, this.header.state.partial.publicDataTree, this.header.state.l1ToL2MessageTree, this.archive);
        return sha256(inputValue);
    }
    /**
     * Compute the hash of all of this blocks l1 to l2 messages,
     * The hash is also calculated within the contract when the block is submitted.
     * @returns The hash of all of the l1 to l2 messages.
     */
    getL1ToL2MessagesHash() {
        // Create a long buffer of all of the l1 to l2 messages
        const l1ToL2Messages = Buffer.concat(this.body.l1ToL2Messages.map(message => message.toBuffer()));
        return sha256(l1ToL2Messages);
    }
    /**
     * Get the ith transaction in an L2 block.
     * @param txIndex - The index of the tx in the block.
     * @returns The tx.
     */
    getTx(txIndex) {
        this.assertIndexInRange(txIndex);
        return this.body.txEffects[txIndex];
    }
    /**
     * A lightweight method to get the tx hash of a tx in the block.
     * @param txIndex - the index of the tx in the block
     * @returns a hash of the tx, which is the first nullifier in the tx
     */
    getTxHash(txIndex) {
        this.assertIndexInRange(txIndex);
        // Gets the first nullifier of the tx specified by txIndex
        const firstNullifier = this.body.txEffects[txIndex].nullifiers[0];
        return new TxHash(firstNullifier.toBuffer());
    }
    /**
     * Get all the transaction in an L2 block.
     * @returns The tx.
     */
    getTxs() {
        return Array(this.body.numberOfTxs)
            .fill(0)
            .map((_, i) => this.getTx(i));
    }
    /**
     * Returns stats used for logging.
     * @returns Stats on tx count, number, and log size and count.
     */
    getStats() {
        const logsStats = {
            encryptedLogLength: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.encryptedLogs.getSerializedLength(), 0),
            encryptedLogCount: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.encryptedLogs.getTotalLogCount(), 0),
            unencryptedLogCount: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.unencryptedLogs.getSerializedLength(), 0),
            unencryptedLogSize: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.unencryptedLogs.getTotalLogCount(), 0),
        };
        return {
            txCount: this.body.numberOfTxs,
            blockNumber: this.number,
            ...logsStats,
        };
    }
    assertIndexInRange(txIndex) {
        if (txIndex < 0 || txIndex >= this.body.numberOfTxs) {
            throw new IndexOutOfRangeError({
                txIndex,
                numberOfTxs: this.body.numberOfTxs,
                blockNumber: this.number,
            });
        }
    }
}
_L2Block_l1BlockNumber = new WeakMap();
/**
 * Custom error class for when a requested tx index is out of range.
 */
export class IndexOutOfRangeError extends Error {
    constructor({ txIndex, numberOfTxs, blockNumber, }) {
        super(`IndexOutOfRangeError: Failed to get tx at index ${txIndex}. Block ${blockNumber} has ${numberOfTxs} txs.`);
    }
}
//# sourceMappingURL=data:application/json;base64,