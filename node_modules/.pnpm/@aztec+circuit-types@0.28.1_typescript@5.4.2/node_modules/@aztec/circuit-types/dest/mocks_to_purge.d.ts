import { AggregationObject, AztecAddress, CallContext, CallRequest, CallerContext, CombinedConstantData, EthAddress, Fr, FunctionSelector, Point, PrivateAccumulatedNonRevertibleData, PrivateAccumulatedRevertibleData, PrivateKernelTailCircuitPublicInputs, PublicCallRequest, SideEffect, SideEffectLinkedToNoteHash, TxContext } from '@aztec/circuits.js';
/**
 * Creates arbitrary private kernel tail circuit public inputs.
 * @param seed - The seed to use for generating the kernel circuit public inputs.
 * @returns Private kernel tail circuit public inputs.
 */
export declare function makePrivateKernelTailCircuitPublicInputs(seed?: number, full?: boolean): PrivateKernelTailCircuitPublicInputs;
/**
 * TODO: Since the max value check is currently disabled this function is pointless. Should it be removed?
 * Test only. Easy to identify big endian field serialize.
 * @param n - The number.
 * @returns The field.
 */
export declare function fr(n: number): Fr;
/**
 * Creates arbitrary aggregation object.
 * @param seed - The seed to use for generating the aggregation object.
 * @returns An aggregation object.
 */
export declare function makeAggregationObject(seed?: number): AggregationObject;
/**
 * Creates arbitrary accumulated data for a Tx's non-revertible side effects.
 * @param seed - The seed to use for generating the data.
 * @returns An instance of AccumulatedNonRevertibleData.
 */
export declare function makeAccumulatedNonRevertibleData(seed?: number, full?: boolean): PrivateAccumulatedNonRevertibleData;
export declare function sideEffectFromNumber(n: number): SideEffect;
/**
 * Test only. Easy to identify big endian side-effect serialize.
 * @param n - The number.
 * @returns The SideEffect instance.
 */
export declare function sideEffectLinkedFromNumber(n: number): SideEffectLinkedToNoteHash;
/**
 * Makes arbitrary call stack item.
 * @param seed - The seed to use for generating the call stack item.
 * @returns A call stack item.
 */
export declare function makeCallRequest(seed?: number): CallRequest;
/**
 * Makes arbitrary aztec address.
 * @param seed - The seed to use for generating the aztec address.
 * @returns An aztec address.
 */
export declare function makeAztecAddress(seed?: number): AztecAddress;
/**
 * Makes arbitrary call stack item.
 * @param seed - The seed to use for generating the call stack item.
 * @returns A call stack item.
 */
export declare function makeCallerContext(seed?: number): CallerContext;
/**
 * Creates arbitrary final accumulated data.
 * @param seed - The seed to use for generating the final accumulated data.
 * @returns A final accumulated data.
 */
export declare function makeFinalAccumulatedData(seed?: number, full?: boolean): PrivateAccumulatedRevertibleData;
/**
 * Makes arbitrary eth address.
 * @param seed - The seed to use for generating the eth address.
 * @returns An eth address.
 */
export declare function makeEthAddress(seed?: number): EthAddress;
/**
 * Creates arbitrary constant data with the given seed.
 * @param seed - The seed to use for generating the constant data.
 * @returns A constant data object.
 */
export declare function makeConstantData(seed?: number): CombinedConstantData;
/**
 * Creates an arbitrary tx context with the given seed.
 * @param seed - The seed to use for generating the tx context.
 * @returns A tx context.
 */
export declare function makeTxContext(_seed: number): TxContext;
/**
 * Creates an arbitrary point in a curve.
 * @param seed - Seed to generate the point values.
 * @returns A point.
 */
export declare function makePoint(seed?: number): Point;
/**
 * Creates a public call request for testing.
 * @param seed - The seed.
 * @returns Public call request.
 */
export declare function makePublicCallRequest(seed?: number): PublicCallRequest;
/**
 * Creates arbitrary call context.
 * @param seed - The seed to use for generating the call context.
 * @param storageContractAddress - The storage contract address set on the call context.
 * @returns A call context.
 */
export declare function makeCallContext(seed?: number, storageContractAddress?: AztecAddress): CallContext;
/**
 * Creates arbitrary selector from the given seed.
 * @param seed - The seed to use for generating the selector.
 * @returns A selector.
 */
export declare function makeSelector(seed: number): FunctionSelector;
//# sourceMappingURL=mocks_to_purge.d.ts.map