import { AztecAddress, CallRequest, Fr, MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX, Proof, } from '@aztec/circuits.js';
import { makeTuple } from '@aztec/foundation/array';
import { times } from '@aztec/foundation/collection';
import { randomBytes } from '@aztec/foundation/crypto';
import { SerializableContractInstance } from '@aztec/types/contracts';
import { FunctionL2Logs, Note, TxL2Logs } from './logs/index.js';
import { makePrivateKernelTailCircuitPublicInputs, makePublicCallRequest } from './mocks_to_purge.js';
import { ExtendedNote } from './notes/index.js';
import { Tx, TxHash } from './tx/index.js';
/**
 * Testing utility to create empty logs composed from a single empty log.
 */
export function makeEmptyLogs() {
    const functionLogs = [new FunctionL2Logs([Buffer.alloc(0)])];
    return new TxL2Logs(functionLogs);
}
export const randomTxHash = () => new TxHash(randomBytes(32));
export const mockTx = (seed = 1, logs = true) => {
    const tx = new Tx(makePrivateKernelTailCircuitPublicInputs(seed), new Proof(Buffer.alloc(0)), logs ? TxL2Logs.random(8, 3) : TxL2Logs.empty(), // 8 priv function invocations creating 3 encrypted logs each
    logs ? TxL2Logs.random(11, 2) : TxL2Logs.empty(), // 8 priv + 3 pub function invocations creating 2 unencrypted logs each
    times(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, makePublicCallRequest));
    tx.data.endNonRevertibleData.publicCallStack = [
        tx.enqueuedPublicFunctionCalls[1].toCallRequest(),
        tx.enqueuedPublicFunctionCalls[0].toCallRequest(),
        CallRequest.empty(),
    ];
    tx.data.end.publicCallStack = makeTuple(MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX, i => tx.enqueuedPublicFunctionCalls[i + 2]?.toCallRequest() ?? CallRequest.empty()).reverse();
    return tx;
};
export const randomContractArtifact = () => ({
    name: randomBytes(4).toString('hex'),
    functions: [],
    events: [],
    fileMap: {},
});
export const randomContractInstanceWithAddress = () => SerializableContractInstance.random().withAddress(AztecAddress.random());
export const randomDeployedContract = () => ({
    artifact: randomContractArtifact(),
    instance: randomContractInstanceWithAddress(),
});
export const randomExtendedNote = ({ note = Note.random(), owner = AztecAddress.random(), contractAddress = AztecAddress.random(), txHash = randomTxHash(), storageSlot = Fr.random(), noteTypeId = Fr.random(), } = {}) => {
    return new ExtendedNote(note, owner, contractAddress, storageSlot, noteTypeId, txHash);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbW9ja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFlBQVksRUFDWixXQUFXLEVBQ1gsRUFBRSxFQUNGLG1DQUFtQyxFQUNuQyw4Q0FBOEMsRUFDOUMsS0FBSyxHQUNOLE1BQU0sb0JBQW9CLENBQUM7QUFFNUIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFdkQsT0FBTyxFQUErQiw0QkFBNEIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBR25HLE9BQU8sRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQzs7R0FFRztBQUNILE1BQU0sVUFBVSxhQUFhO0lBQzNCLE1BQU0sWUFBWSxHQUFHLENBQUMsSUFBSSxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELE9BQU8sSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFXLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUV0RSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdB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