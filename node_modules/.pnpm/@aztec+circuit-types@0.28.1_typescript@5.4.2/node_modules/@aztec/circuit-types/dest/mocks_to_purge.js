import { ARGS_LENGTH, AggregationObject, AztecAddress, CallContext, CallRequest, CallerContext, CombinedConstantData, EthAddress, Fq, Fr, FunctionData, FunctionSelector, G1AffineElement, MAX_NEW_L2_TO_L1_MSGS_PER_TX, MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX, MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX, MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, MAX_REVERTIBLE_NOTE_HASHES_PER_TX, MAX_REVERTIBLE_NULLIFIERS_PER_TX, MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX, Point, PrivateAccumulatedNonRevertibleData, PrivateAccumulatedRevertibleData, PrivateKernelTailCircuitPublicInputs, PublicCallRequest, SideEffect, SideEffectLinkedToNoteHash, TxContext, } from '@aztec/circuits.js';
import { makeHalfFullTuple, makeTuple, range } from '@aztec/foundation/array';
import { makeHeader } from './l2_block_code_to_purge.js';
/**
 * Creates arbitrary private kernel tail circuit public inputs.
 * @param seed - The seed to use for generating the kernel circuit public inputs.
 * @returns Private kernel tail circuit public inputs.
 */
export function makePrivateKernelTailCircuitPublicInputs(seed = 1, full = true) {
    return new PrivateKernelTailCircuitPublicInputs(makeAggregationObject(seed), makeAccumulatedNonRevertibleData(seed + 0x100, full), makeFinalAccumulatedData(seed + 0x200, full), makeConstantData(seed + 0x300), true, true, true);
}
/**
 * TODO: Since the max value check is currently disabled this function is pointless. Should it be removed?
 * Test only. Easy to identify big endian field serialize.
 * @param n - The number.
 * @returns The field.
 */
export function fr(n) {
    return new Fr(BigInt(n));
}
/**
 * Creates arbitrary aggregation object.
 * @param seed - The seed to use for generating the aggregation object.
 * @returns An aggregation object.
 */
export function makeAggregationObject(seed = 1) {
    return new AggregationObject(new G1AffineElement(new Fq(BigInt(seed)), new Fq(BigInt(seed + 1))), new G1AffineElement(new Fq(BigInt(seed + 0x100)), new Fq(BigInt(seed + 0x101))), makeTuple(4, fr, seed + 2), range(6, seed + 6));
}
/**
 * Creates arbitrary accumulated data for a Tx's non-revertible side effects.
 * @param seed - The seed to use for generating the data.
 * @returns An instance of AccumulatedNonRevertibleData.
 */
export function makeAccumulatedNonRevertibleData(seed = 1, full = false) {
    const tupleGenerator = full ? makeTuple : makeHalfFullTuple;
    return new PrivateAccumulatedNonRevertibleData(tupleGenerator(MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX, sideEffectFromNumber, seed + 0x101), tupleGenerator(MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX, sideEffectLinkedFromNumber, seed + 0x201), tupleGenerator(MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX, makeCallRequest, seed + 0x501));
}
export function sideEffectFromNumber(n) {
    return new SideEffect(new Fr(BigInt(n)), Fr.zero());
}
/**
 * Test only. Easy to identify big endian side-effect serialize.
 * @param n - The number.
 * @returns The SideEffect instance.
 */
export function sideEffectLinkedFromNumber(n) {
    return new SideEffectLinkedToNoteHash(new Fr(BigInt(n)), Fr.zero(), Fr.zero());
}
/**
 * Makes arbitrary call stack item.
 * @param seed - The seed to use for generating the call stack item.
 * @returns A call stack item.
 */
export function makeCallRequest(seed = 1) {
    return new CallRequest(fr(seed), makeAztecAddress(seed + 0x1), makeCallerContext(seed + 0x2), fr(0), fr(0));
}
/**
 * Makes arbitrary aztec address.
 * @param seed - The seed to use for generating the aztec address.
 * @returns An aztec address.
 */
export function makeAztecAddress(seed = 1) {
    return AztecAddress.fromField(fr(seed));
}
/**
 * Makes arbitrary call stack item.
 * @param seed - The seed to use for generating the call stack item.
 * @returns A call stack item.
 */
export function makeCallerContext(seed = 1) {
    return new CallerContext(makeAztecAddress(seed), makeAztecAddress(seed + 0x1));
}
/**
 * Creates arbitrary final accumulated data.
 * @param seed - The seed to use for generating the final accumulated data.
 * @returns A final accumulated data.
 */
export function makeFinalAccumulatedData(seed = 1, full = false) {
    const tupleGenerator = full ? makeTuple : makeHalfFullTuple;
    return new PrivateAccumulatedRevertibleData(tupleGenerator(MAX_REVERTIBLE_NOTE_HASHES_PER_TX, sideEffectFromNumber, seed + 0x100), tupleGenerator(MAX_REVERTIBLE_NULLIFIERS_PER_TX, sideEffectLinkedFromNumber, seed + 0x200), tupleGenerator(MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, makeCallRequest, seed + 0x400), tupleGenerator(MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX, makeCallRequest, seed + 0x500), tupleGenerator(MAX_NEW_L2_TO_L1_MSGS_PER_TX, fr, seed + 0x600), tupleGenerator(2, fr, seed + 0x700), // encrypted logs hash
    tupleGenerator(2, fr, seed + 0x800), // unencrypted logs hash
    fr(seed + 0x900), // encrypted_log_preimages_length
    fr(seed + 0xa00));
}
/**
 * Makes arbitrary eth address.
 * @param seed - The seed to use for generating the eth address.
 * @returns An eth address.
 */
export function makeEthAddress(seed = 1) {
    return EthAddress.fromField(fr(seed));
}
/**
 * Creates arbitrary constant data with the given seed.
 * @param seed - The seed to use for generating the constant data.
 * @returns A constant data object.
 */
export function makeConstantData(seed = 1) {
    return new CombinedConstantData(makeHeader(seed, undefined), makeTxContext(seed + 4));
}
/**
 * Creates an arbitrary tx context with the given seed.
 * @param seed - The seed to use for generating the tx context.
 * @returns A tx context.
 */
export function makeTxContext(_seed) {
    // @todo @LHerskind should probably take value for chainId as it will be verified later.
    return new TxContext(false, false, Fr.ZERO, Fr.ZERO);
}
/**
 * Creates an arbitrary point in a curve.
 * @param seed - Seed to generate the point values.
 * @returns A point.
 */
export function makePoint(seed = 1) {
    return new Point(fr(seed), fr(seed + 1));
}
/**
 * Creates a public call request for testing.
 * @param seed - The seed.
 * @returns Public call request.
 */
export function makePublicCallRequest(seed = 1) {
    const childCallContext = makeCallContext(seed + 0x2, makeAztecAddress(seed));
    const parentCallContext = CallContext.from({
        msgSender: makeAztecAddress(seed + 0x3),
        storageContractAddress: childCallContext.msgSender,
        portalContractAddress: makeEthAddress(seed + 2),
        functionSelector: makeSelector(seed + 3),
        isStaticCall: false,
        isDelegateCall: false,
        sideEffectCounter: 0,
    });
    return new PublicCallRequest(makeAztecAddress(seed), new FunctionData(makeSelector(seed + 0x1), false, false, false), childCallContext, parentCallContext, makeTuple(ARGS_LENGTH, fr, seed + 0x10));
}
/**
 * Creates arbitrary call context.
 * @param seed - The seed to use for generating the call context.
 * @param storageContractAddress - The storage contract address set on the call context.
 * @returns A call context.
 */
export function makeCallContext(seed = 0, storageContractAddress = makeAztecAddress(seed + 1)) {
    return new CallContext(makeAztecAddress(seed), storageContractAddress, makeEthAddress(seed + 2), makeSelector(seed + 3), false, false, 0);
}
/**
 * Creates arbitrary selector from the given seed.
 * @param seed - The seed to use for generating the selector.
 * @returns A selector.
 */
export function makeSelector(seed) {
    return new FunctionSelector(seed);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja3NfdG9fcHVyZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbW9ja3NfdG9fcHVyZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsWUFBWSxFQUNaLFdBQVcsRUFDWCxXQUFXLEVBQ1gsYUFBYSxFQUNiLG9CQUFvQixFQUNwQixVQUFVLEVBQ1YsRUFBRSxFQUNGLEVBQUUsRUFDRixZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDZiw0QkFBNEIsRUFDNUIscUNBQXFDLEVBQ3JDLG9DQUFvQyxFQUNwQyxrREFBa0QsRUFDbEQsb0NBQW9DLEVBQ3BDLGlDQUFpQyxFQUNqQyxnQ0FBZ0MsRUFDaEMsOENBQThDLEVBQzlDLEtBQUssRUFDTCxtQ0FBbUMsRUFDbkMsZ0NBQWdDLEVBQ2hDLG9DQUFvQyxFQUNwQyxpQkFBaUIsRUFDakIsVUFBVSxFQUNWLDBCQUEwQixFQUMxQixTQUFTLEdBQ1YsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTlFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV6RDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLHdDQUF3QyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUk7SUFDNUUsT0FBTyxJQUFJLG9DQUFvQyxDQUM3QyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsRUFDM0IsZ0NBQWdDLENBQUMsSUFBSSxHQUFHLEtBQUssRUFBRSxJQUFJLENBQUMsRUFDcEQsd0JBQXdCLENBQUMsSUFBSSxHQUFHLEtBQUssRUFBRSxJQUFJLENBQUMsRUFDNUMsZ0JBQWdCLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUM5QixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksQ0FDTCxDQUFDO0FB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