/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { PublicDataWrite, TxHash, TxL2Logs } from '@aztec/circuit-types';
import { Fr, MAX_NEW_L2_TO_L1_MSGS_PER_TX, MAX_NEW_NOTE_HASHES_PER_TX, MAX_NEW_NULLIFIERS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX } from '@aztec/circuits.js';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
export declare class TxEffect {
    /**
     * The note hashes to be inserted into the note hash tree.
     */
    noteHashes: Tuple<Fr, typeof MAX_NEW_NOTE_HASHES_PER_TX>;
    /**
     * The nullifiers to be inserted into the nullifier tree.
     */
    nullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>;
    /**
     * The L2 to L1 messages to be inserted into the messagebox on L1.
     */
    l2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_TX>;
    /**
     * The public data writes to be inserted into the public data tree.
     */
    publicDataWrites: Tuple<PublicDataWrite, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>;
    /**
     * The logs of the txEffect
     */
    encryptedLogs: TxL2Logs;
    unencryptedLogs: TxL2Logs;
    constructor(
    /**
     * The note hashes to be inserted into the note hash tree.
     */
    noteHashes: Tuple<Fr, typeof MAX_NEW_NOTE_HASHES_PER_TX>, 
    /**
     * The nullifiers to be inserted into the nullifier tree.
     */
    nullifiers: Tuple<Fr, typeof MAX_NEW_NULLIFIERS_PER_TX>, 
    /**
     * The L2 to L1 messages to be inserted into the messagebox on L1.
     */
    l2ToL1Msgs: Tuple<Fr, typeof MAX_NEW_L2_TO_L1_MSGS_PER_TX>, 
    /**
     * The public data writes to be inserted into the public data tree.
     */
    publicDataWrites: Tuple<PublicDataWrite, typeof MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX>, 
    /**
     * The logs of the txEffect
     */
    encryptedLogs: TxL2Logs, unencryptedLogs: TxL2Logs);
    toBuffer(): Buffer;
    /**
     * Deserializes the TxEffect object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of TxEffect.
     */
    static fromBuffer(buffer: Buffer | BufferReader): TxEffect;
    hash(): Buffer;
    static random(numPrivateCallsPerTx?: number, numPublicCallsPerTx?: number, numEncryptedLogsPerCall?: number, numUnencryptedLogsPerCall?: number): TxEffect;
    /**
     * Returns a string representation of the TxEffect object.
     */
    toString(): string;
    [inspect.custom](): string;
    /**
     * Deserializes an TxEffect object from a string.
     * @param str - String to deserialize.
     * @returns An instance of TxEffect.
     */
    static fromString(str: string): TxEffect;
    get txHash(): TxHash;
}
//# sourceMappingURL=tx_effect.d.ts.map