import { ContractClassRegisteredEvent, PrivateKernelTailCircuitPublicInputs, Proof, PublicCallRequest, SideEffect, SideEffectLinkedToNoteHash, } from '@aztec/circuits.js';
import { arrayNonEmptyLength } from '@aztec/foundation/collection';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { TxL2Logs } from '../logs/tx_l2_logs.js';
import { TxHash } from './tx_hash.js';
/**
 * The interface of an L2 transaction.
 */
export class Tx {
    constructor(
    /**
     * Output of the private kernel circuit for this tx.
     */
    data, 
    /**
     * Proof from the private kernel circuit.
     */
    proof, 
    /**
     * Encrypted logs generated by the tx.
     */
    encryptedLogs, 
    /**
     * Unencrypted logs generated by the tx.
     */
    unencryptedLogs, 
    /**
     * Enqueued public functions from the private circuit to be run by the sequencer.
     * Preimages of the public call stack entries from the private kernel circuit output.
     */
    enqueuedPublicFunctionCalls) {
        this.data = data;
        this.proof = proof;
        this.encryptedLogs = encryptedLogs;
        this.unencryptedLogs = unencryptedLogs;
        this.enqueuedPublicFunctionCalls = enqueuedPublicFunctionCalls;
        if (this.unencryptedLogs.functionLogs.length < this.encryptedLogs.functionLogs.length) {
            // This check is present because each private function invocation creates encrypted FunctionL2Logs object and
            // both public and private function invocations create unencrypted FunctionL2Logs object. Hence "num unencrypted"
            // >= "num encrypted".
            throw new Error(`Number of function logs in unencrypted logs (${this.unencryptedLogs.functionLogs.length}) has to be equal
        or larger than number function logs in encrypted logs (${this.encryptedLogs.functionLogs.length})`);
        }
        const kernelPublicCallStackSize = data?.end.publicCallStack && arrayNonEmptyLength(data.end.publicCallStack, item => item.isEmpty());
        if (kernelPublicCallStackSize && kernelPublicCallStackSize > (enqueuedPublicFunctionCalls?.length ?? 0)) {
            throw new Error(`Missing preimages for enqueued public function calls in kernel circuit public inputs (expected
          ${kernelPublicCallStackSize}, got ${enqueuedPublicFunctionCalls?.length})`);
        }
    }
    /**
     * Deserializes the Tx object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of Tx.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new Tx(reader.readObject(PrivateKernelTailCircuitPublicInputs), reader.readObject(Proof), reader.readObject(TxL2Logs), reader.readObject(TxL2Logs), reader.readArray(reader.readNumber(), PublicCallRequest));
    }
    /**
     * Serializes the Tx object into a Buffer.
     * @returns Buffer representation of the Tx object.
     */
    toBuffer() {
        return serializeToBuffer([
            this.data,
            this.proof,
            this.encryptedLogs,
            this.unencryptedLogs,
            this.enqueuedPublicFunctionCalls.length,
            this.enqueuedPublicFunctionCalls,
        ]);
    }
    /**
     * Convert a Tx class object to a plain JSON object.
     * @returns A plain object with Tx properties.
     */
    toJSON() {
        return {
            data: this.data.toBuffer().toString('hex'),
            encryptedLogs: this.encryptedLogs.toBuffer().toString('hex'),
            unencryptedLogs: this.unencryptedLogs.toBuffer().toString('hex'),
            proof: this.proof.toBuffer().toString('hex'),
            enqueuedPublicFunctions: this.enqueuedPublicFunctionCalls.map(f => f.toBuffer().toString('hex')) ?? [],
        };
    }
    /**
     * Gets unencrypted logs emitted by this tx.
     * @param logsSource - An instance of `L2LogsSource` which can be used to obtain the logs.
     * @returns The requested logs.
     */
    getUnencryptedLogs(logsSource) {
        return logsSource.getUnencryptedLogs({ txHash: this.getTxHash() });
    }
    /**
     * Convert a plain JSON object to a Tx class object.
     * @param obj - A plain Tx JSON object.
     * @returns A Tx class object.
     */
    static fromJSON(obj) {
        const publicInputs = PrivateKernelTailCircuitPublicInputs.fromBuffer(Buffer.from(obj.data, 'hex'));
        const encryptedLogs = TxL2Logs.fromBuffer(Buffer.from(obj.encryptedLogs, 'hex'));
        const unencryptedLogs = TxL2Logs.fromBuffer(Buffer.from(obj.unencryptedLogs, 'hex'));
        const proof = Buffer.from(obj.proof, 'hex');
        const enqueuedPublicFunctions = obj.enqueuedPublicFunctions
            ? obj.enqueuedPublicFunctions.map((x) => PublicCallRequest.fromBuffer(Buffer.from(x, 'hex')))
            : [];
        return new Tx(publicInputs, Proof.fromBuffer(proof), encryptedLogs, unencryptedLogs, enqueuedPublicFunctions);
    }
    /**
     * Construct & return transaction hash.
     * @returns The transaction's hash.
     */
    getTxHash() {
        // Private kernel functions are executed client side and for this reason tx hash is already set as first nullifier
        const firstNullifier = this.data?.endNonRevertibleData.newNullifiers[0];
        if (!firstNullifier || firstNullifier.isEmpty()) {
            throw new Error(`Cannot get tx hash since first nullifier is missing`);
        }
        return new TxHash(firstNullifier.value.toBuffer());
    }
    /** Returns stats about this tx. */
    getStats() {
        return {
            txHash: this.getTxHash().toString(),
            encryptedLogCount: this.encryptedLogs.getTotalLogCount(),
            unencryptedLogCount: this.unencryptedLogs.getTotalLogCount(),
            encryptedLogSize: this.encryptedLogs.getSerializedLength(),
            unencryptedLogSize: this.unencryptedLogs.getSerializedLength(),
            newCommitmentCount: arrayNonEmptyLength(this.data.endNonRevertibleData.newNoteHashes, SideEffect.isEmpty) +
                arrayNonEmptyLength(this.data.end.newNoteHashes, SideEffect.isEmpty),
            newNullifierCount: arrayNonEmptyLength(this.data.endNonRevertibleData.newNullifiers, SideEffectLinkedToNoteHash.isEmpty) +
                arrayNonEmptyLength(this.data.end.newNullifiers, SideEffectLinkedToNoteHash.isEmpty),
            proofSize: this.proof.buffer.length,
            size: this.toBuffer().length,
            classRegisteredCount: this.unencryptedLogs
                .unrollLogs()
                .filter(log => ContractClassRegisteredEvent.isContractClassRegisteredEvent(log)).length,
        };
    }
    /**
     * Convenience function to get a hash out of a tx or a tx-like.
     * @param tx - Tx-like object.
     * @returns - The hash.
     */
    static getHash(tx) {
        const hasHash = (tx) => tx.hash !== undefined;
        return hasHash(tx) ? tx.hash : tx.getTxHash();
    }
    /**
     * Convenience function to get array of hashes for an array of txs.
     * @param txs - The txs to get the hashes from.
     * @returns The corresponding array of hashes.
     */
    static getHashes(txs) {
        return txs.map(tx => Tx.getHash(tx));
    }
    /**
     * Clones a tx, making a deep copy of all fields.
     * @param tx - The transaction to be cloned.
     * @returns The cloned transaction.
     */
    static clone(tx) {
        const publicInputs = PrivateKernelTailCircuitPublicInputs.fromBuffer(tx.data.toBuffer());
        const proof = Proof.fromBuffer(tx.proof.toBuffer());
        const encryptedLogs = TxL2Logs.fromBuffer(tx.encryptedLogs.toBuffer());
        const unencryptedLogs = TxL2Logs.fromBuffer(tx.unencryptedLogs.toBuffer());
        const enqueuedPublicFunctions = tx.enqueuedPublicFunctionCalls.map(x => {
            return PublicCallRequest.fromBuffer(x.toBuffer());
        });
        return new Tx(publicInputs, proof, encryptedLogs, unencryptedLogs, enqueuedPublicFunctions);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHgvdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLDRCQUE0QixFQUM1QixvQ0FBb0MsRUFDcEMsS0FBSyxFQUNMLGlCQUFpQixFQUNqQixVQUFVLEVBQ1YsMEJBQTBCLEdBQzNCLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSTlFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVqRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXRDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLEVBQUU7SUFDYjtJQUNFOztPQUVHO0lBQ2EsSUFBMEM7SUFDMUQ7O09BRUc7SUFDYSxLQUFZO0lBQzVCOztPQUVHO0lBQ2EsYUFBdUI7SUFDdkM7O09BRUc7SUFDYSxlQUF5QjtJQUN6Qzs7O09BR0c7SUFDYSwyQkFBZ0Q7UUFqQmhELFNBQUksR0FBSixJQUFJLENBQXNDO1FBSTFDLFVBQUssR0FBTCxLQUFLLENBQU87UUFJWixrQkFBYSxHQUFiLGFBQWEsQ0FBVTtRQUl2QixvQkFBZSxHQUFmLGVBQWUsQ0FBVTtRQUt6QixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQXFCO1FBRWhFLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3RGLDZHQUE2RztZQUM3RyxpSEFBaUg7WUFDakgsc0JBQXNCO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0RBQWdELElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLE1BQU07aUVBQy9CLElBQUksQ0FBQyxh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