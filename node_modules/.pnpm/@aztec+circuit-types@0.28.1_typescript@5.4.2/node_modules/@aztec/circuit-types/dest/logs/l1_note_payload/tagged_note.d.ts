/// <reference types="node" resolution-mode="require"/>
import { GrumpkinPrivateKey, PublicKey } from '@aztec/circuits.js';
import { Grumpkin } from '@aztec/circuits.js/barretenberg';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { L1NotePayload } from './l1_note_payload.js';
/**
 * Encrypted note payload with a tag used for retrieval by clients.
 */
export declare class TaggedNote {
    notePayload: L1NotePayload;
    tag: Fr;
    constructor(notePayload: L1NotePayload, tag?: Fr);
    /**
     * Deserializes the TaggedNote object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of TaggedNote.
     */
    static fromBuffer(buffer: Buffer | BufferReader): TaggedNote;
    /**
     * Serializes the TaggedNote object into a Buffer.
     * @returns Buffer representation of the TaggedNote object (unencrypted).
     */
    toBuffer(): Buffer;
    /**
     * Encrypt the L1NotePayload object using the owner's public key and the ephemeral private key, then attach the tag.
     * @param ownerPubKey - Public key of the owner of the TaggedNote object.
     * @param curve - The curve instance to use.
     * @returns The encrypted TaggedNote object.
     */
    toEncryptedBuffer(ownerPubKey: PublicKey, curve: Grumpkin): Buffer;
    /**
     * Decrypts the L1NotePayload object using the owner's private key.
     * @param data - Encrypted TaggedNote object.
     * @param ownerPrivKey - Private key of the owner of the TaggedNote object.
     * @param curve - The curve instance to use.
     * @returns Instance of TaggedNote if the decryption was successful, undefined otherwise.
     */
    static fromEncryptedBuffer(data: Buffer, ownerPrivKey: GrumpkinPrivateKey, curve: Grumpkin): TaggedNote | undefined;
    static random(): TaggedNote;
}
//# sourceMappingURL=tagged_note.d.ts.map