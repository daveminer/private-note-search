import { AztecAddress } from '@aztec/circuits.js';
import { Fr, GrumpkinScalar } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { decryptBuffer, encryptBuffer } from './encrypt_buffer.js';
import { Note } from './note.js';
/**
 * A class which wraps note data which is pushed on L1.
 * @remarks This data is required to compute a nullifier/to spend a note. Along with that this class contains
 * the necessary functionality to encrypt and decrypt the data.
 */
export class L1NotePayload {
    constructor(
    /**
     * A note as emitted from Noir contract. Can be used along with private key to compute nullifier.
     */
    note, 
    /**
     * Address of the contract this tx is interacting with.
     */
    contractAddress, 
    /**
     * Storage slot of the contract this tx is interacting with.
     */
    storageSlot, 
    /**
     * Type identifier for the underlying note, required to determine how to compute its hash and nullifier.
     */
    noteTypeId) {
        this.note = note;
        this.contractAddress = contractAddress;
        this.storageSlot = storageSlot;
        this.noteTypeId = noteTypeId;
    }
    /**
     * Deserializes the L1NotePayload object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of L1NotePayload.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new L1NotePayload(reader.readObject(Note), reader.readObject(AztecAddress), Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    /**
     * Serializes the L1NotePayload object into a Buffer.
     * @returns Buffer representation of the L1NotePayload object.
     */
    toBuffer() {
        return serializeToBuffer([this.note, this.contractAddress, this.storageSlot, this.noteTypeId]);
    }
    /**
     * Encrypt the L1NotePayload object using the owner's public key and the ephemeral private key.
     * @param ownerPubKey - Public key of the owner of the L1NotePayload object.
     * @param curve - The curve instance to use.
     * @returns The encrypted L1NotePayload object.
     */
    toEncryptedBuffer(ownerPubKey, curve) {
        const ephPrivKey = GrumpkinScalar.random();
        return encryptBuffer(this.toBuffer(), ownerPubKey, ephPrivKey, curve);
    }
    /**
     * Decrypts the L1NotePayload object using the owner's private key.
     * @param data - Encrypted L1NotePayload object.
     * @param ownerPrivKey - Private key of the owner of the L1NotePayload object.
     * @param curve - The curve instance to use.
     * @returns Instance of L1NotePayload if the decryption was successful, undefined otherwise.
     */
    static fromEncryptedBuffer(data, ownerPrivKey, curve) {
        const buf = decryptBuffer(data, ownerPrivKey, curve);
        if (!buf) {
            return;
        }
        return L1NotePayload.fromBuffer(buf);
    }
    /**
     * Create a random L1NotePayload object (useful for testing purposes).
     * @returns A random L1NotePayload object.
     */
    static random() {
        return new L1NotePayload(Note.random(), AztecAddress.random(), Fr.random(), Fr.random());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDFfbm90ZV9wYXlsb2FkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xvZ3MvbDFfbm90ZV9wYXlsb2FkL2wxX25vdGVfcGF5bG9hZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFpQyxNQUFNLG9CQUFvQixDQUFDO0FBRWpGLE9BQU8sRUFBRSxFQUFFLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlFLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVqQzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGFBQWE7SUFDeEI7SUFDRTs7T0FFRztJQUNJLElBQVU7SUFDakI7O09BRUc7SUFDSSxlQUE2QjtJQUNwQzs7T0FFRztJQUNJLFdBQWU7SUFDdEI7O09BRUc7SUFDSSxVQUFjO1FBWmQsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUlWLG9CQUFlLEdBQWYsZUFBZSxDQUFjO1FBSTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFJO1FBSWYsZUFBVSxHQUFWLFVBQVUsQ0FBSTtJQUNwQixDQUFDO0lBRUo7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksYUFBYSxDQUN0QixNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUN2QixNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUN0QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksaUJBQWlCLENBQUMsV0FBc0IsRUFBRSxLQUFlO1FBQzlELE1BQU0sVUFBVSxHQUF1QixjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDL0QsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxtQkFBbUIsQ0FDeEIsSUFBWSxFQUNaLFlBQWdDLEVBQ2hDLEtBQWU7UUFFZixNQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDVCxPQUFPO1FBQ1QsQ0FBQztRQUNELE9BQU8sYUFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLE1BQU07UUFDWCxPQUFPLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzNGLENBQUM7Q0FDRiJ9