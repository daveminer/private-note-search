import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { L1NotePayload } from './l1_note_payload.js';
// placeholder value until tagging is implemented
const PLACEHOLDER_TAG = new Fr(33);
/**
 * Encrypted note payload with a tag used for retrieval by clients.
 */
export class TaggedNote {
    constructor(notePayload, tag = PLACEHOLDER_TAG) {
        this.notePayload = notePayload;
        this.tag = tag;
    }
    /**
     * Deserializes the TaggedNote object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of TaggedNote.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const tag = Fr.fromBuffer(reader);
        const payload = L1NotePayload.fromBuffer(reader);
        return new TaggedNote(payload, tag);
    }
    /**
     * Serializes the TaggedNote object into a Buffer.
     * @returns Buffer representation of the TaggedNote object (unencrypted).
     */
    toBuffer() {
        return serializeToBuffer(this.tag, this.notePayload);
    }
    /**
     * Encrypt the L1NotePayload object using the owner's public key and the ephemeral private key, then attach the tag.
     * @param ownerPubKey - Public key of the owner of the TaggedNote object.
     * @param curve - The curve instance to use.
     * @returns The encrypted TaggedNote object.
     */
    toEncryptedBuffer(ownerPubKey, curve) {
        const encryptedL1NotePayload = this.notePayload.toEncryptedBuffer(ownerPubKey, curve);
        return serializeToBuffer(this.tag, encryptedL1NotePayload);
    }
    /**
     * Decrypts the L1NotePayload object using the owner's private key.
     * @param data - Encrypted TaggedNote object.
     * @param ownerPrivKey - Private key of the owner of the TaggedNote object.
     * @param curve - The curve instance to use.
     * @returns Instance of TaggedNote if the decryption was successful, undefined otherwise.
     */
    static fromEncryptedBuffer(data, ownerPrivKey, curve) {
        const reader = BufferReader.asReader(data);
        const tag = Fr.fromBuffer(reader);
        const encryptedL1NotePayload = reader.readToEnd();
        const payload = L1NotePayload.fromEncryptedBuffer(encryptedL1NotePayload, ownerPrivKey, curve);
        if (!payload) {
            return;
        }
        return new TaggedNote(payload, tag);
    }
    static random() {
        return new TaggedNote(L1NotePayload.random());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnZ2VkX25vdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbG9ncy9sMV9ub3RlX3BheWxvYWQvdGFnZ2VkX25vdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUU5RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFckQsaURBQWlEO0FBQ2pELE1BQU0sZUFBZSxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRW5DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFVBQVU7SUFDckIsWUFBbUIsV0FBMEIsRUFBUyxNQUFNLGVBQWU7UUFBeEQsZ0JBQVcsR0FBWCxXQUFXLENBQWU7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFrQjtJQUFHLENBQUM7SUFFL0U7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsT0FBTyxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFFBQVE7UUFDYixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLGlCQUFpQixDQUFDLFdBQXNCLEVBQUUsS0FBZTtRQUM5RCxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RGLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBWSxFQUFFLFlBQWdDLEVBQUUsS0FBZTtRQUN4RixNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEMsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFbEQsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFDLHNCQUFzQixFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvRixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDYixPQUFPO1FBQ1QsQ0FBQztRQUNELE9BQU8sSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTTtRQUNYLE9BQU8sSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztDQUNGIn0=