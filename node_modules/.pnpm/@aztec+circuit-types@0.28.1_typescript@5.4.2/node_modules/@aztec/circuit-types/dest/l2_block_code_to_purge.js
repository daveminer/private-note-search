import { AppendOnlyTreeSnapshot, AztecAddress, ContentCommitment, EthAddress, Fr, GlobalVariables, Header, NUM_BYTES_PER_SHA256, PartialStateReference, StateReference, } from '@aztec/circuits.js';
import { toBufferBE } from '@aztec/foundation/bigint-buffer';
/**
 * Makes header.
 */
export function makeHeader(seed = 0, blockNumber = undefined, txsEffectsHash = undefined) {
    return new Header(makeAppendOnlyTreeSnapshot(seed + 0x100), makeContentCommitment(seed + 0x200, txsEffectsHash), makeStateReference(seed + 0x600), makeGlobalVariables((seed += 0x700), blockNumber));
}
/**
 * Makes arbitrary append only tree snapshot.
 * @param seed - The seed to use for generating the append only tree snapshot.
 * @returns An append only tree snapshot.
 */
export function makeAppendOnlyTreeSnapshot(seed = 1) {
    return new AppendOnlyTreeSnapshot(new Fr(seed), seed);
}
/**
 * Makes content commitment
 */
function makeContentCommitment(seed = 0, txsEffectsHash = undefined) {
    return new ContentCommitment(new Fr(seed), txsEffectsHash ?? toBufferBE(BigInt(seed + 0x100), NUM_BYTES_PER_SHA256), toBufferBE(BigInt(seed + 0x200), NUM_BYTES_PER_SHA256), toBufferBE(BigInt(seed + 0x300), NUM_BYTES_PER_SHA256));
}
/**
 * Makes arbitrary state reference.
 * @param seed - The seed to use for generating the state reference.
 * @returns A state reference.
 */
function makeStateReference(seed = 0) {
    return new StateReference(makeAppendOnlyTreeSnapshot(seed), makePartialStateReference(seed + 1));
}
/**
 * Makes arbitrary partial state reference.
 * @param seed - The seed to use for generating the partial state reference.
 * @returns A partial state reference.
 */
function makePartialStateReference(seed = 0) {
    return new PartialStateReference(makeAppendOnlyTreeSnapshot(seed), makeAppendOnlyTreeSnapshot(seed + 1), makeAppendOnlyTreeSnapshot(seed + 2));
}
/**
 * Makes global variables.
 * @param seed - The seed to use for generating the global variables.
 * @param blockNumber - The block number to use for generating the global variables.
 * If blockNumber is undefined, it will be set to seed + 2.
 * @returns Global variables.
 */
export function makeGlobalVariables(seed = 1, blockNumber = undefined) {
    if (blockNumber !== undefined) {
        return new GlobalVariables(new Fr(seed), new Fr(seed + 1), new Fr(blockNumber), new Fr(seed + 3), EthAddress.fromField(new Fr(seed + 4)), AztecAddress.fromField(new Fr(seed + 5)));
    }
    return new GlobalVariables(new Fr(seed), new Fr(seed + 1), new Fr(seed + 2), new Fr(seed + 3), EthAddress.fromField(new Fr(seed + 4)), AztecAddress.fromField(new Fr(seed + 5)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDJfYmxvY2tfY29kZV90b19wdXJnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sMl9ibG9ja19jb2RlX3RvX3B1cmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixVQUFVLEVBQ1YsRUFBRSxFQUNGLGVBQWUsRUFDZixNQUFNLEVBQ04sb0JBQW9CLEVBQ3BCLHFCQUFxQixFQUNyQixjQUFjLEdBQ2YsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFN0Q7O0dBRUc7QUFDSCxNQUFNLFVBQVUsVUFBVSxDQUN4QixJQUFJLEdBQUcsQ0FBQyxFQUNSLGNBQWtDLFNBQVMsRUFDM0MsaUJBQXFDLFNBQVM7SUFFOUMsT0FBTyxJQUFJLE1BQU0sQ0FDZiwwQkFBMEIsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQ3hDLHFCQUFxQixDQUFDLElBQUksR0FBRyxLQUFLLEVBQUUsY0FBYyxDQUFDLEVBQ25ELGtCQUFrQixDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsRUFDaEMsbUJBQW1CLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQ2xELENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxJQUFJLEdBQUcsQ0FBQztJQUNqRCxPQUFPLElBQUksc0JBQXNCLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxxQkFBcUIsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLGlCQUFxQyxTQUFTO0lBQ3JGLE9BQU8sSUFBSSxpQkFBaUIsQ0FDMUIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ1osY0FBYyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFLG9CQUFvQixDQUFDLEVBQ3hFLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFLG9CQUFvQixDQUFDLEVBQ3RELFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFLG9CQUFvQixDQUFDLENBQ3ZELENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsa0JBQWtCLENBQUMsSUFBSSxHQUFHLENBQUM7SUFDbEMsT0FBTyxJQUFJLGNBQWMsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsRUFBRSx5QkFBeUIsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRyxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMseUJBQXlCLENBQUMsSUFBSSxHQUFHLENBQUM7SUFDekMsT0FBTyxJQUFJLHFCQUFxQixDQUM5QiwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsRUFDaEMsMEJBQTBCLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUNwQywwQkFBMEIsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQ3JDLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLG1CQUFtQixDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsY0FBa0MsU0FBUztJQUN2RixJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksZUFBZSxDQUN4QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDWixJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQ2hCLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUNuQixJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQ2hCLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ3RDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ3pDLENBQUM7SUFDSixDQUFDO0lBQ0QsT0FBTyxJQUFJLGVBQWUsQ0FDeEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ1osSUFBSSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUNoQixJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQ2hCLElBQUksRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsRUFDaEIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFDdEMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDekMsQ0FBQztBQUNKLENBQUMifQ==